import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.CXStv6TN.js";const c=JSON.parse(`{"title":"","description":"","frontmatter":{"layout":"home","hero":{"name":"WeaveDI","text":"Modern Dependency Injection for Swift","tagline":"Next-generation Swift DI framework - Superior to Needle & Swinject with Actor optimization","image":{"src":"/logo.svg","alt":"WeaveDI"},"actions":[{"theme":"brand","text":"Get Started","link":"/guide/quick-start"},{"theme":"alt","text":"View on GitHub","link":"https://github.com/Roy-wonji/WeaveDI"}]},"features":[{"icon":"üöÄ","title":"Runtime Hot-Path Optimization (v3.2.0)","details":"50-80% performance improvement with TypeID + lock-free reads. Dictionary ‚Üí Array slot for O(1) access, snapshot approach eliminates read contention."},{"icon":"üé≠","title":"Actor Hop Optimization","details":"Intelligently optimizes transitions between different Actor contexts to maximize dependency resolution performance. Reduces MainActor UI updates by 81%."},{"icon":"üîí","title":"Complete Type Safety","details":"Compile-time verification through KeyPath-based registration, runtime safety with clear error messages, and leveraging Swift's powerful type system."},{"icon":"üìù","title":"Intuitive Property Wrappers","details":"@Inject (automatic dependency injection), @Factory (factory pattern-based module management), @SafeInject (safe dependency injection with error handling)."},{"icon":"üèóÔ∏è","title":"Powerful Module System","details":"AppDIContainer for app-wide dependency management, ModuleFactory for reusable module creation, Container for batch registration and parallel execution."},{"icon":"üß™","title":"Test-Friendly Design","details":"Easy registration of Mock objects for testing, independence between test states guaranteed, bootstrap reset for test container initialization."}]},"headers":[],"relativePath":"index.md","filePath":"index.md","lastUpdated":1758968598000}`),t={name:"index.md"};function r(l,s,p,h,d,o){return e(),a("div",null,[...s[0]||(s[0]=[n(`<h2 id="quick-start-guide" tabindex="-1">Quick Start Guide <a class="header-anchor" href="#quick-start-guide" aria-label="Permalink to &quot;Quick Start Guide&quot;">‚Äã</a></h2><h3 id="step-1-dependency-registration-unifieddi-recommended" tabindex="-1">Step 1: Dependency Registration (UnifiedDI Recommended) <a class="header-anchor" href="#step-1-dependency-registration-unifieddi-recommended" aria-label="Permalink to &quot;Step 1: Dependency Registration (UnifiedDI Recommended)&quot;">‚Äã</a></h3><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeaveDI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Bootstrap dependencies at app startup</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DependencyContainer.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bootstrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { container </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Register services</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    container.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserServiceProtocol.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Register repositories with KeyPath</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    container.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(\\.userRepository) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        UserRepositoryImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="step-2-property-wrapper-injection" tabindex="-1">Step 2: Property Wrapper Injection <a class="header-anchor" href="#step-2-property-wrapper-injection" aria-label="Permalink to &quot;Step 2: Property Wrapper Injection&quot;">‚Äã</a></h3><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Inject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userService: UserServiceProtocol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Factory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dataProcessor: DataProcessor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @SafeInject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> analyticsService: AnalyticsServiceProtocol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadUserData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        guard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> service </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userService </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> service.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fetchUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        updateUI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: userData)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="step-3-modern-async-await-support" tabindex="-1">Step 3: Modern Async/Await Support <a class="header-anchor" href="#step-3-modern-async-await-support" aria-label="Permalink to &quot;Step 3: Modern Async/Await Support&quot;">‚Äã</a></h3><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Modern async/await pattern</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userService </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UnifiedDI.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserService.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userService</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fetchUserData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="üöÄ-runtime-hot-path-optimization" tabindex="-1">üöÄ Runtime Hot-Path Optimization <a class="header-anchor" href="#üöÄ-runtime-hot-path-optimization" aria-label="Permalink to &quot;üöÄ Runtime Hot-Path Optimization&quot;">‚Äã</a></h2><p>Enable cutting-edge performance optimizations:</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Enable optimization mode</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnifiedRegistry.shared.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">enableOptimization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Existing code automatically gets performance improvements</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> service </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UnifiedDI.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserService.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="core-optimization-techniques" tabindex="-1">Core Optimization Techniques <a class="header-anchor" href="#core-optimization-techniques" aria-label="Permalink to &quot;Core Optimization Techniques&quot;">‚Äã</a></h3><ol><li><strong>TypeID + Index Access</strong>: Dictionary ‚Üí Array slot for O(1) access</li><li><strong>Lock-Free Reads</strong>: Snapshot approach eliminates read contention</li><li><strong>Inline Optimization</strong>: Reduced function call overhead</li><li><strong>Factory Chain Elimination</strong>: Direct call paths remove intermediate steps</li><li><strong>Scope-Specific Storage</strong>: Optimized separation of singleton/session/request scopes</li></ol><h3 id="performance-improvements" tabindex="-1">Performance Improvements <a class="header-anchor" href="#performance-improvements" aria-label="Permalink to &quot;Performance Improvements&quot;">‚Äã</a></h3><table tabindex="0"><thead><tr><th>Scenario</th><th>Improvement</th><th>Description</th></tr></thead><tbody><tr><td>Single-threaded resolve</td><td>50-80% faster</td><td>TypeID + direct access</td></tr><tr><td>Multi-threaded reads</td><td>2-3x throughput</td><td>Lock-free snapshots</td></tr><tr><td>Complex dependencies</td><td>20-40% faster</td><td>Chain flattening</td></tr></tbody></table><h2 id="performance-metrics" tabindex="-1">Performance Metrics <a class="header-anchor" href="#performance-metrics" aria-label="Permalink to &quot;Performance Metrics&quot;">‚Äã</a></h2><table tabindex="0"><thead><tr><th>Scenario</th><th>Swinject</th><th>Needle</th><th>WeaveDI 3.1</th><th>Improvement</th></tr></thead><tbody><tr><td>Single dependency resolution</td><td>1.2ms</td><td>0.8ms</td><td>0.2ms</td><td><strong>83% vs Needle</strong></td></tr><tr><td>Complex dependency graph</td><td>25.6ms</td><td>15.6ms</td><td>3.1ms</td><td><strong>80% vs Needle</strong></td></tr><tr><td>MainActor UI updates</td><td>5.1ms</td><td>3.1ms</td><td>0.6ms</td><td><strong>81% vs Needle</strong></td></tr><tr><td>Swift 6 Concurrency</td><td>‚ùå</td><td>‚ö†Ô∏è Partial</td><td>‚úÖ Full</td><td><strong>Native Support</strong></td></tr></tbody></table><h2 id="üéØ-getting-started" tabindex="-1">üéØ Getting Started <a class="header-anchor" href="#üéØ-getting-started" aria-label="Permalink to &quot;üéØ Getting Started&quot;">‚Äã</a></h2><p>Step-by-step learning path:</p><ol><li><strong>Basics</strong>: <a href="/WeaveDI/guide/quick-start.html">Quick Start</a></li><li><strong>Beginner</strong>: <a href="/WeaveDI/guide/bootstrap.html">Bootstrap</a></li><li><strong>Intermediate</strong>: <a href="/WeaveDI/guide/property-wrappers.html">Property Wrappers</a></li><li><strong>Advanced</strong>: <a href="/WeaveDI/guide/module-system.html">Module System</a></li></ol><h2 id="üìö-documentation-topics" tabindex="-1">üìö Documentation Topics <a class="header-anchor" href="#üìö-documentation-topics" aria-label="Permalink to &quot;üìö Documentation Topics&quot;">‚Äã</a></h2><h3 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">‚Äã</a></h3><ul><li><a href="/WeaveDI/guide/quick-start.html">Quick Start</a> - Essential integration steps</li><li><a href="/WeaveDI/guide/bootstrap.html">Bootstrap</a> - Safe app initialization patterns</li><li><a href="/WeaveDI/guide/property-wrappers.html">Property Wrappers</a> - Automatic dependency injection</li></ul><h3 id="core-apis" tabindex="-1">Core APIs <a class="header-anchor" href="#core-apis" aria-label="Permalink to &quot;Core APIs&quot;">‚Äã</a></h3><ul><li><a href="/WeaveDI/api/core-apis.html">Core APIs</a> - Complete API reference</li><li><a href="/WeaveDI/guide/unified-di.html">Unified DI</a> - Single entry point API</li><li><a href="/WeaveDI/guide/container-usage.html">Container Usage</a> - Advanced container patterns</li></ul><h3 id="performance-optimization" tabindex="-1">Performance &amp; Optimization <a class="header-anchor" href="#performance-optimization" aria-label="Permalink to &quot;Performance &amp; Optimization&quot;">‚Äã</a></h3><ul><li><a href="/WeaveDI/guide/runtime-optimization.html">Runtime Optimization</a> - Hot-path performance</li><li><a href="/WeaveDI/guide/benchmarks.html">Benchmarks</a> - Performance comparisons</li><li><a href="/WeaveDI/guide/auto-di-optimizer.html">Auto DI Optimizer</a> - Automatic optimizations</li></ul><h3 id="advanced-features" tabindex="-1">Advanced Features <a class="header-anchor" href="#advanced-features" aria-label="Permalink to &quot;Advanced Features&quot;">‚Äã</a></h3><ul><li><a href="/WeaveDI/guide/module-system.html">Module System</a> - Scalable module architecture</li><li><a href="/WeaveDI/guide/scopes.html">Scopes</a> - Lifecycle management</li><li><a href="/WeaveDI/guide/module-factory.html">Module Factory</a> - Factory patterns</li></ul><h3 id="migration-integration" tabindex="-1">Migration &amp; Integration <a class="header-anchor" href="#migration-integration" aria-label="Permalink to &quot;Migration &amp; Integration&quot;">‚Äã</a></h3><ul><li><a href="/WeaveDI/guide/migration-3.0.0.html">Migration 3.0.0</a> - Latest migration guide</li><li><a href="/WeaveDI/guide/migration-2.0.0.html">Migration 2.0.0</a> - Legacy migration</li><li><a href="/WeaveDI/guide/app-di-integration.html">App DI Integration</a> - App-level patterns</li><li><a href="/WeaveDI/guide/needle-style-di.html">Needle Style DI</a> - Needle compatibility</li></ul><h3 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">‚Äã</a></h3><ul><li><a href="/WeaveDI/api/practical-guide.html">Practical Guide</a> - Real-world examples</li><li><a href="/WeaveDI/guide/dependency-key-patterns.html">Dependency Key Patterns</a> - KeyPath patterns</li><li><a href="/WeaveDI/api/bulk-registration-dsl.html">Bulk Registration DSL</a> - Batch operations</li></ul><h2 id="why-weavedi-üèÜ" tabindex="-1">Why WeaveDI? üèÜ <a class="header-anchor" href="#why-weavedi-üèÜ" aria-label="Permalink to &quot;Why WeaveDI? üèÜ&quot;">‚Äã</a></h2><h3 id="framework-comparison" tabindex="-1">Framework Comparison <a class="header-anchor" href="#framework-comparison" aria-label="Permalink to &quot;Framework Comparison&quot;">‚Äã</a></h3><table tabindex="0"><thead><tr><th>Feature</th><th>Swinject</th><th>Needle</th><th>WeaveDI 3.1</th></tr></thead><tbody><tr><td><strong>Performance</strong></td><td>‚ùå Slow reflection-based</td><td>‚úÖ Zero-cost abstraction</td><td>‚úÖ Zero-cost + Actor optimization</td></tr><tr><td><strong>Swift Concurrency</strong></td><td>‚ùå No async/await support</td><td>‚ö†Ô∏è Limited async support</td><td>‚úÖ Native async/await + Actor isolation</td></tr><tr><td><strong>Code Generation</strong></td><td>‚ùå Runtime only</td><td>‚ùå Build-time required</td><td>‚úÖ Optional (runtime + codegen)</td></tr><tr><td><strong>Learning Curve</strong></td><td>‚ö†Ô∏è Complex API design</td><td>‚ö†Ô∏è Steep dependency graph</td><td>‚úÖ Intuitive property wrappers</td></tr><tr><td><strong>Compile Safety</strong></td><td>‚ùå Runtime resolution errors</td><td>‚úÖ Compile-time verification</td><td>‚úÖ Enhanced compile-time + KeyPath</td></tr><tr><td><strong>Migration</strong></td><td>‚ùå Difficult from other DI</td><td>‚ùå All-or-nothing adoption</td><td>‚úÖ Gradual migration support</td></tr><tr><td><strong>Testing</strong></td><td>‚ö†Ô∏è Complex mocking setup</td><td>‚ö†Ô∏è Limited test isolation</td><td>‚úÖ Built-in test support + mocking</td></tr><tr><td><strong>Type Safety</strong></td><td>‚ùå Weak type checking</td><td>‚úÖ Strong type checking</td><td>‚úÖ Enhanced with KeyPath validation</td></tr><tr><td><strong>Memory Management</strong></td><td>‚ö†Ô∏è Potential retain cycles</td><td>‚úÖ Automatic lifecycle</td><td>‚úÖ Optimized weak references</td></tr><tr><td><strong>Hot Reload Support</strong></td><td>‚ùå No support</td><td>‚ùå No support</td><td>‚úÖ Full hot reload support</td></tr><tr><td><strong>Documentation</strong></td><td>‚ö†Ô∏è Scattered docs</td><td>‚ö†Ô∏è Complex setup guides</td><td>‚úÖ Comprehensive guides + examples</td></tr><tr><td><strong>Community</strong></td><td>‚úÖ Large community</td><td>‚ö†Ô∏è Uber-specific</td><td>‚úÖ Growing ecosystem</td></tr></tbody></table><h3 id="real-world-code-comparison" tabindex="-1">Real-world Code Comparison <a class="header-anchor" href="#real-world-code-comparison" aria-label="Permalink to &quot;Real-world Code Comparison&quot;">‚Äã</a></h3><h4 id="swinject-traditional-approach" tabindex="-1">Swinject (Traditional Approach) <a class="header-anchor" href="#swinject-traditional-approach" aria-label="Permalink to &quot;Swinject (Traditional Approach)&quot;">‚Äã</a></h4><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Swinject - Verbose and runtime-heavy</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> container </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">container.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserService.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { resolver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    UserServiceImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        repository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: resolver.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserRepository.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: resolver.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Logger.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userService: UserService</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        userService </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> container.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserService.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Runtime resolution</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="needle-compile-time-but-complex" tabindex="-1">Needle (Compile-time but Complex) <a class="header-anchor" href="#needle-compile-time-but-complex" aria-label="Permalink to &quot;Needle (Compile-time but Complex)&quot;">‚Äã</a></h4><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Needle - Requires code generation and complex setup</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protocol</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserDependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Dependency </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userRepository: UserRepository { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logger: Logger { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component&lt;UserDependency&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userService: UserService {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UserServiceImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            repository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: dependency.userRepository,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: dependency.logger</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="weavedi-3-1-modern-simple" tabindex="-1">WeaveDI 3.1 (Modern &amp; Simple) <a class="header-anchor" href="#weavedi-3-1-modern-simple" aria-label="Permalink to &quot;WeaveDI 3.1 (Modern &amp; Simple)&quot;">‚Äã</a></h4><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// WeaveDI - Clean, fast, and Actor-optimized</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@MainActor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Inject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userService: UserService</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Zero-cost, type-safe</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Factory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> processor: DataProcessor  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Factory pattern</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Native async/await with Actor optimization</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userService</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fetchUserData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        updateUI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Already on MainActor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Registration is simple and powerful</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnifiedDI.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserService.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UserServiceImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="key-advantages" tabindex="-1">Key Advantages <a class="header-anchor" href="#key-advantages" aria-label="Permalink to &quot;Key Advantages&quot;">‚Äã</a></h3><ol><li><strong>üöÄ Performance</strong>: Up to 83% faster than Needle, 90% faster than Swinject</li><li><strong>üé≠ Actor-Native</strong>: Built for Swift Concurrency from day one</li><li><strong>üîí Type Safety</strong>: Enhanced compile-time verification + runtime safety</li><li><strong>üìù Developer Experience</strong>: Intuitive Property Wrappers (@Inject, @Factory, @SafeInject)</li><li><strong>üß™ Testing</strong>: Built-in mocking and test isolation</li><li><strong>üîÑ Migration</strong>: Gradual migration from any existing DI framework</li></ol><h3 id="platform-support" tabindex="-1">Platform Support <a class="header-anchor" href="#platform-support" aria-label="Permalink to &quot;Platform Support&quot;">‚Äã</a></h3><p>WeaveDI 3.1 is designed for modern Swift applications:</p><ul><li><strong>iOS 15.0+, macOS 14.0+, watchOS 8.0+, tvOS 15.0+</strong> support</li><li><strong>Swift 6 Concurrency</strong> first-class integration</li><li><strong>Actor model</strong> optimization</li><li><strong>Zero-cost abstractions</strong> in release builds</li><li><strong>Comprehensive testing</strong> support</li></ul><p><em>Made for Swift developers who want the best</em></p>`,48)])])}const g=i(t,[["render",r]]);export{c as __pageData,g as default};
