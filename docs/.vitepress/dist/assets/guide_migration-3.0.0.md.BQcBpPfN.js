import{_ as a,c as i,o as s,ag as t}from"./chunks/framework.CXStv6TN.js";const u=JSON.parse('{"title":"WeaveDI 3.0.0 Migration Guide","description":"","frontmatter":{},"headers":[],"relativePath":"guide/migration-3.0.0.md","filePath":"guide/migration-3.0.0.md","lastUpdated":1758968598000}'),n={name:"guide/migration-3.0.0.md"};function l(r,e,d,o,p,c){return s(),i("div",null,[...e[0]||(e[0]=[t(`<h1 id="weavedi-3-0-0-migration-guide" tabindex="-1">WeaveDI 3.0.0 Migration Guide <a class="header-anchor" href="#weavedi-3-0-0-migration-guide" aria-label="Permalink to &quot;WeaveDI 3.0.0 Migration Guide&quot;">​</a></h1><p>This document outlines the necessary changes and recommended migration paths when upgrading from 2.x.x to 3.0.0.</p><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p>The core of 3.0.0 is &quot;unified read paths&quot; and &quot;hot-path non-blocking&quot;. External reads are unified with synchronous helpers from <code>UnifiedDI</code>/<code>DIContainer</code> (snapshot-based), and internal tracking is sent non-blocking (Task) under actor isolation.</p><h3 id="major-changes" tabindex="-1">Major Changes <a class="header-anchor" href="#major-changes" aria-label="Permalink to &quot;Major Changes&quot;">​</a></h3><ul><li>(Breaking) Internalized (internal) or deprecated multiple read APIs from AutoDIOptimizer (nonisolated/static) <ul><li>Externally, only use synchronous helpers from <code>UnifiedDI</code>/<code>DIContainer</code></li><li>Internally, only use <code>readSnapshot()</code> to read snapshots and calculate necessary information</li></ul></li><li>Aligned AutoMonitor with <code>@DIActor</code> to eliminate internal hops</li><li>Tracking calls (register/resolve) are sent non-blocking via fire-and-forget (Task)</li><li>Snapshot/graph updates with 100ms debounce (default)</li></ul><h2 id="impact" tabindex="-1">Impact <a class="header-anchor" href="#impact" aria-label="Permalink to &quot;Impact&quot;">​</a></h2><p>Most projects only need to check the following items:</p><ol><li>If there&#39;s code directly calling AutoDIOptimizer&#39;s read APIs, replace according to the table below</li><li>For timing-sensitive validation in tests, change snapshot reflection waiting to polling (waitUntil/waitAsyncUntil)</li></ol><h2 id="api-mapping-deprecated-→-replacement" tabindex="-1">API Mapping (Deprecated → Replacement) <a class="header-anchor" href="#api-mapping-deprecated-→-replacement" aria-label="Permalink to &quot;API Mapping (Deprecated → Replacement)&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Deprecated (AutoDIOptimizer)</th><th>Replacement</th></tr></thead><tbody><tr><td><code>getCurrentStats()</code></td><td><code>UnifiedDI.stats()</code> / <code>DIContainer.getUsageStatistics()</code></td></tr><tr><td><code>visualizeGraph()</code></td><td><code>UnifiedDI.autoGraph()</code> / <code>DIContainer.getAutoGeneratedGraph()</code></td></tr><tr><td><code>getFrequentlyUsedTypes()</code></td><td><code>UnifiedDI.optimizedTypes()</code> / <code>DIContainer.getOptimizedTypes()</code></td></tr><tr><td><code>getDetectedCircularDependencies()</code></td><td><code>UnifiedDI.circularDependencies()</code> / <code>DIContainer.getDetectedCircularDependencies()</code></td></tr><tr><td><code>isOptimized(_:)</code></td><td><code>UnifiedDI.isOptimized(_:)</code> / <code>DIContainer.isAutoOptimized(_:)</code></td></tr><tr><td><code>getActorOptimizationSuggestions()</code></td><td><code>UnifiedDI.actorOptimizations</code></td></tr><tr><td><code>getDetectedTypeSafetyIssues()</code></td><td><code>UnifiedDI.typeSafetyIssues</code></td></tr><tr><td><code>getDetectedAutoFixedTypes()</code></td><td><code>UnifiedDI.autoFixedTypes</code></td></tr><tr><td><code>getActorHopStats()</code></td><td><code>UnifiedDI.actorHopStats</code></td></tr><tr><td><code>getAsyncPerformanceStats()</code></td><td><code>UnifiedDI.asyncPerformanceStats</code></td></tr><tr><td><code>getRecentGraphChanges(...)</code></td><td><code>UnifiedDI.getGraphChanges(...)</code></td></tr><tr><td><code>getCurrentLogLevel()</code></td><td><code>UnifiedDI.logLevel</code> / <code>UnifiedDI.getLogLevel()</code></td></tr></tbody></table><blockquote><p>Internal use: Read snapshots with <code>AutoDIOptimizer.readSnapshot()</code> and calculate necessary values.</p></blockquote><h2 id="code-change-examples" tabindex="-1">Code Change Examples <a class="header-anchor" href="#code-change-examples" aria-label="Permalink to &quot;Code Change Examples&quot;">​</a></h2><h3 id="graph-statistics-reading" tabindex="-1">Graph/Statistics Reading <a class="header-anchor" href="#graph-statistics-reading" aria-label="Permalink to &quot;Graph/Statistics Reading&quot;">​</a></h3><div class="language-diff vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- let graph = AutoDIOptimizer.shared.visualizeGraph()</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ let graph = UnifiedDI.autoGraph()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- let stats = AutoDIOptimizer.shared.getCurrentStats()</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ let stats = UnifiedDI.stats()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- let optimized = AutoDIOptimizer.shared.getFrequentlyUsedTypes()</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ let optimized = UnifiedDI.optimizedTypes()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="log-level" tabindex="-1">Log Level <a class="header-anchor" href="#log-level" aria-label="Permalink to &quot;Log Level&quot;">​</a></h3><div class="language-diff vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- AutoDIOptimizer.shared.setLogLevel(.errors)</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ UnifiedDI.setLogLevel(.errors)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- let level = AutoDIOptimizer.shared.getCurrentLogLevel()</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ let level = UnifiedDI.logLevel</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="test-timing" tabindex="-1">Test Timing <a class="header-anchor" href="#test-timing" aria-label="Permalink to &quot;Test Timing&quot;">​</a></h3><div class="language-diff vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// Before: Immediate check (might fail due to async updates)</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- let stats = AutoDIOptimizer.shared.getCurrentStats()</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- XCTAssertEqual(stats[&quot;UserService&quot;], 1)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// After: Wait for snapshot reflection</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ await waitAsyncUntil { UnifiedDI.stats()[&quot;UserService&quot;] == 1 }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="new-features-in-3-0-0" tabindex="-1">New Features in 3.0.0 <a class="header-anchor" href="#new-features-in-3-0-0" aria-label="Permalink to &quot;New Features in 3.0.0&quot;">​</a></h2><h3 id="runtime-hot-path-optimization" tabindex="-1">Runtime Hot-Path Optimization <a class="header-anchor" href="#runtime-hot-path-optimization" aria-label="Permalink to &quot;Runtime Hot-Path Optimization&quot;">​</a></h3><ul><li>TypeID + index access for O(1) resolution</li><li>Lock-free snapshot reads for better concurrency</li><li>Factory chain elimination for direct call paths</li></ul><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Enable optimization mode</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnifiedRegistry.shared.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">enableOptimization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Existing code automatically gets performance improvements</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> service </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UnifiedDI.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserService.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="enhanced-performance-tracking" tabindex="-1">Enhanced Performance Tracking <a class="header-anchor" href="#enhanced-performance-tracking" aria-label="Permalink to &quot;Enhanced Performance Tracking&quot;">​</a></h3><ul><li>Real-time statistics with snapshot consistency</li><li>Actor hop optimization suggestions</li><li>Automatic type safety validation</li></ul><h2 id="migration-checklist" tabindex="-1">Migration Checklist <a class="header-anchor" href="#migration-checklist" aria-label="Permalink to &quot;Migration Checklist&quot;">​</a></h2><ul><li>[ ] Replace all direct AutoDIOptimizer read API calls</li><li>[ ] Update test timing expectations for async updates</li><li>[ ] Consider enabling runtime optimization for production</li><li>[ ] Review logging configuration if using custom log levels</li><li>[ ] Test snapshot consistency in critical paths</li></ul>`,27)])])}const g=a(n,[["render",l]]);export{u as __pageData,g as default};
