import{_ as a,c as e,o as s,ag as t}from"./chunks/framework.CXStv6TN.js";const m=JSON.parse('{"title":"Runtime Hot-Path Optimization","description":"","frontmatter":{},"headers":[],"relativePath":"guide/runtime-optimization.md","filePath":"guide/runtime-optimization.md","lastUpdated":1758968598000}'),n={name:"guide/runtime-optimization.md"};function l(r,i,o,p,h,d){return s(),e("div",null,[...i[0]||(i[0]=[t(`<h1 id="runtime-hot-path-optimization" tabindex="-1">Runtime Hot-Path Optimization <a class="header-anchor" href="#runtime-hot-path-optimization" aria-label="Permalink to &quot;Runtime Hot-Path Optimization&quot;">​</a></h1><p>Learn about the high-performance runtime optimization system introduced in WeaveDI v3.2.0.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>Runtime hot-path optimization is an advanced optimization system designed to eliminate performance bottlenecks in dependency injection.</p><h3 id="core-optimization-techniques" tabindex="-1">Core Optimization Techniques <a class="header-anchor" href="#core-optimization-techniques" aria-label="Permalink to &quot;Core Optimization Techniques&quot;">​</a></h3><ol><li><p><strong>TypeID + Index Access</strong></p><ul><li><code>ObjectIdentifier</code> → <code>Int</code> slot mapping</li><li>O(1) array index access instead of dictionary lookup</li><li>Memory access pattern optimization</li></ul></li><li><p><strong>Snapshot/Lock-Free Reads</strong></p><ul><li>Immutable Storage class-based snapshot approach</li><li>Complete elimination of read contention</li><li>Locking only during writes</li></ul></li><li><p><strong>Inline Optimization</strong></p><ul><li>Applied <code>@inlinable</code> + <code>@inline(__always)</code></li><li>Cross-module optimization with <code>@_alwaysEmitIntoClient</code></li><li>Reduced function call overhead</li></ul></li><li><p><strong>Factory Chain Elimination</strong></p><ul><li>Direct call paths without intermediate factory steps</li><li>Dependency chain flattening</li><li>Removal of multi-stage factory costs</li></ul></li><li><p><strong>Scope-Specific Static Storage</strong></p><ul><li>Separation of singleton/session/request scopes</li><li>Atomic once initialization</li><li>Race condition elimination</li></ul></li></ol><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><h3 id="enable-optimization" tabindex="-1">Enable Optimization <a class="header-anchor" href="#enable-optimization" aria-label="Permalink to &quot;Enable Optimization&quot;">​</a></h3><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeaveDI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Enable optimization mode</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UnifiedRegistry.shared.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">enableOptimization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Existing code gets performance improvements without changes</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> service </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UnifiedDI.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserService.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="check-optimization" tabindex="-1">Check Optimization <a class="header-anchor" href="#check-optimization" aria-label="Permalink to &quot;Check Optimization&quot;">​</a></h3><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Check optimization status</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isOptimized </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UnifiedRegistry.shared.isOptimizationEnabled</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Optimization enabled: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(isOptimized)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Disable optimization</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UnifiedRegistry.shared.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">disableOptimization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="performance-improvements" tabindex="-1">Performance Improvements <a class="header-anchor" href="#performance-improvements" aria-label="Permalink to &quot;Performance Improvements&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Scenario</th><th>Improvement</th><th>Description</th></tr></thead><tbody><tr><td>Single-threaded resolve</td><td>50-80% faster</td><td>TypeID + direct access</td></tr><tr><td>Multi-threaded reads</td><td>2-3x throughput</td><td>Lock-free snapshots</td></tr><tr><td>Complex dependencies</td><td>20-40% faster</td><td>Chain flattening</td></tr></tbody></table><h2 id="benchmarks" tabindex="-1">Benchmarks <a class="header-anchor" href="#benchmarks" aria-label="Permalink to &quot;Benchmarks&quot;">​</a></h2><p>Run the included benchmarks to measure performance improvements:</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">swift</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> release</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Benchmarks</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --count</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 100k</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --quick</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="compatibility" tabindex="-1">Compatibility <a class="header-anchor" href="#compatibility" aria-label="Permalink to &quot;Compatibility&quot;">​</a></h2><ul><li><strong>100% API compatibility</strong>: No changes to existing code</li><li><strong>Opt-in optimization</strong>: Enable/disable anytime</li><li><strong>Gradual migration</strong>: Phased adoption support</li><li><strong>Zero breaking changes</strong>: Complete preservation of existing behavior</li></ul><h2 id="internal-implementation" tabindex="-1">Internal Implementation <a class="header-anchor" href="#internal-implementation" aria-label="Permalink to &quot;Internal Implementation&quot;">​</a></h2><p>Optimizations are implemented in the following files:</p><ul><li><code>OptimizedTypeRegistry.swift</code> - TypeID system</li><li><code>AtomicStorage.swift</code> - Lock-free storage</li><li><code>DirectCallRegistry.swift</code> - Direct call paths</li><li><code>OptimizedScopeStorage.swift</code> - Scope optimization</li></ul><h2 id="see-also" tabindex="-1">See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;See Also&quot;">​</a></h2><ul><li><a href="/WeaveDI/guide/runtime-optimization.html">Performance Optimization Guide</a></li><li><a href="/WeaveDI/guide/benchmarks.html">Benchmarks Documentation</a></li><li><a href="/WeaveDI/guide/unified-di.html">UnifiedDI API</a></li></ul>`,23)])])}const k=a(n,[["render",l]]);export{m as __pageData,k as default};
