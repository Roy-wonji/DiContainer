import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.CXStv6TN.js";const g=JSON.parse('{"title":"부트스트랩 가이드 (Bootstrap)","description":"","frontmatter":{},"headers":[],"relativePath":"ko/guide/bootstrap.md","filePath":"ko/guide/bootstrap.md","lastUpdated":1758968598000}'),e={name:"ko/guide/bootstrap.md"};function p(t,s,h,k,r,d){return n(),a("div",null,[...s[0]||(s[0]=[l(`<h1 id="부트스트랩-가이드-bootstrap" tabindex="-1">부트스트랩 가이드 (Bootstrap) <a class="header-anchor" href="#부트스트랩-가이드-bootstrap" aria-label="Permalink to &quot;부트스트랩 가이드 (Bootstrap)&quot;">​</a></h1><p>앱 시작 시 의존성을 안전하고 일관되게 준비하는 방법을 소개합니다. WeaveDI는 다양한 부트스트랩 패턴을 제공하여 동기/비동기 초기화, 테스트 격리, 조건부 초기화 등을 유연하게 구성할 수 있습니다.</p><h2 id="개요" tabindex="-1">개요 <a class="header-anchor" href="#개요" aria-label="Permalink to &quot;개요&quot;">​</a></h2><ul><li>목표: 앱 시작 시점에 필요한 의존성을 한곳에서 명확하게 초기화</li><li>특징: <ul><li>동기/비동기/혼합 부트스트랩 지원</li><li>전역 컨테이너의 원자적 교체(스레드 안전)</li><li>테스트 격리/리셋 API 제공</li></ul></li></ul><h2 id="사용-시점" tabindex="-1">사용 시점 <a class="header-anchor" href="#사용-시점" aria-label="Permalink to &quot;사용 시점&quot;">​</a></h2><ul><li>AppDelegate/SceneDelegate/앱 엔트리포인트에서 한 번만 호출</li><li>SwiftUI App 구조에서는 <code>@main</code> 진입부 또는 초기 View-Model 구성 시점</li></ul><h2 id="동기-부트스트랩" tabindex="-1">동기 부트스트랩 <a class="header-anchor" href="#동기-부트스트랩" aria-label="Permalink to &quot;동기 부트스트랩&quot;">​</a></h2><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeaveDI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DIContainer.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bootstrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { container </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    container.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Logger.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ConsoleLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    container.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Networking.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DefaultNetworking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    container.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserRepository.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UserRepositoryImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 이후 어디서든 DIContainer.shared.resolve(...) 사용 가능</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DIContainer.shared.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Logger.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="비동기-부트스트랩" tabindex="-1">비동기 부트스트랩 <a class="header-anchor" href="#비동기-부트스트랩" aria-label="Permalink to &quot;비동기 부트스트랩&quot;">​</a></h2><p>비동기 초기화가 필요한 경우(예: 원격 설정, 데이터베이스 연결 등)에는 <code>bootstrapAsync</code>를 사용합니다.</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ok </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DIContainer.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bootstrapAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { container </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 예: 원격 설정 로드</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> try</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RemoteConfig.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    container.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AppConfig.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { config }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 예: 비동기 리소스 초기화</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> db </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> try</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Database.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    container.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Database.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { db }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">guard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ok </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 실패 처리 (스플래시/알림/재시도) */</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>참고: <code>bootstrapAsync</code>는 실패 시 DEBUG 빌드에선 <code>fatalError</code>, RELEASE에선 <code>false</code>를 반환하도록 구성할 수 있습니다. 현재 구현은 내부 로깅과 함께 Bool 반환을 제공합니다.</p></blockquote><h2 id="혼합-부트스트랩-sync-async" tabindex="-1">혼합 부트스트랩 (sync + async) <a class="header-anchor" href="#혼합-부트스트랩-sync-async" aria-label="Permalink to &quot;혼합 부트스트랩 (sync + async)&quot;">​</a></h2><p>핵심 의존성은 즉시, 부가 의존성은 비동기로 준비하고 싶을 때 유용합니다.</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@MainActor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DIContainer.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bootstrapMixed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    sync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { container </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        container.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Logger.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ConsoleLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        container.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Networking.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DefaultNetworking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { container </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 비동기 확장 의존성</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> analytics </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AnalyticsClient.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">make</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        container.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnalyticsClient.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { analytics }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="백그라운드-task에서-부트스트랩" tabindex="-1">백그라운드 Task에서 부트스트랩 <a class="header-anchor" href="#백그라운드-task에서-부트스트랩" aria-label="Permalink to &quot;백그라운드 Task에서 부트스트랩&quot;">​</a></h2><p>앱 시작 지연을 최소화하고 싶을 때 백그라운드에서 비동기 부트스트랩을 수행할 수 있습니다.</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DIContainer.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bootstrapInTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { container </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> featureFlags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> try</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FeatureFlags.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    container.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FeatureFlags.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { featureFlags }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="조건부-부트스트랩" tabindex="-1">조건부 부트스트랩 <a class="header-anchor" href="#조건부-부트스트랩" aria-label="Permalink to &quot;조건부 부트스트랩&quot;">​</a></h2><p>이미 초기화된 경우는 건너뛰고 싶을 때 사용합니다.</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> didInit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DIContainer.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bootstrapIfNeeded</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { container </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    container.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Logger.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ConsoleLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">didInit {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 이미 준비됨</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>비동기 버전도 제공합니다.</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> didInit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DIContainer.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bootstrapAsyncIfNeeded</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { container </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> remote </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> try</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RemoteConfig.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    container.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RemoteConfig.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { remote }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="접근-보장-assert" tabindex="-1">접근 보장(Assert) <a class="header-anchor" href="#접근-보장-assert" aria-label="Permalink to &quot;접근 보장(Assert)&quot;">​</a></h2><p>부트스트랩 전에 DI에 접근하지 않도록 강제할 때 사용합니다.</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DIContainer.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ensureBootstrapped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 미부트스트랩 시 precondition 실패</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="테스트-가이드" tabindex="-1">테스트 가이드 <a class="header-anchor" href="#테스트-가이드" aria-label="Permalink to &quot;테스트 가이드&quot;">​</a></h2><p>테스트마다 깨끗한 컨테이너를 원하면 리셋 API를 사용합니다.</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@MainActor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setUp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setUp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DIContainer.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resetForTesting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DEBUG 빌드에서만 허용</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 테스트 전용 등록</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DIContainer.shared.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MockService.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MockService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="베스트-프랙티스" tabindex="-1">베스트 프랙티스 <a class="header-anchor" href="#베스트-프랙티스" aria-label="Permalink to &quot;베스트 프랙티스&quot;">​</a></h2><ul><li>한 곳에서만 부트스트랩: 앱 진입점(또는 테스트 setUp)에서 단 한 번</li><li>실패 처리 분기: 비동기 부트스트랩은 실패 시 사용자 경험을 고려한 경로 준비</li><li>혼합 패턴 권장: 필수 의존성은 동기, 부가 의존성은 비동기 등록</li><li>접근 보장: 개발 단계에서는 <code>ensureBootstrapped()</code>로 실수 조기 발견</li><li>테스트 격리: 각 테스트 시작 전 <code>resetForTesting()</code> 호출</li></ul>`,31)])])}const c=i(e,[["render",p]]);export{g as __pageData,c as default};
