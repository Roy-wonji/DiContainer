import{_ as a,c as i,o as e,ag as n}from"./chunks/framework.CXStv6TN.js";const k=JSON.parse('{"title":"Automatic DI Optimization","description":"","frontmatter":{},"headers":[],"relativePath":"guide/auto-di-optimizer.md","filePath":"guide/auto-di-optimizer.md","lastUpdated":1758968598000}'),t={name:"guide/auto-di-optimizer.md"};function l(p,s,r,o,d,c){return e(),i("div",null,[...s[0]||(s[0]=[n(`<h1 id="automatic-di-optimization" tabindex="-1">Automatic DI Optimization <a class="header-anchor" href="#automatic-di-optimization" aria-label="Permalink to &quot;Automatic DI Optimization&quot;">​</a></h1><p>System that automatically generates dependency graphs and optimizes performance</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>WeaveDI provides a system that automatically tracks dependency relationships and optimizes performance without any additional configuration. It runs automatically in the background without developers needing to worry about it.</p><h2 id="automatic-features" tabindex="-1">Automatic Features <a class="header-anchor" href="#automatic-features" aria-label="Permalink to &quot;Automatic Features&quot;">​</a></h2><h3 id="🔄-automatic-dependency-graph-generation" tabindex="-1">🔄 Automatic Dependency Graph Generation <a class="header-anchor" href="#🔄-automatic-dependency-graph-generation" aria-label="Permalink to &quot;🔄 Automatic Dependency Graph Generation&quot;">​</a></h3><p>The graph is automatically updated every time dependencies are registered or resolved.</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Simply register and it&#39;s automatically added to the graph</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> service </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UnifiedDI.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserService.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    UserServiceImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Auto-generated graph is automatically output via LogMacro</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// No separate calls needed - auto logging: 📊 Auto tracking registration: UserService</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="🎯-automatic-actor-hop-detection-and-optimization" tabindex="-1">🎯 Automatic Actor Hop Detection and Optimization <a class="header-anchor" href="#🎯-automatic-actor-hop-detection-and-optimization" aria-label="Permalink to &quot;🎯 Automatic Actor Hop Detection and Optimization&quot;">​</a></h3><p>Automatically detects Actor hop patterns during dependency resolution and provides optimization suggestions.</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Simply resolve and Actor hops are automatically detected</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> service </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UnifiedDI.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserService.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Auto log (when 5+ hops occur):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 🎯 Actor optimization suggestion for UserService: Recommend moving to MainActor (hops: 12, avg: 85.3ms)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="🔒-automatic-type-safety-verification" tabindex="-1">🔒 Automatic Type Safety Verification <a class="header-anchor" href="#🔒-automatic-type-safety-verification" aria-label="Permalink to &quot;🔒 Automatic Type Safety Verification&quot;">​</a></h3><p>Automatically detects and safely handles type safety issues at runtime.</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Type safety is automatically verified during resolution</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> service </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UnifiedDI.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserService.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Auto log (when issues detected):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 🔒 Type safety issue: UserService is not Sendable</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 🚨 Auto safety check: UserService resolved to nil - dependency not registered</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="⚡-automatic-performance-optimization" tabindex="-1">⚡ Automatic Performance Optimization <a class="header-anchor" href="#⚡-automatic-performance-optimization" aria-label="Permalink to &quot;⚡ Automatic Performance Optimization&quot;">​</a></h3><p>Analyzes usage patterns to automatically optimize frequently used types.</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Automatically optimized when used multiple times</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> _</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> service </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UnifiedDI.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserService.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Optimized types are automatically logged</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Auto log: ⚡ Auto optimized: UserService (10 uses)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="📊-automatic-usage-statistics-collection" tabindex="-1">📊 Automatic Usage Statistics Collection <a class="header-anchor" href="#📊-automatic-usage-statistics-collection" aria-label="Permalink to &quot;📊 Automatic Usage Statistics Collection&quot;">​</a></h3><p>Usage frequency for each type is automatically tracked.</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Usage statistics are automatically logged every 30 seconds</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Auto log: 📊 [AutoDI] Current stats: [&quot;UserService&quot;: 15, &quot;DataRepository&quot;: 8]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="⚠️-automatic-circular-dependency-detection" tabindex="-1">⚠️ Automatic Circular Dependency Detection <a class="header-anchor" href="#⚠️-automatic-circular-dependency-detection" aria-label="Permalink to &quot;⚠️ Automatic Circular Dependency Detection&quot;">​</a></h3><p>Automatically detects and warns about circular dependencies during dependency registration.</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// If circular dependencies exist, they&#39;re automatically detected and error logged</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Auto log: ⚠️ Auto detected circular dependencies: {ServiceA, ServiceB}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="api-reference" tabindex="-1">API Reference <a class="header-anchor" href="#api-reference" aria-label="Permalink to &quot;API Reference&quot;">​</a></h2><h3 id="checking-auto-collected-information" tabindex="-1">Checking Auto-collected Information <a class="header-anchor" href="#checking-auto-collected-information" aria-label="Permalink to &quot;Checking Auto-collected Information&quot;">​</a></h3><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 🔄 Auto-generated dependency graph</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnifiedDI.autoGraph</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ⚡ Auto-optimized types</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnifiedDI.optimizedTypes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 📊 Auto-collected usage statistics</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnifiedDI.stats</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ⚠️ Auto-detected circular dependencies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnifiedDI.circularDependencies</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 🎯 Actor optimization suggestion list</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnifiedDI.actorOptimizations</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 🔒 Type safety issue list</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnifiedDI.typeSafetyIssues</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 🛠️ Auto-fixed types</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnifiedDI.autoFixedTypes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ⚡ Actor hop statistics</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnifiedDI.actorHopStats</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 📊 Async performance statistics (milliseconds)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnifiedDI.asyncPerformanceStats</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="optimization-control" tabindex="-1">Optimization Control <a class="header-anchor" href="#optimization-control" aria-label="Permalink to &quot;Optimization Control&quot;">​</a></h3><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Disable auto optimization (default: true)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnifiedDI.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setAutoOptimization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Check optimization status for specific type</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnifiedDI.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isOptimized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserService.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Reset statistics</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnifiedDI.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resetStats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="logging-level-control" tabindex="-1">Logging Level Control <a class="header-anchor" href="#logging-level-control" aria-label="Permalink to &quot;Logging Level Control&quot;">​</a></h3><p><strong>Default</strong>: All logs are enabled (<code>.all</code>)</p><h4 id="settings-by-usage-scenario" tabindex="-1">Settings by Usage Scenario: <a class="header-anchor" href="#settings-by-usage-scenario" aria-label="Permalink to &quot;Settings by Usage Scenario:&quot;">​</a></h4><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ Default state: Output all logs (recommended)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 📊 Auto tracking registration: UserService</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ⚡ Auto optimized: UserService (10 uses)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 📊 [AutoDI] Current stats: {...}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 📝 When you want to see only registered dependencies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnifiedDI.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setLogLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.registration)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 📊 Auto tracking registration: UserService (registration logs only)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ⚡ When you want to see only performance optimization info</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnifiedDI.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setLogLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.optimization)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ⚡ Auto optimized: UserService (10 uses) (optimization logs only)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ⚠️ When you want to see only circular dependency errors</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnifiedDI.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setLogLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.errors)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ⚠️ Auto detected circular dependencies: {...} (errors only)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 🔇 When you want to turn off all auto logging</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnifiedDI.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setLogLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.off)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (no logs)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 🔄 Reset to default</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UnifiedDI.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setLogLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.all)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 📋 Check current setting</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Log.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Current logging level: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(UnifiedDI.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logLevel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">​</a></h2><ul><li><strong>No Configuration</strong>: Works automatically without any setup</li><li><strong>Background Execution</strong>: Runs in background without affecting performance</li><li><strong>Real-time Updates</strong>: Automatically performs optimization every 30 seconds</li><li><strong>Memory Efficient</strong>: Keeps only top 20 types in cache</li></ul><h2 id="performance-impact" tabindex="-1">Performance Impact <a class="header-anchor" href="#performance-impact" aria-label="Permalink to &quot;Performance Impact&quot;">​</a></h2><p>The automation system is designed to have minimal performance impact:</p><ul><li>Only microsecond-level overhead during registration/resolution</li><li>Runs asynchronously in background</li><li>Optimized memory usage</li></ul><p>All these features run automatically without developers needing to call or configure anything separately.</p><h2 id="deprecated-read-api-guide" tabindex="-1">Deprecated Read API Guide <a class="header-anchor" href="#deprecated-read-api-guide" aria-label="Permalink to &quot;Deprecated Read API Guide&quot;">​</a></h2><p>The read APIs of <code>AutoDIOptimizer</code> below have been restructured based on internal snapshots, and external use is deprecated. Use synchronous helpers from <code>UnifiedDI</code> or <code>DIContainer</code> externally.</p><table tabindex="0"><thead><tr><th>Deprecated (AutoDIOptimizer)</th><th>Replacement</th></tr></thead><tbody><tr><td><code>getCurrentStats()</code></td><td><code>UnifiedDI.stats()</code> / <code>DIContainer.getUsageStatistics()</code></td></tr><tr><td><code>visualizeGraph()</code></td><td><code>UnifiedDI.autoGraph()</code> / <code>DIContainer.getAutoGeneratedGraph()</code></td></tr><tr><td><code>getFrequentlyUsedTypes()</code></td><td><code>UnifiedDI.optimizedTypes()</code> / <code>DIContainer.getOptimizedTypes()</code></td></tr><tr><td><code>getDetectedCircularDependencies()</code></td><td><code>UnifiedDI.circularDependencies()</code> / <code>DIContainer.getDetectedCircularDependencies()</code></td></tr><tr><td><code>isOptimized(_:)</code></td><td><code>UnifiedDI.isOptimized(_:)</code> / <code>DIContainer.isAutoOptimized(_:)</code></td></tr><tr><td><code>getActorOptimizationSuggestions()</code></td><td><code>UnifiedDI.actorOptimizations</code></td></tr><tr><td><code>getDetectedTypeSafetyIssues()</code></td><td><code>UnifiedDI.typeSafetyIssues</code></td></tr><tr><td><code>getDetectedAutoFixedTypes()</code></td><td><code>UnifiedDI.autoFixedTypes</code></td></tr><tr><td><code>getActorHopStats()</code></td><td><code>UnifiedDI.actorHopStats</code></td></tr><tr><td><code>getAsyncPerformanceStats()</code></td><td><code>UnifiedDI.asyncPerformanceStats</code></td></tr><tr><td><code>getRecentGraphChanges(...)</code></td><td><code>UnifiedDI.getGraphChanges(...)</code></td></tr><tr><td><code>getCurrentLogLevel()</code></td><td><code>UnifiedDI.logLevel</code> / <code>UnifiedDI.getLogLevel()</code></td></tr></tbody></table><blockquote><p>For internal use, use <code>AutoDIOptimizer.readSnapshot()</code> to read snapshots and calculate necessary information.</p></blockquote>`,42)])])}const u=a(t,[["render",l]]);export{k as __pageData,u as default};
