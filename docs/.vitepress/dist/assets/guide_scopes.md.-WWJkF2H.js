import{_ as i,c as e,o as a,ag as n}from"./chunks/framework.CXStv6TN.js";const c=JSON.parse('{"title":"Scopes Guide (Screen / Session / Request)","description":"","frontmatter":{},"headers":[],"relativePath":"guide/scopes.md","filePath":"guide/scopes.md","lastUpdated":1758968598000}'),l={name:"guide/scopes.md"};function t(p,s,h,r,k,o){return a(),e("div",null,[...s[0]||(s[0]=[n(`<h1 id="scopes-guide-screen-session-request" tabindex="-1">Scopes Guide (Screen / Session / Request) <a class="header-anchor" href="#scopes-guide-screen-session-request" aria-label="Permalink to &quot;Scopes Guide (Screen / Session / Request)&quot;">​</a></h1><p>WeaveDI provides scope functionality to isolate and cache dependencies by context units such as screen/session/request.</p><h2 id="why-do-we-need-scopes" tabindex="-1">Why Do We Need Scopes? <a class="header-anchor" href="#why-do-we-need-scopes" aria-label="Permalink to &quot;Why Do We Need Scopes?&quot;">​</a></h2><ul><li>State that should only be maintained within one screen (e.g., screen cache)</li><li>Data that should disappear with user session (e.g., user-specific services)</li><li>Objects reused per request (e.g., RequestContext)</li></ul><h2 id="core-types" tabindex="-1">Core Types <a class="header-anchor" href="#core-types" aria-label="Permalink to &quot;Core Types&quot;">​</a></h2><ul><li><code>ScopeKind</code>: <code>.screen</code>, <code>.session</code>, <code>.request</code></li><li><code>ScopeContext</code>: Current scope ID management (<code>setCurrent(_:, id:)</code>, <code>clear(_:)</code>, <code>currentID(for:)</code>)</li><li><code>registerScoped</code> / <code>registerAsyncScoped</code>: Scope-based registration</li></ul><h2 id="usage-examples" tabindex="-1">Usage Examples <a class="header-anchor" href="#usage-examples" aria-label="Permalink to &quot;Usage Examples&quot;">​</a></h2><h3 id="screen-scope" tabindex="-1">Screen Scope <a class="header-anchor" href="#screen-scope" aria-label="Permalink to &quot;Screen Scope&quot;">​</a></h3><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// On screen entry</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ScopeContext.shared.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setCurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.screen, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Home&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GlobalUnifiedRegistry.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">registerScoped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HomeViewModel.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .screen) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    HomeViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UnifiedDI.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HomeViewModel.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// On screen exit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ScopeContext.shared.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.screen)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="session-scope" tabindex="-1">Session Scope <a class="header-anchor" href="#session-scope" aria-label="Permalink to &quot;Session Scope&quot;">​</a></h3><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// On login success</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ScopeContext.shared.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setCurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.session, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: user.id)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GlobalUnifiedRegistry.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">registerScoped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserSession.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .session) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: user)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Reuse anywhere within session</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> session </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UnifiedDI.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserSession.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// On logout</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ScopeContext.shared.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.session)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="request-scope" tabindex="-1">Request Scope <a class="header-anchor" href="#request-scope" aria-label="Permalink to &quot;Request Scope&quot;">​</a></h3><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ScopeContext.shared.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setCurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.request, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().uuidString)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GlobalUnifiedRegistry.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">registerAsyncScoped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RequestContext.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .request) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RequestContext.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UnifiedDI.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resolveAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RequestContext.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ScopeContext.shared.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.request)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="lifecycle-helpers-recommended-patterns" tabindex="-1">Lifecycle Helpers (Recommended Patterns) <a class="header-anchor" href="#lifecycle-helpers-recommended-patterns" aria-label="Permalink to &quot;Lifecycle Helpers (Recommended Patterns)&quot;">​</a></h2><ul><li>iOS screens: Set <code>.screen</code> in <code>viewWillAppear</code>, release in <code>viewDidDisappear</code></li><li>Sessions: Set/release <code>.session</code> on login/logout events</li><li>Server/backend-like architecture: Set <code>.request</code> on request reception, release on completion</li></ul><blockquote><p>Note: If scope ID is not set, scope registration behaves as one-time creation (no caching).</p></blockquote><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h2><ul><li>&quot;Scope is not applied&quot; → Check if <code>ScopeContext.shared.currentID(for:)</code> is nil</li><li>&quot;Memory leak?&quot; → Check if <code>clear(_:)</code> was called on screen/session termination</li><li>&quot;Concurrency safety?&quot; → UnifiedRegistry is actor-based and scope cache is safely synchronized internally.</li></ul>`,18)])])}const E=i(l,[["render",t]]);export{c as __pageData,E as default};
