import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.CXStv6TN.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{"layout":"home","hero":{"name":"WeaveDI","text":"Swift를 위한 현대적 의존성 주입","tagline":"Swift Concurrency 지원을 갖춘 고성능 DI 프레임워크","image":{"src":"/logo.svg","alt":"WeaveDI"},"actions":[{"theme":"brand","text":"시작하기","link":"/ko/guide/quick-start"},{"theme":"alt","text":"GitHub 보기","link":"https://github.com/Roy-wonji/WeaveDI"}]},"features":[{"icon":"🚀","title":"런타임 핫패스 최적화","details":"TypeID + 락-프리 읽기로 50-80% 성능 향상. 번개같이 빠른 의존성 해결."},{"icon":"🎭","title":"Actor Hop 최적화","details":"서로 다른 Actor 컨텍스트 간 전환을 지능적으로 최적화하여 최대 성능 달성."},{"icon":"🔒","title":"완전한 타입 안전성","details":"KeyPath 기반 등록과 강력한 타입 추론으로 컴파일 타임 검증 제공."},{"icon":"📝","title":"직관적인 Property Wrapper","details":"@Inject, @Factory, @SafeInject - 간단하고 강력한 의존성 주입 패턴."},{"icon":"🏗️","title":"강력한 모듈 시스템","details":"확장 가능한 의존성 관리를 위한 AppDIContainer, ModuleFactory, Container."},{"icon":"🧪","title":"테스트 친화적 설계","details":"쉬운 모킹, 격리된 테스트, 신뢰할 수 있는 테스트를 위한 부트스트랩 리셋."}]},"headers":[],"relativePath":"ko/index.md","filePath":"ko/index.md","lastUpdated":1758968598000}'),e={name:"ko/index.md"};function l(p,s,h,r,k,d){return n(),a("div",null,[...s[0]||(s[0]=[t(`<h2 id="빠른-예제" tabindex="-1">빠른 예제 <a class="header-anchor" href="#빠른-예제" aria-label="Permalink to &quot;빠른 예제&quot;">​</a></h2><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeaveDI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. 앱 시작 시 의존성 부트스트랩</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DependencyContainer.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bootstrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { container </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    container.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserServiceProtocol.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    container.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(\\.userRepository) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        UserRepositoryImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. 주입을 위한 프로퍼티 래퍼 사용</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Inject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userService: UserServiceProtocol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Factory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dataProcessor: DataProcessor</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadUserData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        guard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> service </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userService </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> service.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fetchUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        updateUI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: userData)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3. 현대적인 async/await 지원</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userService </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UnifiedDI.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserService.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userService</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fetchUserData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="성능-지표" tabindex="-1">성능 지표 <a class="header-anchor" href="#성능-지표" aria-label="Permalink to &quot;성능 지표&quot;">​</a></h2><table tabindex="0"><thead><tr><th>시나리오</th><th>기존 DI</th><th>WeaveDI 3.2</th><th>개선율</th></tr></thead><tbody><tr><td>단일 의존성 해결</td><td>0.8ms</td><td>0.2ms</td><td><strong>75%</strong></td></tr><tr><td>복잡한 의존성 그래프</td><td>15.6ms</td><td>3.1ms</td><td><strong>80%</strong></td></tr><tr><td>MainActor UI 업데이트</td><td>3.1ms</td><td>0.6ms</td><td><strong>81%</strong></td></tr></tbody></table><h2 id="왜-weavedi인가" tabindex="-1">왜 WeaveDI인가? <a class="header-anchor" href="#왜-weavedi인가" aria-label="Permalink to &quot;왜 WeaveDI인가?&quot;">​</a></h2><p>WeaveDI 3.2는 다음을 제공하는 현대적인 Swift 애플리케이션을 위해 설계되었습니다:</p><ul><li><strong>iOS 15.0+, macOS 14.0+, watchOS 8.0+, tvOS 15.0+</strong> 지원</li><li><strong>Swift Concurrency</strong> 일급 통합</li><li><strong>Actor 모델</strong> 최적화</li><li>릴리스 빌드에서 <strong>제로 비용 추상화</strong></li><li><strong>포괄적인 테스팅</strong> 지원</li></ul><p><em>Swift 개발자를 위한 프레임워크</em></p>`,8)])])}const o=i(e,[["render",l]]);export{c as __pageData,o as default};
