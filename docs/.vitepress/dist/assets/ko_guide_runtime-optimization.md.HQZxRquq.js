import{_ as s,c as a,o as e,ag as n}from"./chunks/framework.CXStv6TN.js";const c=JSON.parse('{"title":"런타임 핫패스 최적화","description":"","frontmatter":{},"headers":[],"relativePath":"ko/guide/runtime-optimization.md","filePath":"ko/guide/runtime-optimization.md","lastUpdated":null}'),l={name:"ko/guide/runtime-optimization.md"};function t(r,i,h,p,d,o){return e(),a("div",null,[...i[0]||(i[0]=[n(`<h1 id="런타임-핫패스-최적화" tabindex="-1">런타임 핫패스 최적화 <a class="header-anchor" href="#런타임-핫패스-최적화" aria-label="Permalink to &quot;런타임 핫패스 최적화&quot;">​</a></h1><p>WeaveDI v3.2.0에서 도입된 고성능 런타임 최적화 시스템에 대해 알아보세요.</p><h2 id="개요" tabindex="-1">개요 <a class="header-anchor" href="#개요" aria-label="Permalink to &quot;개요&quot;">​</a></h2><p>런타임 핫패스 최적화는 의존성 주입의 성능 병목을 제거하기 위해 설계된 고급 최적화 시스템입니다.</p><h3 id="핵심-최적화-기술" tabindex="-1">핵심 최적화 기술 <a class="header-anchor" href="#핵심-최적화-기술" aria-label="Permalink to &quot;핵심 최적화 기술&quot;">​</a></h3><ol><li><p><strong>TypeID + 인덱스 접근</strong></p><ul><li><code>ObjectIdentifier</code> → <code>Int</code> 슬롯 매핑</li><li>딕셔너리 조회 대신 O(1) 배열 인덱스 접근</li><li>메모리 접근 패턴 최적화</li></ul></li><li><p><strong>스냅샷/락-프리 읽기</strong></p><ul><li>불변 Storage 클래스 기반 스냅샷 방식</li><li>읽기 경합 완전 제거</li><li>쓰기 시에만 락 사용</li></ul></li><li><p><strong>인라인 최적화</strong></p><ul><li><code>@inlinable</code> + <code>@inline(__always)</code> 적용</li><li><code>@_alwaysEmitIntoClient</code>로 크로스 모듈 최적화</li><li>함수 호출 오버헤드 감소</li></ul></li><li><p><strong>팩토리 체인 제거</strong></p><ul><li>중간 팩토리 단계 없는 직접 호출 경로</li><li>의존성 체인 평탄화</li><li>다단계 팩토리 비용 제거</li></ul></li><li><p><strong>스코프별 정적 스토리지</strong></p><ul><li>singleton/session/request 스코프 분리</li><li>원자적 once 초기화</li><li>경쟁 상태 제거</li></ul></li></ol><h2 id="사용법" tabindex="-1">사용법 <a class="header-anchor" href="#사용법" aria-label="Permalink to &quot;사용법&quot;">​</a></h2><h3 id="최적화-활성화" tabindex="-1">최적화 활성화 <a class="header-anchor" href="#최적화-활성화" aria-label="Permalink to &quot;최적화 활성화&quot;">​</a></h3><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeaveDI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 최적화 모드 활성화</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UnifiedRegistry.shared.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">enableOptimization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 기존 코드는 변경 없이 성능 향상 적용됨</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> service </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UnifiedDI.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserService.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="최적화-확인" tabindex="-1">최적화 확인 <a class="header-anchor" href="#최적화-확인" aria-label="Permalink to &quot;최적화 확인&quot;">​</a></h3><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 최적화 상태 확인</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isOptimized </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UnifiedRegistry.shared.isOptimizationEnabled</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;최적화 활성화됨: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(isOptimized)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 최적화 비활성화</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UnifiedRegistry.shared.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">disableOptimization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="성능-향상" tabindex="-1">성능 향상 <a class="header-anchor" href="#성능-향상" aria-label="Permalink to &quot;성능 향상&quot;">​</a></h2><table tabindex="0"><thead><tr><th>시나리오</th><th>향상도</th><th>설명</th></tr></thead><tbody><tr><td>단일 스레드 해결</td><td>50-80% 빠름</td><td>TypeID + 직접 접근</td></tr><tr><td>멀티 스레드 읽기</td><td>2-3배 처리량</td><td>락-프리 스냅샷</td></tr><tr><td>복잡한 의존성</td><td>20-40% 빠름</td><td>체인 평탄화</td></tr></tbody></table><h2 id="벤치마크" tabindex="-1">벤치마크 <a class="header-anchor" href="#벤치마크" aria-label="Permalink to &quot;벤치마크&quot;">​</a></h2><p>포함된 벤치마크를 실행하여 성능 향상을 측정하세요:</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">swift</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> release</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Benchmarks</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --count</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 100k</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --quick</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="호환성" tabindex="-1">호환성 <a class="header-anchor" href="#호환성" aria-label="Permalink to &quot;호환성&quot;">​</a></h2><ul><li><strong>100% API 호환성</strong>: 기존 코드 변경 불필요</li><li><strong>선택적 최적화</strong>: 언제든지 활성화/비활성화 가능</li><li><strong>점진적 마이그레이션</strong>: 단계별 적용 지원</li><li><strong>무중단 변경</strong>: 기존 동작 완전 보존</li></ul><h2 id="내부-구현" tabindex="-1">내부 구현 <a class="header-anchor" href="#내부-구현" aria-label="Permalink to &quot;내부 구현&quot;">​</a></h2><p>최적화는 다음 파일들에 구현되어 있습니다:</p><ul><li><code>OptimizedTypeRegistry.swift</code> - TypeID 시스템</li><li><code>AtomicStorage.swift</code> - 락-프리 스토리지</li><li><code>DirectCallRegistry.swift</code> - 직접 호출 경로</li><li><code>OptimizedScopeStorage.swift</code> - 스코프 최적화</li></ul><h2 id="관련-문서" tabindex="-1">관련 문서 <a class="header-anchor" href="#관련-문서" aria-label="Permalink to &quot;관련 문서&quot;">​</a></h2><ul><li><a href="/WeaveDI/ko/guide/runtime-optimization.html">성능 최적화 가이드</a></li><li><a href="/WeaveDI/ko/guide/benchmarks.html">벤치마크 문서</a></li><li><a href="/WeaveDI/ko/guide/unified-di.html">UnifiedDI API</a></li></ul>`,23)])])}const u=s(l,[["render",t]]);export{c as __pageData,u as default};
