{"identifier":{"url":"doc:\/\/DiContainer\/documentation\/DiContainer\/CoreAPIs","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"sections":[],"abstract":[{"type":"text","text":"Complete reference for DiContainer’s core API components"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/dicontainer\/coreapis"]}],"kind":"article","metadata":{"modules":[{"name":"DiContainer"}],"title":"Core APIs","role":"article","roleHeading":"Article"},"schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"DiContainer provides three main API entry points, each designed for different use cases and complexity levels. This guide covers all core APIs and their intended usage patterns.","type":"text"}]},{"type":"heading","anchor":"API-Hierarchy","text":"API Hierarchy","level":2},{"type":"heading","anchor":"UnifiedDI-Recommended","text":"UnifiedDI (Recommended)","level":3},{"type":"paragraph","inlineContent":[{"text":"The most comprehensive API with all features available.","type":"text"}]},{"type":"heading","anchor":"DI-Simplified","text":"DI (Simplified)","level":3},{"type":"paragraph","inlineContent":[{"text":"A streamlined API for basic dependency injection needs.","type":"text"}]},{"type":"heading","anchor":"DIAsync-Async-First","text":"DIAsync (Async-First)","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Specialized API for async\/await heavy applications."}]},{"type":"heading","anchor":"UnifiedDI-API","text":"UnifiedDI API","level":2},{"type":"heading","anchor":"Registration-Methods","text":"Registration Methods","level":3},{"type":"heading","anchor":"Basic-Registration","text":"Basic Registration","level":4},{"type":"codeListing","syntax":"swift","code":["\/\/ Register a type with a factory closure","UnifiedDI.register(ServiceProtocol.self) { ServiceImpl() }","","\/\/ Register with dependency injection","UnifiedDI.register(ComplexService.self) {","    ComplexService(","        dependency1: UnifiedDI.requireResolve(Dependency1.self),","        dependency2: UnifiedDI.resolve(Dependency2.self, default: DefaultDep2())","    )","}"]},{"type":"heading","anchor":"Conditional-Registration","text":"Conditional Registration","level":4},{"type":"codeListing","syntax":"swift","code":["\/\/ Register different implementations based on conditions","UnifiedDI.registerIf(","    APIService.self,","    condition: isProduction,","    factory: { ProductionAPIService() },","    fallback: { MockAPIService() }",")","","\/\/ Multiple conditions","UnifiedDI.registerIf(","    LoggerService.self,","    condition: isDebugMode && verboseLogging,","    factory: { VerboseLogger() },","    fallback: { StandardLogger() }",")"]},{"type":"heading","anchor":"Batch-Registration","text":"Batch Registration","level":4},{"type":"codeListing","syntax":"swift","code":["\/\/ Register multiple dependencies at once","UnifiedDI.registerMany {","    Registration(NetworkService.self) { URLSessionNetworkService() }","    Registration(CacheService.self) { NSCacheService() }","    Registration(Logger.self) { OSLogger() }","","    \/\/ Conditional registration within batch","    Registration(AnalyticsService.self,","                condition: !isDebugMode,","                factory: { FirebaseAnalytics() },","                fallback: { NoOpAnalytics() })","}"]},{"type":"heading","anchor":"KeyPath-Registration","text":"KeyPath Registration","level":4},{"type":"codeListing","syntax":"swift","code":["\/\/ Extend DependencyContainer for KeyPath support","extension DependencyContainer {","    var userService: UserService? { resolve(UserService.self) }","    var apiClient: APIClient? { resolve(APIClient.self) }","}","","\/\/ Register and get instance immediately","let service = UnifiedDI.register(\\.userService) { UserServiceImpl() }","","\/\/ The service is now both registered and available as 'service'"]},{"type":"heading","anchor":"Resolution-Methods","text":"Resolution Methods","level":3},{"type":"heading","anchor":"Basic-Resolution","text":"Basic Resolution","level":4},{"type":"codeListing","syntax":"swift","code":["\/\/ Optional resolution","let service: ServiceProtocol? = UnifiedDI.resolve(ServiceProtocol.self)","","\/\/ Required resolution (crashes if not found)","let required: ServiceProtocol = UnifiedDI.requireResolve(ServiceProtocol.self)","","\/\/ Resolution with default value","let withDefault = UnifiedDI.resolve(ServiceProtocol.self, default: DefaultService())"]},{"type":"heading","anchor":"Error-Handling-Resolution","text":"Error Handling Resolution","level":4},{"type":"codeListing","syntax":"swift","code":["\/\/ Throwing resolution","do {","    let service = try UnifiedDI.resolveThrows(ServiceProtocol.self)","    \/\/ Use service","} catch DIError.dependencyNotFound(let type) {","    print(\"Service not found: \\(type)\")","} catch {","    print(\"Resolution error: \\(error)\")","}"]},{"type":"heading","anchor":"Performance-Tracking-Resolution","text":"Performance Tracking Resolution","level":4},{"type":"codeListing","syntax":"swift","code":["\/\/ Resolution with performance tracking","let service = UnifiedDI.resolveWithTracking(ServiceProtocol.self)","","\/\/ Get performance metrics","let metrics = UnifiedDI.getPerformanceMetrics()","print(\"Average resolution time: \\(metrics.averageResolutionTime)ms\")"]},{"type":"heading","anchor":"Management-Methods","text":"Management Methods","level":3},{"type":"heading","anchor":"Lifecycle-Management","text":"Lifecycle Management","level":4},{"type":"codeListing","syntax":"swift","code":["\/\/ Release specific type","UnifiedDI.release(ServiceProtocol.self)","","\/\/ Release all dependencies","UnifiedDI.releaseAll()","","\/\/ Check if type is registered","if UnifiedDI.isRegistered(ServiceProtocol.self) {","    \/\/ Type is available","}"]},{"type":"heading","anchor":"Introspection","text":"Introspection","level":4},{"type":"codeListing","syntax":"swift","code":["\/\/ Get list of registered types","let registeredTypes = UnifiedDI.getRegisteredTypes()","","\/\/ Get dependency graph","let graph = UnifiedDI.getDependencyGraph()","","\/\/ Validate dependency graph for circular dependencies","let validation = UnifiedDI.validateDependencyGraph()"]},{"type":"heading","anchor":"DI-API-Simplified","text":"DI API (Simplified)","level":2},{"type":"paragraph","inlineContent":[{"text":"The simplified DI API focuses on the most common operations:","type":"text"}]},{"type":"heading","anchor":"Core-Operations","text":"Core Operations","level":3},{"type":"codeListing","syntax":"swift","code":["\/\/ Registration","DI.register(Service.self) { ServiceImpl() }","","\/\/ Resolution","let service = DI.resolve(Service.self)","","\/\/ Required resolution","let required = DI.requireResolve(Service.self)","","\/\/ KeyPath registration (returns instance)","let instance = DI.register(\\.myService) { MyServiceImpl() }"]},{"type":"heading","anchor":"Conditional-Registration","text":"Conditional Registration","level":3},{"type":"codeListing","syntax":"swift","code":["\/\/ Simple conditional registration","DI.registerIf(","    Service.self,","    condition: isProduction,","    factory: { ProductionService() },","    fallback: { MockService() }",")"]},{"type":"heading","anchor":"DIAsync-API","text":"DIAsync API","level":2},{"type":"paragraph","inlineContent":[{"text":"For async-heavy applications, DIAsync provides async\/await optimized operations:","type":"text"}]},{"type":"heading","anchor":"Async-Registration","text":"Async Registration","level":3},{"type":"codeListing","syntax":"swift","code":["\/\/ Register async factory","await DIAsync.register(DatabaseService.self) {","    await DatabaseService.initialize()","}","","\/\/ Batch async registration","await DIAsync.registerMany {","    DIAsyncRegistration(Service1.self) { await Service1.create() }","    DIAsyncRegistration(Service2.self) { Service2() }","}"]},{"type":"heading","anchor":"Async-Resolution","text":"Async Resolution","level":3},{"type":"codeListing","syntax":"swift","code":["\/\/ Async resolution","let service = await DIAsync.resolve(ServiceProtocol.self)","","\/\/ Required async resolution","let required = await DIAsync.requireResolve(ServiceProtocol.self)","","\/\/ Async resolution with default","let withDefault = await DIAsync.resolve(ServiceProtocol.self, default: DefaultService())"]},{"type":"heading","anchor":"Async-KeyPath-Operations","text":"Async KeyPath Operations","level":3},{"type":"codeListing","syntax":"swift","code":["\/\/ Async KeyPath registration","let service = await DIAsync.register(\\.databaseService) {","    await DatabaseService.initialize()","}","","\/\/ Get or create (idempotent)","let service = await DIAsync.getOrCreate(\\.expensiveService) {","    await ExpensiveService.create()","}"]},{"type":"heading","anchor":"DependencyContainer-Core","text":"DependencyContainer Core","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The underlying container that powers all APIs:"}]},{"type":"heading","anchor":"Bootstrap-System","text":"Bootstrap System","level":3},{"type":"codeListing","syntax":"swift","code":["\/\/ Synchronous bootstrap","await DependencyContainer.bootstrap { container in","    container.register(Service1.self) { Service1Impl() }","    container.register(Service2.self) { Service2Impl() }","}","","\/\/ Async bootstrap for async dependencies","await DependencyContainer.bootstrapAsync { container in","    let database = await Database.initialize()","    container.register(Database.self, instance: database)","}"]},{"type":"heading","anchor":"Direct-Container-Operations","text":"Direct Container Operations","level":3},{"type":"codeListing","syntax":"swift","code":["\/\/ Access live container","let container = DependencyContainer.live","","\/\/ Register directly","container.register(Service.self) { ServiceImpl() }","","\/\/ Register instance directly","let logger = Logger()","container.register(Logger.self, instance: logger)","","\/\/ Resolve directly","let service = container.resolve(Service.self)"]},{"type":"heading","anchor":"Testing-Support","text":"Testing Support","level":3},{"type":"codeListing","syntax":"swift","code":["\/\/ Reset container for testing","await DependencyContainer.resetForTesting()","","\/\/ Create isolated test container","let testContainer = DependencyContainer.createIsolated()","","\/\/ Use test container","testContainer.register(MockService.self) { MockServiceImpl() }"]},{"type":"heading","anchor":"Property-Wrappers","text":"Property Wrappers","level":2},{"type":"heading","anchor":"Inject","text":"@Inject","level":3},{"type":"codeListing","syntax":"swift","code":["class MyService {","    \/\/ Optional injection","    @Inject var optionalDep: OptionalService?","","    \/\/ Required injection (non-optional type)","    @Inject var requiredDep: RequiredService","","    \/\/ KeyPath injection","    @Inject(\\.customService) var customDep: CustomService?","}"]},{"type":"heading","anchor":"RequiredInject","text":"@RequiredInject","level":3},{"type":"codeListing","syntax":"swift","code":["class MyService {","    \/\/ Always required, clearer intent","    @RequiredInject var database: Database","    @RequiredInject var logger: Logger","","    \/\/ KeyPath version","    @RequiredInject(\\.apiClient) var apiClient: APIClient","}"]},{"type":"heading","anchor":"Factory","text":"@Factory","level":3},{"type":"codeListing","syntax":"swift","code":["class MyService {","    \/\/ Factory-based injection (creates new instance each time)","    @Factory var temporaryService: TemporaryService","","    \/\/ With parameters","    @Factory var configuredService: ConfiguredService","}"]},{"type":"heading","anchor":"Error-Handling","text":"Error Handling","level":2},{"type":"heading","anchor":"DIError-Types","text":"DIError Types","level":3},{"type":"codeListing","syntax":"swift","code":["enum DIError: Error {","    case dependencyNotFound(Any.Type)","    case circularDependency([Any.Type])","    case registrationConflict(Any.Type)","    case containerNotInitialized","}"]},{"type":"heading","anchor":"Error-Handling-Patterns","text":"Error Handling Patterns","level":3},{"type":"codeListing","syntax":"swift","code":["\/\/ Safe resolution with error handling","func safeResolve<T>(_ type: T.Type) -> T? {","    do {","        return try UnifiedDI.resolveThrows(type)","    } catch DIError.dependencyNotFound {","        print(\"Warning: \\(type) not registered\")","        return nil","    } catch {","        print(\"Unexpected error: \\(error)\")","        return nil","    }","}","","\/\/ Graceful degradation","func getServiceWithFallback() -> ServiceProtocol {","    return UnifiedDI.resolve(ServiceProtocol.self) ?? DefaultService()","}"]},{"type":"heading","anchor":"Performance-Considerations","text":"Performance Considerations","level":2},{"type":"heading","anchor":"Optimization-Tips","text":"Optimization Tips","level":3},{"type":"codeListing","syntax":"swift","code":["\/\/ 1. Use batch registration for related dependencies","UnifiedDI.registerMany {","    Registration(A.self) { AImpl() }","    Registration(B.self) { BImpl() }","    Registration(C.self) { CImpl() }","}","","\/\/ 2. Prefer property wrappers for frequently accessed dependencies","class FrequentlyUsedService {","    @Inject var cache: CacheService? \/\/ Cached after first access","}","","\/\/ 3. Use lazy initialization for expensive objects","UnifiedDI.register(ExpensiveService.self) {","    \/\/ Only created when first requested","    ExpensiveService()","}","","\/\/ 4. Enable performance tracking in development","#if DEBUG","let metrics = UnifiedDI.getPerformanceMetrics()","print(\"DI Performance: \\(metrics.summary)\")","#endif"]},{"anchor":"Memory-Management","level":3,"text":"Memory Management","type":"heading"},{"syntax":"swift","code":["\/\/ Avoid retain cycles with weak references","class ServiceA {","    @Inject weak var serviceB: ServiceB? \/\/ Weak to break cycles","}","","\/\/ Release dependencies when no longer needed","UnifiedDI.release(TemporaryService.self)","","\/\/ Periodic cleanup in long-running apps","Task {","    while true {","        try await Task.sleep(nanoseconds: 60_000_000_000) \/\/ 1 minute","        UnifiedDI.performMemoryCleanup()","    }","}"],"type":"codeListing"},{"anchor":"Best-Practices","level":2,"text":"Best Practices","type":"heading"},{"anchor":"1-Consistent-API-Usage","level":3,"text":"1. Consistent API Usage","type":"heading"},{"inlineContent":[{"type":"text","text":"Choose one primary API and stick with it:"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ ✅ Good: Consistent UnifiedDI usage","class AppDependencies {","    static func setup() {","        UnifiedDI.registerMany {","            Registration(A.self) { AImpl() }","            Registration(B.self) { BImpl() }","        }","    }","}","","\/\/ ❌ Bad: Mixing APIs","class MixedDependencies {","    static func setup() {","        UnifiedDI.register(A.self) { AImpl() }","        DI.register(B.self) { BImpl() }        \/\/ Different API","    }","}"],"type":"codeListing"},{"anchor":"2-Clear-Dependency-Interfaces","level":3,"text":"2. Clear Dependency Interfaces","type":"heading"},{"syntax":"swift","code":["\/\/ ✅ Good: Clear protocol-based dependencies","protocol UserService {","    func fetchUser(id: String) async throws -> User","}","","class UserServiceImpl: UserService {","    @RequiredInject var apiClient: APIClient","","    func fetchUser(id: String) async throws -> User {","        return try await apiClient.fetchUser(id: id)","    }","}","","\/\/ Register interface, not implementation","UnifiedDI.register(UserService.self) { UserServiceImpl() }"],"type":"codeListing"},{"anchor":"3-Environment-Specific-Configuration","level":3,"text":"3. Environment-Specific Configuration","type":"heading"},{"syntax":"swift","code":["enum DIEnvironment {","    static func configure() {","        #if DEBUG","        setupDevelopmentDependencies()","        #elseif STAGING","        setupStagingDependencies()","        #else","        setupProductionDependencies()","        #endif","    }","","    private static func setupDevelopmentDependencies() {","        UnifiedDI.registerMany {","            Registration(APIService.self) { MockAPIService() }","            Registration(Logger.self) { VerboseLogger() }","        }","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"This comprehensive API reference should help you effectively use DiContainer’s powerful dependency injection capabilities in your Swift applications.","type":"text"}],"type":"paragraph"}]}],"references":{"doc://DiContainer/documentation/DiContainer":{"title":"DiContainer","kind":"symbol","url":"\/documentation\/dicontainer","role":"collection","type":"topic","abstract":[{"text":"A modern, high-performance dependency injection framework designed for Swift Concurrency and Actor models.","type":"text"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer"}}}