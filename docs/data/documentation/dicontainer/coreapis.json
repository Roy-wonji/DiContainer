{"identifier":{"url":"doc:\/\/DiContainer\/documentation\/DiContainer\/CoreAPIs","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/dicontainer\/coreapis"]}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"type":"aside","content":[{"inlineContent":[{"text":"한국어 | English: ","type":"text"},{"type":"reference","identifier":"CoreAPIs.md","isActive":true}],"type":"paragraph"}],"name":"Language","style":"note"},{"type":"paragraph","inlineContent":[{"text":"DiContainer 2.0의 핵심 API들과 사용법을 자세히 알아보세요.","type":"text"}]},{"type":"aside","style":"note","name":"공지","content":[{"type":"paragraph","inlineContent":[{"text":"동기 API → async API 전환 (중요)","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"UnifiedRegistry의 동기 해석 API는 제거되었습니다. 모든 해석은 async API(","type":"text"},{"code":"resolveAsync","type":"codeVoice"},{"text":", ","type":"text"},{"code":"resolveAnyAsync","type":"codeVoice"},{"text":", ","type":"text"},{"code":"resolveAnyAsyncBox","type":"codeVoice"},{"text":", ","type":"text"},{"code":"resolveAsync(keyPath:)","type":"codeVoice"},{"text":")를 사용하세요.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"의존성 그래프 시각화의 동기 API도 제거되었습니다. async API(","type":"text"},{"code":"generateDOTGraphAsync","type":"codeVoice"},{"text":", ","type":"text"},{"code":"generateMermaidGraphAsync","type":"codeVoice"},{"text":", ","type":"text"},{"code":"generateASCIIGraphAsync","type":"codeVoice"},{"text":", ","type":"text"},{"code":"generateJSONGraphAsync","type":"codeVoice"},{"type":"text","text":")를 사용하세요."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"기존 코드는 ","type":"text"},{"code":"await","type":"codeVoice"},{"text":"를 붙여 async 버전으로 전환하시기 바랍니다.","type":"text"}],"type":"paragraph"}]}]}]},{"type":"heading","text":"개요","level":2,"anchor":"%EA%B0%9C%EC%9A%94"},{"type":"paragraph","inlineContent":[{"text":"DiContainer 2.0은 세 가지 핵심 패턴을 중심으로 설계되었습니다:","type":"text"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"등록 (Registration)"}]},{"text":" - 의존성을 컨테이너에 등록","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"주입 (Injection)","type":"text"}],"type":"strong"},{"text":" - 프로퍼티 래퍼를 통한 자동 주입","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"해결 (Resolution)","type":"text"}]},{"text":" - 수동으로 의존성 해결","type":"text"}],"type":"paragraph"}]}]},{"level":2,"anchor":"%EB%93%B1%EB%A1%9D-API-Registration","type":"heading","text":"등록 API (Registration)"},{"level":3,"anchor":"UnifiedDI-%EB%B9%A0%EB%A5%B8-%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4","type":"heading","text":"UnifiedDI 빠른 레퍼런스"},{"type":"codeListing","code":["\/\/ 기본 등록","UnifiedDI.register(Service.self) { ServiceImpl() }","","\/\/ 조건부 등록","UnifiedDI.registerIf(Analytics.self, condition: isProd,","                     factory: { FirebaseAnalytics() },","                     fallback: { NoOpAnalytics() })","","\/\/ 스코프 등록 (동기\/비동기)","UnifiedDI.registerScoped(UserService.self, scope: .session) { UserServiceImpl() }","UnifiedDI.registerAsyncScoped(ProfileCache.self, scope: .screen) { await ProfileCache.make() }","","\/\/ 해제 (전체\/스코프\/특정 타입-스코프)","UnifiedDI.release(Service.self)","UnifiedDI.releaseScope(.session, id: userID)","UnifiedDI.releaseScoped(UserService.self, kind: .session, id: userID)"],"syntax":"swift"},{"level":3,"anchor":"DI%EB%8B%A8%EC%88%9C%ED%99%94-%EB%B9%A0%EB%A5%B8-%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4","type":"heading","text":"DI(단순화) 빠른 레퍼런스"},{"type":"codeListing","code":["\/\/ 기본 등록","DI.register(Service.self) { ServiceImpl() }","","\/\/ 조건부 등록","DI.registerIf(Service.self, condition: flag,","              factory: { RealService() },","              fallback: { MockService() })","","\/\/ 스코프 등록 (동기\/비동기)","DI.registerScoped(UserService.self, scope: .request) { UserServiceImpl() }","DI.registerAsyncScoped(RequestContext.self, scope: .request) { await RequestContext.create() }","","\/\/ 해제 (전체\/스코프\/특정 타입-스코프)","DI.release(Service.self)","DI.releaseScope(.request, id: requestID)","DI.releaseScoped(UserService.self, kind: .request, id: requestID)"],"syntax":"swift"},{"level":3,"anchor":"DependencyContainerbootstrap","type":"heading","text":"DependencyContainer.bootstrap"},{"inlineContent":[{"type":"text","text":"가장 일반적인 등록 방법입니다:"}],"type":"paragraph"},{"type":"codeListing","code":["await DependencyContainer.bootstrap { container in","    \/\/ 타입 등록","    container.register(UserService.self) {","        UserServiceImpl()","    }","","    \/\/ KeyPath를 사용한 타입 안전 등록","    container.register(\\.userService) {","        UserServiceImpl()","    }","}"],"syntax":"swift"},{"level":3,"anchor":"AppDIContainer%EB%A5%BC-%ED%86%B5%ED%95%9C-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EB%93%B1%EB%A1%9D","type":"heading","text":"AppDIContainer를 통한 대규모 등록"},{"type":"paragraph","inlineContent":[{"type":"text","text":"복잡한 애플리케이션에서는 AppDIContainer를 사용하세요:"}]},{"type":"codeListing","code":["await AppDIContainer.shared.registerDependencies { container in","    \/\/ Repository 계층 등록","    var repositoryFactory = AppDIContainer.shared.repositoryFactory","    repositoryFactory.registerDefaultDefinitions()","","    await repositoryFactory.makeAllModules().asyncForEach { module in","        await container.register(module)","    }","","    \/\/ UseCase 계층 등록","    let useCaseFactory = AppDIContainer.shared.useCaseFactory","    await useCaseFactory.makeAllModules().asyncForEach { module in","        await container.register(module)","    }","}"],"syntax":"swift"},{"level":3,"text":"모듈 기반 등록","anchor":"%EB%AA%A8%EB%93%88-%EA%B8%B0%EB%B0%98-%EB%93%B1%EB%A1%9D","type":"heading"},{"inlineContent":[{"type":"text","text":"모듈을 사용한 체계적인 등록:"}],"type":"paragraph"},{"code":["\/\/ 모듈 정의","struct UserModule: Module {","    func registerDependencies() async {","        DI.register(UserRepository.self) {","            CoreDataUserRepository()","        }","","        DI.register(UserService.self) {","            UserServiceImpl()","        }","    }","}","","\/\/ 모듈 등록","await DependencyContainer.bootstrap { container in","    await container.register(UserModule())","}"],"syntax":"swift","type":"codeListing"},{"anchor":"%EC%A3%BC%EC%9E%85-API-Injection","level":2,"text":"주입 API (Injection)","type":"heading"},{"level":3,"text":"@Inject 프로퍼티 래퍼","anchor":"Inject-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EB%9E%98%ED%8D%BC","type":"heading"},{"inlineContent":[{"type":"text","text":"가장 일반적인 의존성 주입 방법입니다:"}],"type":"paragraph"},{"type":"codeListing","code":["class UserViewModel {","    \/\/ 옵셔널 주입 - 등록되지 않은 경우 nil","    @Inject var userService: UserService?","","    \/\/ 필수 타입 - 등록되지 않은 경우 기본값 사용","    @Inject var userService: UserService = UserServiceImpl()","","    func loadUser() async {","        guard let service = userService else { return }","        let user = try await service.getCurrentUser()","        \/\/ ...","    }","}"],"syntax":"swift"},{"type":"heading","text":"@RequiredInject 프로퍼티 래퍼","level":3,"anchor":"RequiredInject-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EB%9E%98%ED%8D%BC"},{"type":"paragraph","inlineContent":[{"text":"반드시 등록되어야 하는 의존성에 사용:","type":"text"}]},{"code":["class UserViewController: UIViewController {","    \/\/ 등록되지 않은 경우 fatalError 발생","    @RequiredInject var userService: UserService","","    override func viewDidLoad() {","        super.viewDidLoad()","        \/\/ userService는 항상 사용 가능","        loadUserData()","    }","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"@Factory 프로퍼티 래퍼","anchor":"Factory-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EB%9E%98%ED%8D%BC","type":"heading"},{"inlineContent":[{"type":"text","text":"팩토리 패턴을 통한 복잡한 의존성 관리:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension FactoryValues {","    var userServiceFactory: Factory<UserService> {","        Factory(this) {","            UserServiceImpl()","        }","    }","}","","class UserManager {","    @Factory(\\.userServiceFactory)","    var userService: UserService","}"]},{"type":"heading","text":"해결 API (Resolution)","level":2,"anchor":"%ED%95%B4%EA%B2%B0-API-Resolution"},{"text":"DI 글로벌 해결자","type":"heading","anchor":"DI-%EA%B8%80%EB%A1%9C%EB%B2%8C-%ED%95%B4%EA%B2%B0%EC%9E%90","level":3},{"type":"paragraph","inlineContent":[{"text":"간단한 의존성 해결:","type":"text"}]},{"type":"codeListing","code":["\/\/ 옵셔널 해결","let userService: UserService? = DI.resolve(UserService.self)","","\/\/ 기본값과 함께 해결","let userService = DI.resolve(UserService.self) ?? UserServiceImpl()","","\/\/ 필수 해결 (등록되지 않은 경우 fatalError)","let userService: UserService = DI.requireResolve(UserService.self)","","\/\/ Result 타입으로 에러 처리","let result = DI.resolveResult(UserService.self)","switch result {","case .success(let service):","    \/\/ 사용","case .failure(let error):","    Log.error(\"해결 실패: \\(error)\")","}"],"syntax":"swift"},{"type":"heading","text":"UnifiedDI 통합 해결자","level":3,"anchor":"UnifiedDI-%ED%86%B5%ED%95%A9-%ED%95%B4%EA%B2%B0%EC%9E%90"},{"type":"paragraph","inlineContent":[{"type":"text","text":"성능 최적화된 해결 방법:"}]},{"type":"codeListing","code":["\/\/ 동기 해결","let userService: UserService? = UnifiedDI.resolve(UserService.self)","","\/\/ 비동기 해결 (Actor Hop 최적화)","let userService: UserService? = await UnifiedDI.resolveAsync(UserService.self)","","\/\/ KeyPath를 통한 타입 안전 해결","extension DependencyContainer {","    var userService: UserService? {","        resolve(UserService.self)","    }","}","","let service = UnifiedDI.resolve(\\.userService)"],"syntax":"swift"},{"type":"heading","text":"DIAsync 비동기 특화 해결자","level":3,"anchor":"DIAsync-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%8A%B9%ED%99%94-%ED%95%B4%EA%B2%B0%EC%9E%90"},{"type":"paragraph","inlineContent":[{"type":"text","text":"비동기 컨텍스트에 최적화:"}]},{"type":"codeListing","code":["\/\/ 비동기 해결","let userService: UserService? = await DIAsync.resolve(UserService.self)","","\/\/ 필수 비동기 해결","let userService: UserService = await DIAsync.requireResolve(UserService.self)","","\/\/ 비동기 Result 해결","let result = await DIAsync.resolveResult(UserService.self)"],"syntax":"swift"},{"type":"heading","text":"고급 API 패턴","level":2,"anchor":"%EA%B3%A0%EA%B8%89-API-%ED%8C%A8%ED%84%B4"},{"type":"heading","text":"스코프 등록과 사용 (.screen \/ .session \/ .request)","level":3,"anchor":"%EC%8A%A4%EC%BD%94%ED%94%84-%EB%93%B1%EB%A1%9D%EA%B3%BC-%EC%82%AC%EC%9A%A9-screen--session--request"},{"inlineContent":[{"text":"의존성을 화면\/세션\/요청 단위로 격리하고 캐시하려면 스코프 API를 사용하세요.","type":"text"}],"type":"paragraph"},{"code":["\/\/ 현재 스코프 설정 (예: 세션 시작 시)","ScopeContext.shared.setCurrent(.session, id: \"user-123\")","","\/\/ 스코프 기반 등록 (동기)","await DependencyContainer.bootstrap { _ in","    await GlobalUnifiedRegistry.registerScoped(UserService.self, scope: .session) {","        UserServiceImpl()","    }","}","","\/\/ 스코프 기반 등록 (비동기)","await GlobalUnifiedRegistry.registerAsyncScoped(ProfileCache.self, scope: .screen) {","    await ProfileCache.make()","}","","\/\/ 해결은 기존과 동일 (현재 스코프 id가 있으면 스코프 캐시 사용)","let userService: UserService? = UnifiedDI.resolve(UserService.self)","","\/\/ 스코프 해제 (예: 화면 종료, 세션 만료 시)","ScopeContext.shared.clear(.session)"],"syntax":"swift","type":"codeListing"},{"type":"aside","style":"note","name":"팁","content":[{"type":"paragraph","inlineContent":[{"text":"View\/Screen 진입\/이탈 시점에 ","type":"text"},{"type":"codeVoice","code":".screen"},{"text":" 스코프를 set\/clear 하고, 로그인\/로그아웃 등 세션 이벤트에 ","type":"text"},{"code":".session","type":"codeVoice"},{"text":" 스코프를 set\/clear 하세요.","type":"text"}]}]},{"anchor":"%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%8B%B1%EA%B8%80%ED%86%A4-%EB%93%B1%EB%A1%9D-%EC%B5%9C%EC%B4%88-1%ED%9A%8C-%EC%83%9D%EC%84%B1-%ED%9B%84-%EC%9E%AC%EC%82%AC%EC%9A%A9","level":3,"text":"비동기 싱글톤 등록 (최초 1회 생성 후 재사용)","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"네트워크\/디스크 의존성을 비동기로 안전하게 1회만 초기화하고 이후 재사용합니다.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ 최초 1회만 생성, 동시 호출도 1회 생성으로 병합","await GlobalUnifiedRegistry.registerAsyncSingleton(RemoteConfig.self) {","    await RemoteConfig.fetch()","}","","\/\/ 어디서든 사용","let config: RemoteConfig? = await UnifiedDI.resolveAsync(RemoteConfig.self)"]},{"inlineContent":[{"type":"text","text":"내부적으로 in-flight Task 캐시를 사용하여 동시 초기화를 방지합니다."}],"type":"paragraph"},{"level":3,"type":"heading","text":"조건부 등록 및 해결","anchor":"%EC%A1%B0%EA%B1%B4%EB%B6%80-%EB%93%B1%EB%A1%9D-%EB%B0%8F-%ED%95%B4%EA%B2%B0"},{"code":["await DependencyContainer.bootstrap { container in","    \/\/ 환경에 따른 조건부 등록","    #if DEBUG","    container.register(LoggerService.self) {","        ConsoleLogger()","    }","    #else","    container.register(LoggerService.self) {","        FileLogger()","    }","    #endif","","    \/\/ 런타임 조건부 등록","    if ProcessInfo.processInfo.environment[\"USE_MOCK\"] == \"true\" {","        container.register(NetworkService.self) {","            MockNetworkService()","        }","    } else {","        container.register(NetworkService.self) {","            URLSessionNetworkService()","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"생명주기 관리","anchor":"%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0-%EA%B4%80%EB%A6%AC","type":"heading"},{"code":["\/\/ 싱글턴 등록","let sharedCache = CacheManager()","await DependencyContainer.bootstrap { container in","    container.register(CacheManager.self) { sharedCache }","}","","\/\/ 매번 새 인스턴스 생성","await DependencyContainer.bootstrap { container in","    container.register(RequestHandler.self) {","        RequestHandler() \/\/ 매번 새로 생성","    }","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"순환 의존성 탐지와 문서화","anchor":"%EC%88%9C%ED%99%98-%EC%9D%98%EC%A1%B4%EC%84%B1-%ED%83%90%EC%A7%80%EC%99%80-%EB%AC%B8%EC%84%9C%ED%99%94","type":"heading"},{"code":["\/\/ 탐지 활성화","CircularDependencyDetector.shared.setDetectionEnabled(true)","","\/\/ 그래프 산출 (개발\/CI에서)","let dot = await DependencyGraphVisualizer.generateDOTGraphAsync(title: \"Dependencies\")","let mermaid = await DependencyGraphVisualizer.generateMermaidGraphAsync(title: \"Dependencies\")"],"syntax":"swift","type":"codeListing"},{"type":"heading","level":3,"text":"실시간 그래프 업데이트 토글","anchor":"%EC%8B%A4%EC%8B%9C%EA%B0%84-%EA%B7%B8%EB%9E%98%ED%94%84-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%ED%86%A0%EA%B8%80"},{"inlineContent":[{"text":"의존성 그래프는 기본적으로 “실시간(diff + 디바운스)”으로 업데이트됩니다. 필요 시 토글로 끄고\/켜세요.","type":"text"}],"type":"paragraph"},{"code":["\/\/ 실시간 업데이트 끄기 (그래프 반영 지연\/미반영)","AutoDIOptimizer.shared.setRealtimeGraphEnabled(false)","","\/\/ 다시 켜기 (즉시 1회 동기화 후, 디바운스 100ms로 실시간 반영)","AutoDIOptimizer.shared.setRealtimeGraphEnabled(true)"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"설명:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"기본값은 true (자동 실시간 업데이트)","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"내부적으로 변경된 엣지만 반영하는 diff 방식 + 100ms 디바운스 적용","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"대규모 그래프\/빈번한 등록 환경에서 성능 최적화를 위해 false로 두고, 필요 시 수동 시각화만 수행할 수 있습니다","type":"text"}]}]}]},{"type":"heading","level":3,"text":"의존성 체인 관리","anchor":"%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%B2%B4%EC%9D%B8-%EA%B4%80%EB%A6%AC"},{"type":"codeListing","syntax":"swift","code":["await DependencyContainer.bootstrap { container in","    \/\/ 하위 의존성 먼저 등록","    container.register(NetworkService.self) {","        URLSessionNetworkService()","    }","","    container.register(CacheService.self) {","        CacheServiceImpl()","    }","","    \/\/ 상위 의존성은 하위 의존성을 자동 주입받음","    container.register(UserService.self) {","        UserServiceImpl() \/\/ @Inject로 자동 주입","    }","}"]},{"type":"heading","level":3,"text":"타입 별칭과 추상화","anchor":"%ED%83%80%EC%9E%85-%EB%B3%84%EC%B9%AD%EA%B3%BC-%EC%B6%94%EC%83%81%ED%99%94"},{"type":"codeListing","syntax":"swift","code":["\/\/ 추상 타입으로 등록","protocol DatabaseService {","    func save(_ data: Data) async throws","    func load() async throws -> Data","}","","await DependencyContainer.bootstrap { container in","    \/\/ 구체 타입을 추상 타입으로 등록","    container.register(DatabaseService.self) {","        CoreDataService() \/\/ DatabaseService 구현체","    }","}","","class DataManager {","    @Inject var database: DatabaseService? \/\/ 추상 타입으로 주입","}"]},{"type":"heading","level":2,"text":"에러 처리 및 디버깅","anchor":"%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC-%EB%B0%8F-%EB%94%94%EB%B2%84%EA%B9%85"},{"type":"heading","level":3,"text":"해결 실패 처리","anchor":"%ED%95%B4%EA%B2%B0-%EC%8B%A4%ED%8C%A8-%EC%B2%98%EB%A6%AC"},{"type":"codeListing","syntax":"swift","code":["\/\/ Result 타입으로 안전하게 처리","let result = DI.resolveResult(UserService.self)","switch result {","case .success(let service):","    \/\/ 정상적으로 해결됨","    try await service.getCurrentUser()","case .failure(let error):","    \/\/ 해결 실패 - 로깅하고 기본값 사용","    logger.error(\"UserService 해결 실패: \\(error)\")","    let fallbackService = UserServiceImpl()","    try await fallbackService.getCurrentUser()","}"]},{"type":"heading","level":3,"text":"런타임 검증","anchor":"%EB%9F%B0%ED%83%80%EC%9E%84-%EA%B2%80%EC%A6%9D"},{"type":"codeListing","code":["#if DEBUG","\/\/ 개발 중에는 필수 의존성 검증","class AppValidator {","    static func validateDependencies() async {","        let requiredServices: [Any.Type] = [","            UserService.self,","            NetworkService.self,","            CacheService.self","        ]","","        for serviceType in requiredServices {","            let result = DI.resolveResult(serviceType)","            switch result {","            case .success:","                Log.debug(\"✅ \\(serviceType) 등록됨\")","            case .failure(let error):","                Log.error(\"❌ \\(serviceType) 등록 실패: \\(error)\")","                assertionFailure(\"필수 의존성 누락\")","            }","        }","    }","}","","\/\/ 앱 시작 시 검증","await AppValidator.validateDependencies()","#endif"],"syntax":"swift"},{"type":"heading","level":2,"text":"성능 최적화","anchor":"%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94"},{"level":3,"anchor":"Actor-Hop-%EC%B5%9C%EC%A0%81%ED%99%94-%ED%99%9C%EC%9A%A9","type":"heading","text":"Actor Hop 최적화 활용"},{"type":"codeListing","syntax":"swift","code":["\/\/ 비동기 컨텍스트에서는 Async API 사용","actor UserActor {","    func processUser() async {","        \/\/ Actor 내부에서는 DIAsync 사용으로 홉 최적화","        let userService = await DIAsync.resolve(UserService.self)","        await userService?.processUserData()","    }","}","","\/\/ MainActor에서는 UnifiedDI 사용","@MainActor","class UserViewController: UIViewController {","    func updateUI() async {","        \/\/ MainActor에서 최적화된 해결","        let userService = await UnifiedDI.resolveAsync(UserService.self)","        \/\/ UI 업데이트","    }","}"]},{"type":"heading","level":3,"text":"지연 해결 패턴","anchor":"%EC%A7%80%EC%97%B0-%ED%95%B4%EA%B2%B0-%ED%8C%A8%ED%84%B4"},{"type":"codeListing","syntax":"swift","code":["class LazyServiceConsumer {","    \/\/ 처음 접근할 때까지 해결을 지연","    private lazy var userService: UserService? = {","        DI.resolve(UserService.self)","    }()","","    func processWhenNeeded() async {","        guard let service = userService else { return }","        try await service.processData()","    }","}"]},{"type":"heading","level":2,"text":"다음 단계","anchor":"%EB%8B%A4%EC%9D%8C-%EB%8B%A8%EA%B3%84"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ModuleSystem"},{"text":"에서 모듈 기반 아키텍처 학습","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/PropertyWrappers"},{"text":"에서 고급 프로퍼티 래퍼 활용법","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AutoDIOptimizer"},{"text":"에서 성능 최적화 기법","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ModuleFactory"},{"text":"에서 확장 가능한 시스템 구축","type":"text"}]}]}]},{"type":"heading","level":3,"text":"UnifiedDI\/DI 사용 요약","anchor":"UnifiedDIDI-%EC%82%AC%EC%9A%A9-%EC%9A%94%EC%95%BD"},{"type":"codeListing","syntax":"swift","code":["\/\/ UnifiedDI","let svc1: Service? = UnifiedDI.resolve(Service.self)","let svc2: Service = UnifiedDI.requireResolve(Service.self)","let svc3: Service = try UnifiedDI.resolveThrows(Service.self)","let svc4: Service = UnifiedDI.resolve(Service.self, default: MockService())","","\/\/ DI(단순화)","let s1: Service? = DI.resolve(Service.self)","let s2: Result<Service, DIError> = DI.resolveResult(Service.self)","let s3: Service = try DI.resolveThrows(Service.self)"]}]}],"metadata":{"role":"article","title":"코어 API 가이드","roleHeading":"Article","modules":[{"name":"DiContainer"}]},"sections":[],"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"references":{"doc://DiContainer/documentation/DiContainer/PropertyWrappers":{"type":"topic","title":"Property Wrapper 가이드","role":"article","url":"\/documentation\/dicontainer\/propertywrappers","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/PropertyWrappers","kind":"article","abstract":[{"text":"DiContainer의 강력한 Property Wrapper들을 활용하여 선언적이고 타입 안전한 의존성 주입을 구현하는 방법","type":"text"}]},"doc://DiContainer/documentation/DiContainer/ModuleSystem":{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ModuleSystem","title":"모듈 시스템","kind":"article","abstract":[{"type":"text","text":"DiContainer 2.0의 모듈 시스템을 활용하여 대규모 애플리케이션의 의존성을 체계적으로 관리하는 방법을 알아보세요."}],"role":"article","type":"topic","url":"\/documentation\/dicontainer\/modulesystem"},"doc://DiContainer/documentation/DiContainer/AutoDIOptimizer":{"title":"자동 DI 최적화","type":"topic","role":"article","url":"\/documentation\/dicontainer\/autodioptimizer","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AutoDIOptimizer","kind":"article","abstract":[{"text":"자동으로 의존성 그래프를 생성하고 성능을 최적화하는 시스템","type":"text"}]},"doc://DiContainer/documentation/DiContainer":{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","title":"DiContainer","abstract":[],"kind":"symbol","role":"collection","type":"topic","url":"\/documentation\/dicontainer"},"doc://DiContainer/documentation/DiContainer/ModuleFactory":{"url":"\/documentation\/dicontainer\/modulefactory","kind":"article","title":"Module Factory","type":"topic","role":"article","abstract":[{"type":"text","text":"팩토리로 모듈을 체계적으로 생성하고 Container에 등록합니다."}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ModuleFactory"},"CoreAPIs.md":{"type":"link","titleInlineContent":[{"text":"Core APIs","type":"text"}],"url":"CoreAPIs.md","title":"Core APIs","identifier":"CoreAPIs.md"}}}