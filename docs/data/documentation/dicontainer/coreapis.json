{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/DiContainer\/documentation\/DiContainer\/CoreAPIs"},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"한국어 | English: ","type":"text"},{"identifier":"CoreAPIs.md","isActive":true,"type":"reference"}]}],"name":"Language","type":"aside"},{"inlineContent":[{"text":"DiContainer 2.0의 핵심 API들과 사용법을 자세히 알아보세요.","type":"text"}],"type":"paragraph"},{"type":"heading","level":2,"anchor":"%EA%B0%9C%EC%9A%94","text":"개요"},{"type":"paragraph","inlineContent":[{"text":"DiContainer 2.0은 세 가지 핵심 패턴을 중심으로 설계되었습니다:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"등록 (Registration)"}]},{"type":"text","text":" - 의존성을 컨테이너에 등록"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"주입 (Injection)","type":"text"}],"type":"strong"},{"text":" - 프로퍼티 래퍼를 통한 자동 주입","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"해결 (Resolution)"}]},{"text":" - 수동으로 의존성 해결","type":"text"}]}]}],"type":"orderedList"},{"level":2,"text":"등록 API (Registration)","type":"heading","anchor":"%EB%93%B1%EB%A1%9D-API-Registration"},{"level":3,"text":"UnifiedDI 빠른 레퍼런스","anchor":"UnifiedDI-%EB%B9%A0%EB%A5%B8-%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4","type":"heading"},{"syntax":"swift","code":["\/\/ 기본 등록","UnifiedDI.register(Service.self) { ServiceImpl() }","","\/\/ 조건부 등록","UnifiedDI.registerIf(Analytics.self, condition: isProd,","                     factory: { FirebaseAnalytics() },","                     fallback: { NoOpAnalytics() })","","\/\/ 스코프 등록 (동기\/비동기)","UnifiedDI.registerScoped(UserService.self, scope: .session) { UserServiceImpl() }","UnifiedDI.registerAsyncScoped(ProfileCache.self, scope: .screen) { await ProfileCache.make() }","","\/\/ 해제 (전체\/스코프\/특정 타입-스코프)","UnifiedDI.release(Service.self)","UnifiedDI.releaseScope(.session, id: userID)","UnifiedDI.releaseScoped(UserService.self, kind: .session, id: userID)"],"type":"codeListing"},{"anchor":"DI%EB%8B%A8%EC%88%9C%ED%99%94-%EB%B9%A0%EB%A5%B8-%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4","text":"DI(단순화) 빠른 레퍼런스","type":"heading","level":3},{"syntax":"swift","code":["\/\/ 기본 등록","DI.register(Service.self) { ServiceImpl() }","","\/\/ 조건부 등록","DI.registerIf(Service.self, condition: flag,","              factory: { RealService() },","              fallback: { MockService() })","","\/\/ 스코프 등록 (동기\/비동기)","DI.registerScoped(UserService.self, scope: .request) { UserServiceImpl() }","DI.registerAsyncScoped(RequestContext.self, scope: .request) { await RequestContext.create() }","","\/\/ 해제 (전체\/스코프\/특정 타입-스코프)","DI.release(Service.self)","DI.releaseScope(.request, id: requestID)","DI.releaseScoped(UserService.self, kind: .request, id: requestID)"],"type":"codeListing"},{"level":3,"text":"DependencyContainer.bootstrap","type":"heading","anchor":"DependencyContainerbootstrap"},{"type":"paragraph","inlineContent":[{"text":"가장 일반적인 등록 방법입니다:","type":"text"}]},{"code":["await DependencyContainer.bootstrap { container in","    \/\/ 타입 등록","    container.register(UserService.self) {","        UserServiceImpl()","    }","","    \/\/ KeyPath를 사용한 타입 안전 등록","    container.register(\\.userService) {","        UserServiceImpl()","    }","}"],"type":"codeListing","syntax":"swift"},{"anchor":"AppDIContainer%EB%A5%BC-%ED%86%B5%ED%95%9C-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EB%93%B1%EB%A1%9D","text":"AppDIContainer를 통한 대규모 등록","type":"heading","level":3},{"inlineContent":[{"text":"복잡한 애플리케이션에서는 AppDIContainer를 사용하세요:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["await AppDIContainer.shared.registerDependencies { container in","    \/\/ Repository 계층 등록","    var repositoryFactory = AppDIContainer.shared.repositoryFactory","    repositoryFactory.registerDefaultDefinitions()","","    await repositoryFactory.makeAllModules().asyncForEach { module in","        await container.register(module)","    }","","    \/\/ UseCase 계층 등록","    let useCaseFactory = AppDIContainer.shared.useCaseFactory","    await useCaseFactory.makeAllModules().asyncForEach { module in","        await container.register(module)","    }","}"],"type":"codeListing"},{"anchor":"%EB%AA%A8%EB%93%88-%EA%B8%B0%EB%B0%98-%EB%93%B1%EB%A1%9D","text":"모듈 기반 등록","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"모듈을 사용한 체계적인 등록:"}]},{"syntax":"swift","code":["\/\/ 모듈 정의","struct UserModule: Module {","    func registerDependencies() async {","        DI.register(UserRepository.self) {","            CoreDataUserRepository()","        }","","        DI.register(UserService.self) {","            UserServiceImpl()","        }","    }","}","","\/\/ 모듈 등록","await DependencyContainer.bootstrap { container in","    await container.register(UserModule())","}"],"type":"codeListing"},{"anchor":"%EC%A3%BC%EC%9E%85-API-Injection","text":"주입 API (Injection)","type":"heading","level":2},{"anchor":"Inject-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EB%9E%98%ED%8D%BC","text":"@Inject 프로퍼티 래퍼","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"가장 일반적인 의존성 주입 방법입니다:","type":"text"}]},{"code":["class UserViewModel {","    \/\/ 옵셔널 주입 - 등록되지 않은 경우 nil","    @Inject var userService: UserService?","","    \/\/ 필수 타입 - 등록되지 않은 경우 기본값 사용","    @Inject var userService: UserService = UserServiceImpl()","","    func loadUser() async {","        guard let service = userService else { return }","        let user = try await service.getCurrentUser()","        \/\/ ...","    }","}"],"type":"codeListing","syntax":"swift"},{"level":3,"text":"@RequiredInject 프로퍼티 래퍼","type":"heading","anchor":"RequiredInject-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EB%9E%98%ED%8D%BC"},{"type":"paragraph","inlineContent":[{"text":"반드시 등록되어야 하는 의존성에 사용:","type":"text"}]},{"code":["class UserViewController: UIViewController {","    \/\/ 등록되지 않은 경우 fatalError 발생","    @RequiredInject var userService: UserService","","    override func viewDidLoad() {","        super.viewDidLoad()","        \/\/ userService는 항상 사용 가능","        loadUserData()","    }","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Factory-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EB%9E%98%ED%8D%BC","text":"@Factory 프로퍼티 래퍼","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"팩토리 패턴을 통한 복잡한 의존성 관리:","type":"text"}]},{"code":["extension FactoryValues {","    var userServiceFactory: Factory<UserService> {","        Factory(this) {","            UserServiceImpl()","        }","    }","}","","class UserManager {","    @Factory(\\.userServiceFactory)","    var userService: UserService","}"],"type":"codeListing","syntax":"swift"},{"level":2,"text":"해결 API (Resolution)","type":"heading","anchor":"%ED%95%B4%EA%B2%B0-API-Resolution"},{"level":3,"text":"DI 글로벌 해결자","type":"heading","anchor":"DI-%EA%B8%80%EB%A1%9C%EB%B2%8C-%ED%95%B4%EA%B2%B0%EC%9E%90"},{"type":"paragraph","inlineContent":[{"type":"text","text":"간단한 의존성 해결:"}]},{"code":["\/\/ 옵셔널 해결","let userService: UserService? = DI.resolve(UserService.self)","","\/\/ 기본값과 함께 해결","let userService = DI.resolve(UserService.self) ?? UserServiceImpl()","","\/\/ 필수 해결 (등록되지 않은 경우 fatalError)","let userService: UserService = DI.requireResolve(UserService.self)","","\/\/ Result 타입으로 에러 처리","let result = DI.resolveResult(UserService.self)","switch result {","case .success(let service):","    \/\/ 사용","case .failure(let error):","    print(\"해결 실패: \\(error)\")","}"],"type":"codeListing","syntax":"swift"},{"anchor":"UnifiedDI-%ED%86%B5%ED%95%A9-%ED%95%B4%EA%B2%B0%EC%9E%90","text":"UnifiedDI 통합 해결자","type":"heading","level":3},{"inlineContent":[{"text":"성능 최적화된 해결 방법:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ 동기 해결","let userService: UserService? = UnifiedDI.resolve(UserService.self)","","\/\/ 비동기 해결 (Actor Hop 최적화)","let userService: UserService? = await UnifiedDI.resolveAsync(UserService.self)","","\/\/ KeyPath를 통한 타입 안전 해결","extension DependencyContainer {","    var userService: UserService? {","        resolve(UserService.self)","    }","}","","let service = UnifiedDI.resolve(\\.userService)"]},{"anchor":"DIAsync-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%8A%B9%ED%99%94-%ED%95%B4%EA%B2%B0%EC%9E%90","level":3,"type":"heading","text":"DIAsync 비동기 특화 해결자"},{"inlineContent":[{"text":"비동기 컨텍스트에 최적화:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ 비동기 해결","let userService: UserService? = await DIAsync.resolve(UserService.self)","","\/\/ 필수 비동기 해결","let userService: UserService = await DIAsync.requireResolve(UserService.self)","","\/\/ 비동기 Result 해결","let result = await DIAsync.resolveResult(UserService.self)"]},{"anchor":"%EA%B3%A0%EA%B8%89-API-%ED%8C%A8%ED%84%B4","level":2,"type":"heading","text":"고급 API 패턴"},{"anchor":"%EC%8A%A4%EC%BD%94%ED%94%84-%EB%93%B1%EB%A1%9D%EA%B3%BC-%EC%82%AC%EC%9A%A9-screen--session--request","level":3,"type":"heading","text":"스코프 등록과 사용 (.screen \/ .session \/ .request)"},{"type":"paragraph","inlineContent":[{"type":"text","text":"의존성을 화면\/세션\/요청 단위로 격리하고 캐시하려면 스코프 API를 사용하세요."}]},{"syntax":"swift","type":"codeListing","code":["\/\/ 현재 스코프 설정 (예: 세션 시작 시)","ScopeContext.shared.setCurrent(.session, id: \"user-123\")","","\/\/ 스코프 기반 등록 (동기)","await DependencyContainer.bootstrap { _ in","    await GlobalUnifiedRegistry.registerScoped(UserService.self, scope: .session) {","        UserServiceImpl()","    }","}","","\/\/ 스코프 기반 등록 (비동기)","await GlobalUnifiedRegistry.registerAsyncScoped(ProfileCache.self, scope: .screen) {","    await ProfileCache.make()","}","","\/\/ 해결은 기존과 동일 (현재 스코프 id가 있으면 스코프 캐시 사용)","let userService: UserService? = UnifiedDI.resolve(UserService.self)","","\/\/ 스코프 해제 (예: 화면 종료, 세션 만료 시)","ScopeContext.shared.clear(.session)"]},{"style":"note","name":"팁","type":"aside","content":[{"inlineContent":[{"text":"View\/Screen 진입\/이탈 시점에 ","type":"text"},{"code":".screen","type":"codeVoice"},{"text":" 스코프를 set\/clear 하고, 로그인\/로그아웃 등 세션 이벤트에 ","type":"text"},{"type":"codeVoice","code":".session"},{"text":" 스코프를 set\/clear 하세요.","type":"text"}],"type":"paragraph"}]},{"level":3,"text":"비동기 싱글톤 등록 (최초 1회 생성 후 재사용)","anchor":"%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%8B%B1%EA%B8%80%ED%86%A4-%EB%93%B1%EB%A1%9D-%EC%B5%9C%EC%B4%88-1%ED%9A%8C-%EC%83%9D%EC%84%B1-%ED%9B%84-%EC%9E%AC%EC%82%AC%EC%9A%A9","type":"heading"},{"inlineContent":[{"type":"text","text":"네트워크\/디스크 의존성을 비동기로 안전하게 1회만 초기화하고 이후 재사용합니다."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["\/\/ 최초 1회만 생성, 동시 호출도 1회 생성으로 병합","await GlobalUnifiedRegistry.registerAsyncSingleton(RemoteConfig.self) {","    await RemoteConfig.fetch()","}","","\/\/ 어디서든 사용","let config: RemoteConfig? = await UnifiedDI.resolveAsync(RemoteConfig.self)"]},{"inlineContent":[{"text":"내부적으로 in-flight Task 캐시를 사용하여 동시 초기화를 방지합니다.","type":"text"}],"type":"paragraph"},{"anchor":"%EC%A1%B0%EA%B1%B4%EB%B6%80-%EB%93%B1%EB%A1%9D-%EB%B0%8F-%ED%95%B4%EA%B2%B0","level":3,"type":"heading","text":"조건부 등록 및 해결"},{"syntax":"swift","type":"codeListing","code":["await DependencyContainer.bootstrap { container in","    \/\/ 환경에 따른 조건부 등록","    #if DEBUG","    container.register(LoggerService.self) {","        ConsoleLogger()","    }","    #else","    container.register(LoggerService.self) {","        FileLogger()","    }","    #endif","","    \/\/ 런타임 조건부 등록","    if ProcessInfo.processInfo.environment[\"USE_MOCK\"] == \"true\" {","        container.register(NetworkService.self) {","            MockNetworkService()","        }","    } else {","        container.register(NetworkService.self) {","            URLSessionNetworkService()","        }","    }","}"]},{"anchor":"%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0-%EA%B4%80%EB%A6%AC","text":"생명주기 관리","type":"heading","level":3},{"syntax":"swift","code":["\/\/ 싱글턴 등록","let sharedCache = CacheManager()","await DependencyContainer.bootstrap { container in","    container.register(CacheManager.self) { sharedCache }","}","","\/\/ 매번 새 인스턴스 생성","await DependencyContainer.bootstrap { container in","    container.register(RequestHandler.self) {","        RequestHandler() \/\/ 매번 새로 생성","    }","}"],"type":"codeListing"},{"anchor":"%EC%88%9C%ED%99%98-%EC%9D%98%EC%A1%B4%EC%84%B1-%ED%83%90%EC%A7%80%EC%99%80-%EB%AC%B8%EC%84%9C%ED%99%94","text":"순환 의존성 탐지와 문서화","type":"heading","level":3},{"syntax":"swift","code":["\/\/ 탐지 활성화","CircularDependencyDetector.shared.setDetectionEnabled(true)","","\/\/ 그래프 산출 (개발\/CI에서)","let dot = DependencyGraphVisualizer.generateDOTGraph(title: \"Dependencies\")","let mermaid = DependencyGraphVisualizer.generateMermaidGraph(title: \"Dependencies\")"],"type":"codeListing"},{"anchor":"%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%B2%B4%EC%9D%B8-%EA%B4%80%EB%A6%AC","text":"의존성 체인 관리","type":"heading","level":3},{"syntax":"swift","code":["await DependencyContainer.bootstrap { container in","    \/\/ 하위 의존성 먼저 등록","    container.register(NetworkService.self) {","        URLSessionNetworkService()","    }","","    container.register(CacheService.self) {","        CacheServiceImpl()","    }","","    \/\/ 상위 의존성은 하위 의존성을 자동 주입받음","    container.register(UserService.self) {","        UserServiceImpl() \/\/ @Inject로 자동 주입","    }","}"],"type":"codeListing"},{"anchor":"%ED%83%80%EC%9E%85-%EB%B3%84%EC%B9%AD%EA%B3%BC-%EC%B6%94%EC%83%81%ED%99%94","text":"타입 별칭과 추상화","type":"heading","level":3},{"syntax":"swift","code":["\/\/ 추상 타입으로 등록","protocol DatabaseService {","    func save(_ data: Data) async throws","    func load() async throws -> Data","}","","await DependencyContainer.bootstrap { container in","    \/\/ 구체 타입을 추상 타입으로 등록","    container.register(DatabaseService.self) {","        CoreDataService() \/\/ DatabaseService 구현체","    }","}","","class DataManager {","    @Inject var database: DatabaseService? \/\/ 추상 타입으로 주입","}"],"type":"codeListing"},{"anchor":"%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC-%EB%B0%8F-%EB%94%94%EB%B2%84%EA%B9%85","text":"에러 처리 및 디버깅","type":"heading","level":2},{"level":3,"type":"heading","anchor":"%ED%95%B4%EA%B2%B0-%EC%8B%A4%ED%8C%A8-%EC%B2%98%EB%A6%AC","text":"해결 실패 처리"},{"code":["\/\/ Result 타입으로 안전하게 처리","let result = DI.resolveResult(UserService.self)","switch result {","case .success(let service):","    \/\/ 정상적으로 해결됨","    try await service.getCurrentUser()","case .failure(let error):","    \/\/ 해결 실패 - 로깅하고 기본값 사용","    logger.error(\"UserService 해결 실패: \\(error)\")","    let fallbackService = UserServiceImpl()","    try await fallbackService.getCurrentUser()","}"],"type":"codeListing","syntax":"swift"},{"level":3,"type":"heading","anchor":"%EB%9F%B0%ED%83%80%EC%9E%84-%EA%B2%80%EC%A6%9D","text":"런타임 검증"},{"syntax":"swift","code":["#if DEBUG","\/\/ 개발 중에는 필수 의존성 검증","class AppValidator {","    static func validateDependencies() async {","        let requiredServices: [Any.Type] = [","            UserService.self,","            NetworkService.self,","            CacheService.self","        ]","","        for serviceType in requiredServices {","            let result = DI.resolveResult(serviceType)","            switch result {","            case .success:","                print(\"✅ \\(serviceType) 등록됨\")","            case .failure(let error):","                print(\"❌ \\(serviceType) 등록 실패: \\(error)\")","                assertionFailure(\"필수 의존성 누락\")","            }","        }","    }","}","","\/\/ 앱 시작 시 검증","await AppValidator.validateDependencies()","#endif"],"type":"codeListing"},{"anchor":"%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94","level":2,"type":"heading","text":"성능 최적화"},{"level":3,"text":"Actor Hop 최적화 활용","type":"heading","anchor":"Actor-Hop-%EC%B5%9C%EC%A0%81%ED%99%94-%ED%99%9C%EC%9A%A9"},{"code":["\/\/ 비동기 컨텍스트에서는 Async API 사용","actor UserActor {","    func processUser() async {","        \/\/ Actor 내부에서는 DIAsync 사용으로 홉 최적화","        let userService = await DIAsync.resolve(UserService.self)","        await userService?.processUserData()","    }","}","","\/\/ MainActor에서는 UnifiedDI 사용","@MainActor","class UserViewController: UIViewController {","    func updateUI() async {","        \/\/ MainActor에서 최적화된 해결","        let userService = await UnifiedDI.resolveAsync(UserService.self)","        \/\/ UI 업데이트","    }","}"],"type":"codeListing","syntax":"swift"},{"level":3,"text":"지연 해결 패턴","type":"heading","anchor":"%EC%A7%80%EC%97%B0-%ED%95%B4%EA%B2%B0-%ED%8C%A8%ED%84%B4"},{"syntax":"swift","type":"codeListing","code":["class LazyServiceConsumer {","    \/\/ 처음 접근할 때까지 해결을 지연","    private lazy var userService: UserService? = {","        DI.resolve(UserService.self)","    }()","","    func processWhenNeeded() async {","        guard let service = userService else { return }","        try await service.processData()","    }","}"]},{"level":2,"text":"다음 단계","type":"heading","anchor":"%EB%8B%A4%EC%9D%8C-%EB%8B%A8%EA%B3%84"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"doc:모듈시스템"},{"type":"text","text":"에서 모듈 기반 아키텍처 학습"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"doc:프로퍼티래퍼"},{"type":"text","text":"에서 고급 프로퍼티 래퍼 활용법"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"doc:액터홉최적화"},{"type":"text","text":"에서 성능 최적화 기법"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"doc:플러그인시스템"},{"type":"text","text":"에서 확장 가능한 시스템 구축"}],"type":"paragraph"}]}]},{"level":3,"text":"UnifiedDI\/DI 사용 요약","type":"heading","anchor":"UnifiedDIDI-%EC%82%AC%EC%9A%A9-%EC%9A%94%EC%95%BD"},{"code":["\/\/ UnifiedDI","let svc1: Service? = UnifiedDI.resolve(Service.self)","let svc2: Service = UnifiedDI.requireResolve(Service.self)","let svc3: Service = try UnifiedDI.resolveThrows(Service.self)","let svc4: Service = UnifiedDI.resolve(Service.self, default: MockService())","","\/\/ DI(단순화)","let s1: Service? = DI.resolve(Service.self)","let s2: Result<Service, DIError> = DI.resolveResult(Service.self)","let s3: Service = try DI.resolveThrows(Service.self)"],"type":"codeListing","syntax":"swift"}]}],"variants":[{"paths":["\/documentation\/dicontainer\/coreapis"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"title":"시작하기","generated":true,"anchor":"시작하기","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/QuickStart","doc:\/\/DiContainer\/documentation\/DiContainer\/MIGRATION-2.0.0","doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIIntegration","doc:\/\/DiContainer\/documentation\/DiContainer\/DependencyContainer"]}],"kind":"article","metadata":{"role":"article","title":"코어 API 가이드","modules":[{"name":"DiContainer"}],"roleHeading":"Article"},"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"references":{"doc://DiContainer/documentation/DiContainer/MIGRATION-2.0.0":{"kind":"article","title":"DiContainer 2.0.0 마이그레이션 가이드","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/MIGRATION-2.0.0","abstract":[{"text":"DiContainer 1.x에서 2.0.0으로 업그레이드하는 완전한 가이드","type":"text"}],"type":"topic","url":"\/documentation\/dicontainer\/migration-2.0.0","role":"article"},"CoreAPIs.md":{"type":"link","title":"Core APIs","url":"CoreAPIs.md","identifier":"CoreAPIs.md","titleInlineContent":[{"text":"Core APIs","type":"text"}]},"doc://DiContainer/documentation/DiContainer/AppDIIntegration":{"kind":"article","title":"App DI Integration","type":"topic","role":"article","abstract":[{"text":"애플리케이션 레벨에서 DI를 구성하고 부트스트랩하는 방법을 설명합니다.","type":"text"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIIntegration","url":"\/documentation\/dicontainer\/appdiintegration"},"doc://DiContainer/documentation/DiContainer/QuickStart":{"kind":"article","title":"빠른 시작 가이드","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/QuickStart","abstract":[],"type":"topic","url":"\/documentation\/dicontainer\/quickstart","role":"article"},"doc://DiContainer/documentation/DiContainer":{"abstract":[{"type":"text","text":"현대적인 Swift Concurrency와 Actor 모델을 위해 설계된 고성능 의존성 주입 프레임워크"}],"kind":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","role":"collection","title":"DiContainer","type":"topic","url":"\/documentation\/dicontainer"},"doc://DiContainer/documentation/DiContainer/DependencyContainer":{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/DependencyContainer","title":"DependencyContainer","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"DependencyContainer","kind":"identifier"}],"navigatorTitle":[{"text":"DependencyContainer","kind":"identifier"}],"abstract":[],"type":"topic","url":"\/documentation\/dicontainer\/dependencycontainer","role":"symbol"}}}