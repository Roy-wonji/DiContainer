{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/DiContainer\/documentation\/DiContainer\/Container\/build()"},"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"수집된 모든 모듈의 등록을 병렬로 실행하는 핵심 메서드입니다."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"build","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"async","kind":"keyword"}]}]},{"kind":"content","content":[{"type":"heading","anchor":"discussion","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 메서드는 "},{"type":"codeVoice","code":"register(_:)"},{"type":"text","text":" 호출로 수집된 모든 모듈들을 Swift의 TaskGroup을 사용하여"},{"type":"text","text":" "},{"type":"text","text":"동시에 병렬 처리합니다. 이를 통해 대량의 의존성 등록 시간을 크게 단축할 수 있습니다."}]},{"type":"heading","anchor":"%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95","level":2,"text":"동작 과정"},{"type":"heading","anchor":"1%EB%8B%A8%EA%B3%84-%EC%8A%A4%EB%83%85%EC%83%B7-%EC%83%9D%EC%84%B1","level":3,"text":"1단계: 스냅샷 생성"},{"type":"codeListing","code":["\/\/ Actor 내부에서 배열을 지역 변수로 복사","let snapshot = modules"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"이렇게 함으로써 TaskGroup 실행 중 불필요한 actor isolation hop을 방지합니다.","type":"text"}]},{"type":"heading","anchor":"2%EB%8B%A8%EA%B3%84-%EB%B3%91%EB%A0%AC-%EC%9E%91%EC%97%85-%EC%83%9D%EC%84%B1","level":3,"text":"2단계: 병렬 작업 생성"},{"type":"codeListing","code":["await withTaskGroup(of: Void.self) { group in","    for module in snapshot {","        group.addTask { @Sendable in","            await module.register() \/\/ 각 모듈이 병렬 실행","        }","    }","    await group.waitForAll() \/\/ 모든 작업 완료 대기","}"],"syntax":"swift"},{"type":"heading","text":"성능 특성","level":2,"anchor":"%EC%84%B1%EB%8A%A5-%ED%8A%B9%EC%84%B1"},{"type":"heading","text":"시간 복잡도","level":3,"anchor":"%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"순차 처리"}]},{"type":"text","text":": O(n) - 모든 모듈을 하나씩 등록"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"병렬 처리"}]},{"text":": O(max(모듈별 등록 시간)) - 가장 오래 걸리는 모듈의 등록 시간","type":"text"}]}]}]},{"type":"heading","text":"실제 성능 예시","level":3,"anchor":"%EC%8B%A4%EC%A0%9C-%EC%84%B1%EB%8A%A5-%EC%98%88%EC%8B%9C"},{"type":"codeListing","syntax":"swift","code":["\/\/ 10개 모듈, 각각 100ms 소요 시","\/\/ 순차 처리: 1000ms","\/\/ 병렬 처리: 100ms (약 90% 성능 향상)"]},{"type":"aside","style":"note","content":[{"inlineContent":[{"text":"모든 등록 작업이 완료될 때까지 메서드가 반환되지 않습니다.","type":"text"}],"type":"paragraph"}],"name":"Note"},{"type":"aside","style":"important","content":[{"inlineContent":[{"text":"이 메서드는 현재 throws 하지 않지만, 개별 모듈에서 오류 로깅은 가능합니다.","type":"text"}],"type":"paragraph"}],"name":"Important"},{"type":"aside","style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"매우 많은 모듈(1000개 이상)을 한 번에 처리할 때는 메모리 사용량을 모니터링하세요."}]}],"name":"Warning"}]}],"sections":[],"metadata":{"title":"build()","extendedModule":"DiContainer","modules":[{"name":"DiContainer"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"build"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"}],"role":"symbol","externalID":"s:11DiContainer0B0C5buildyyYaF","roleHeading":"Instance Method","symbolKind":"method"},"variants":[{"paths":["\/documentation\/dicontainer\/container\/build()"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer","doc:\/\/DiContainer\/documentation\/DiContainer\/Container"]]},"references":{"doc://DiContainer/documentation/DiContainer":{"type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","kind":"symbol","title":"DiContainer","url":"\/documentation\/dicontainer","role":"collection","abstract":[{"type":"text","text":"현대적인 Swift Concurrency와 Actor 모델을 위해 설계된 고성능 의존성 주입 프레임워크"}]},"doc://DiContainer/documentation/DiContainer/Container/build()":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"build","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"async","kind":"keyword"}],"url":"\/documentation\/dicontainer\/container\/build()","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"수집된 모든 모듈의 등록을 병렬로 실행하는 핵심 메서드입니다."}],"type":"topic","title":"build()","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Container\/build()"},"doc://DiContainer/documentation/DiContainer/Container":{"role":"symbol","abstract":[],"kind":"symbol","url":"\/documentation\/dicontainer\/container","fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"Container"}],"navigatorTitle":[{"kind":"identifier","text":"Container"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Container","title":"Container","type":"topic"}}}