{"kind":"symbol","abstract":[{"text":"수집된 모든 모듈의 등록을 병렬로 실행하는 핵심 메서드입니다.","type":"text"}],"metadata":{"symbolKind":"method","externalID":"s:11DiContainer0B0C5buildyyYaF","title":"build()","modules":[{"name":"DiContainer"}],"roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"build"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"}],"role":"symbol"},"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer","doc:\/\/DiContainer\/documentation\/DiContainer\/Container"]]},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/DiContainer\/documentation\/DiContainer\/Container\/build()"},"variants":[{"paths":["\/documentation\/dicontainer\/container\/build()"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"build","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"async","kind":"keyword"}],"languages":["swift"]}]},{"kind":"content","content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"inlineContent":[{"text":"이 메서드는 ","type":"text"},{"code":"register(_:)","type":"codeVoice"},{"text":" 호출로 수집된 모든 모듈들을 Swift의 TaskGroup을 사용하여","type":"text"},{"text":" ","type":"text"},{"text":"동시에 병렬 처리합니다. 이를 통해 대량의 의존성 등록 시간을 크게 단축할 수 있습니다.","type":"text"}],"type":"paragraph"},{"level":2,"text":"동작 과정","type":"heading","anchor":"%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95"},{"level":3,"text":"1단계: 스냅샷 생성","type":"heading","anchor":"1%EB%8B%A8%EA%B3%84-%EC%8A%A4%EB%83%85%EC%83%B7-%EC%83%9D%EC%84%B1"},{"syntax":"swift","type":"codeListing","code":["\/\/ Actor 내부에서 배열을 지역 변수로 복사","let snapshot = modules"]},{"inlineContent":[{"text":"이렇게 함으로써 TaskGroup 실행 중 불필요한 actor isolation hop을 방지합니다.","type":"text"}],"type":"paragraph"},{"level":3,"text":"2단계: 병렬 작업 생성","type":"heading","anchor":"2%EB%8B%A8%EA%B3%84-%EB%B3%91%EB%A0%AC-%EC%9E%91%EC%97%85-%EC%83%9D%EC%84%B1"},{"syntax":"swift","type":"codeListing","code":["await withTaskGroup(of: Void.self) { group in","    for module in snapshot {","        group.addTask { @Sendable in","            await module.register() \/\/ 각 모듈이 병렬 실행","        }","    }","    await group.waitForAll() \/\/ 모든 작업 완료 대기","}"]},{"level":2,"text":"성능 특성","type":"heading","anchor":"%EC%84%B1%EB%8A%A5-%ED%8A%B9%EC%84%B1"},{"level":3,"text":"시간 복잡도","type":"heading","anchor":"%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"순차 처리"}]},{"text":": O(n) - 모든 모듈을 하나씩 등록","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"병렬 처리"}]},{"type":"text","text":": O(max(모듈별 등록 시간)) - 가장 오래 걸리는 모듈의 등록 시간"}]}]}],"type":"unorderedList"},{"level":3,"text":"실제 성능 예시","type":"heading","anchor":"%EC%8B%A4%EC%A0%9C-%EC%84%B1%EB%8A%A5-%EC%98%88%EC%8B%9C"},{"syntax":"swift","type":"codeListing","code":["\/\/ 10개 모듈, 각각 100ms 소요 시","\/\/ 순차 처리: 1000ms","\/\/ 병렬 처리: 100ms (약 90% 성능 향상)"]},{"level":2,"text":"사용 시나리오","type":"heading","anchor":"%EC%82%AC%EC%9A%A9-%EC%8B%9C%EB%82%98%EB%A6%AC%EC%98%A4"},{"level":3,"text":"기본 사용법","type":"heading","anchor":"%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9%EB%B2%95"},{"syntax":"swift","type":"codeListing","code":["let container = Container()","    .register(repositoryModule)","    .register(useCaseModule)","    .register(serviceModule)","","\/\/ 모든 모듈을 병렬로 등록","await container.build()","","\/\/ 이제 DI 컨테이너에서 의존성 조회 가능","let service = DependencyContainer.live.resolve(ServiceProtocol.self)"]},{"level":3,"text":"대량 모듈 처리","type":"heading","anchor":"%EB%8C%80%EB%9F%89-%EB%AA%A8%EB%93%88-%EC%B2%98%EB%A6%AC"},{"syntax":"swift","type":"codeListing","code":["let container = Container()","","\/\/ 100개 이상의 모듈도 효율적으로 처리","for i in 1...100 {","    let module = createModule(for: i)","    container.register(module)","}","","let startTime = CFAbsoluteTimeGetCurrent()","await container.build()","let duration = CFAbsoluteTimeGetCurrent() - startTime","print(\"등록 완료: \\(duration)초\")"]},{"level":3,"text":"Factory와의 연동","type":"heading","anchor":"Factory%EC%99%80%EC%9D%98-%EC%97%B0%EB%8F%99"},{"syntax":"swift","type":"codeListing","code":["let container = Container()","let factories = [repositoryFactory, useCaseFactory, serviceFactory]","","for factory in factories {","    let modules = await factory.makeAllModules()","    await modules.asyncForEach { module in","        await container.register(module)","    }","}","","\/\/ 수백 개의 모듈도 병렬로 빠르게 등록","await container.build()"]},{"level":2,"text":"메모리 관리","type":"heading","anchor":"%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC"},{"text":"자동 정리","anchor":"%EC%9E%90%EB%8F%99-%EC%A0%95%EB%A6%AC","type":"heading","level":3},{"syntax":"swift","type":"codeListing","code":["await container.build() \/\/ 등록 완료 후","\/\/ 내부 modules 배열은 자동으로 해제됨","\/\/ 메모리 누수 없이 정리됨"]},{"text":"대용량 모듈 처리","anchor":"%EB%8C%80%EC%9A%A9%EB%9F%89-%EB%AA%A8%EB%93%88-%EC%B2%98%EB%A6%AC","type":"heading","level":3},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"스냅샷 방식"}]},{"type":"text","text":": 원본 배열을 복사하므로 메모리 사용량 일시적 증가"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"TaskGroup","type":"text"}],"type":"strong"},{"type":"text","text":": 각 작업이 독립적으로 실행되어 메모리 압박 분산"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"자동 해제","type":"text"}],"type":"strong"},{"text":": 작업 완료 후 모든 임시 데이터 자동 정리","type":"text"}],"type":"paragraph"}]}]},{"anchor":"%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%B3%B4%EC%9E%A5","text":"동시성 보장","type":"heading","level":2},{"anchor":"Thread-Safety","text":"Thread Safety","type":"heading","level":3},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Actor Protection","type":"text"}]},{"type":"text","text":": 내부 상태 변경이 actor에 의해 보호됨"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Sendable Compliance","type":"text"}]},{"text":": 모든 클로저가 ","type":"text"},{"code":"@Sendable","type":"codeVoice"},{"text":"로 데이터 경쟁 방지","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Isolation","type":"text"}],"type":"strong"},{"text":": 각 모듈의 등록 작업이 독립적으로 격리되어 실행","type":"text"}],"type":"paragraph"}]}]},{"anchor":"%EC%98%A4%EB%A5%98-%EC%A0%84%ED%8C%8C","text":"오류 전파","type":"heading","level":3},{"inlineContent":[{"text":"현재 구현에서는 개별 모듈 등록 실패가 전체 프로세스를 중단하지 않습니다:","type":"text"}],"type":"paragraph"},{"code":["\/\/ 일부 모듈이 실패해도 다른 모듈들은 계속 등록됨","await container.build() \/\/ throws 하지 않음","","\/\/ 개별 모듈 내부에서 로깅이나 오류 처리 수행 가능"],"type":"codeListing","syntax":"swift"},{"anchor":"%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-%ED%8C%81","text":"성능 최적화 팁","type":"heading","level":2},{"anchor":"1-%EB%AA%A8%EB%93%88-%EA%B7%B8%EB%A3%B9%ED%99%94","text":"1. 모듈 그룹화","type":"heading","level":3},{"code":["\/\/ ✅ 좋은 예: 논리적 그룹별로 분할","await coreContainer.build()      \/\/ 핵심 의존성 먼저","await featureContainer.build()   \/\/ 기능별 의존성 나중에"],"type":"codeListing","syntax":"swift"},{"anchor":"2-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%88%9C%EC%84%9C-%EA%B3%A0%EB%A0%A4","text":"2. 의존성 순서 고려","type":"heading","level":3},{"code":["\/\/ ✅ 의존성이 있는 경우 단계별 등록","await basicContainer.build()     \/\/ 기본 의존성","await dependentContainer.build() \/\/ 위에 의존하는 것들"],"type":"codeListing","syntax":"swift"},{"anchor":"3-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%82%AC%EC%9A%A9%EB%9F%89-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81","text":"3. 메모리 사용량 모니터링","type":"heading","level":3},{"code":["let memoryBefore = getMemoryUsage()","await container.build()","let memoryAfter = getMemoryUsage()","print(\"메모리 사용량 증가: \\(memoryAfter - memoryBefore)MB\")"],"type":"codeListing","syntax":"swift"},{"style":"note","name":"Note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"모든 등록 작업이 완료될 때까지 메서드가 반환되지 않습니다."}],"type":"paragraph"}]},{"style":"important","name":"Important","type":"aside","content":[{"inlineContent":[{"type":"text","text":"이 메서드는 현재 throws 하지 않지만, 개별 모듈에서 오류 로깅은 가능합니다."}],"type":"paragraph"}]},{"style":"warning","name":"Warning","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"매우 많은 모듈(1000개 이상)을 한 번에 처리할 때는 메모리 사용량을 모니터링하세요."}]}]}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://DiContainer/documentation/DiContainer":{"abstract":[],"url":"\/documentation\/dicontainer","kind":"symbol","type":"topic","title":"DiContainer","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","role":"collection"},"doc://DiContainer/documentation/DiContainer/Container/build()":{"kind":"symbol","role":"symbol","url":"\/documentation\/dicontainer\/container\/build()","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Container\/build()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"build"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"}],"type":"topic","title":"build()","abstract":[{"text":"수집된 모든 모듈의 등록을 병렬로 실행하는 핵심 메서드입니다.","type":"text"}]},"doc://DiContainer/documentation/DiContainer/Container":{"type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Container","navigatorTitle":[{"kind":"identifier","text":"Container"}],"fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"Container"}],"role":"symbol","title":"Container","abstract":[],"kind":"symbol","url":"\/documentation\/dicontainer\/container"}}}