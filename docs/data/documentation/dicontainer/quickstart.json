{"metadata":{"title":"빠른 시작 가이드","role":"article","roleHeading":"Article","modules":[{"name":"DiContainer"}]},"primaryContentSections":[{"content":[{"text":"Overview","anchor":"overview","type":"heading","level":2},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"한국어 | English: "},{"type":"reference","identifier":"QuickStart.md","isActive":true}]}],"name":"Language","type":"aside","style":"note"},{"inlineContent":[{"type":"text","text":"DiContainer 2.0을 사용하여 Swift 프로젝트에서 의존성 주입을 시작하는 방법을 단계별로 알아보세요."}],"type":"paragraph"},{"text":"개요","anchor":"%EA%B0%9C%EC%9A%94","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"DiContainer 2.0은 Swift Concurrency와 Actor Hop 최적화를 활용한 현대적인 의존성 주입 프레임워크입니다."},{"type":"text","text":" "},{"type":"text","text":"Clean Architecture 패턴을 완벽하게 지원하며, 타입 안전성과 성능을 모두 갖춘 DI 솔루션을 제공합니다."}],"type":"paragraph"},{"text":"설치 방법","anchor":"%EC%84%A4%EC%B9%98-%EB%B0%A9%EB%B2%95","type":"heading","level":2},{"text":"Swift Package Manager","anchor":"Swift-Package-Manager","type":"heading","level":3},{"inlineContent":[{"code":"Package.swift","type":"codeVoice"},{"text":" 파일에 DiContainer를 추가하세요:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["dependencies: [","    .package(url: \"https:\/\/github.com\/Roy-wonji\/DiContainer\", from: \"2.0.0\")","]"],"type":"codeListing"},{"level":3,"anchor":"Xcode%EC%97%90%EC%84%9C-%EC%84%A4%EC%B9%98","type":"heading","text":"Xcode에서 설치"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"File → Add Package Dependencies"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"URL 입력: "},{"code":"https:\/\/github.com\/Roy-wonji\/DiContainer","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"text":"버전 선택: ","type":"text"},{"code":"2.0.0","type":"codeVoice"},{"text":" 이상","type":"text"}],"type":"paragraph"}]}],"type":"orderedList"},{"type":"heading","level":2,"anchor":"%EA%B8%B0%EB%B3%B8-%EC%84%A4%EC%A0%95","text":"기본 설정"},{"type":"heading","level":3,"anchor":"1-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0","text":"1. 서비스 정의하기"},{"type":"codeListing","syntax":"swift","code":["\/\/ 서비스 프로토콜 정의","protocol UserService {","    func getCurrentUser() async throws -> User","    func updateUser(_ user: User) async throws","}","","protocol NetworkService {","    func request<T: Codable>(_ endpoint: String) async throws -> T","}","","\/\/ 서비스 구현","class UserServiceImpl: UserService {","    @Inject var networkService: NetworkService?","    @RequiredInject var logger: LoggerProtocol","","    func getCurrentUser() async throws -> User {","        logger.info(\"사용자 정보 조회 시작\")","","        guard let network = networkService else {","            throw ServiceError.networkUnavailable","        }","","        let user: User = try await network.request(\"\/user\/current\")","        logger.info(\"사용자 정보 조회 완료: \\(user.name)\")","        return user","    }","","    func updateUser(_ user: User) async throws {","        try await networkService?.request(\"\/user\/update\")","    }","}","","class URLSessionNetworkService: NetworkService {","    func request<T: Codable>(_ endpoint: String) async throws -> T {","        \/\/ URLSession을 사용한 네트워크 구현","        \/\/ ...","    }","}"]},{"type":"heading","level":3,"anchor":"2-%EC%9D%98%EC%A1%B4%EC%84%B1-%EB%B6%80%ED%8A%B8%EC%8A%A4%ED%8A%B8%EB%9E%A9","text":"2. 의존성 부트스트랩"},{"inlineContent":[{"type":"codeVoice","code":"App"},{"type":"text","text":" 또는 "},{"type":"codeVoice","code":"AppDelegate"},{"type":"text","text":"에서 설정:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@main","struct MyApp: App {","    init() {","        Task {","            await setupDependencies()","        }","    }","","    var body: some Scene {","        WindowGroup {","            ContentView()","        }","    }","","    private func setupDependencies() async {","        await DependencyContainer.bootstrap { container in","            \/\/ 서비스 등록","            container.register(NetworkService.self) {","                URLSessionNetworkService()","            }","","            container.register(UserService.self) {","                UserServiceImpl()","            }","","            #if DEBUG","            \/\/ 디버그 빌드에서는 Mock 사용","            container.register(NetworkService.self) {","                MockNetworkService()","            }","            #endif","        }","    }","}"]},{"type":"heading","level":3,"anchor":"3-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0","text":"3. 의존성 주입 사용하기"},{"type":"heading","level":4,"anchor":"%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EB%9E%98%ED%8D%BC-%EC%82%AC%EC%9A%A9-%EA%B6%8C%EC%9E%A5","text":"프로퍼티 래퍼 사용 (권장)"},{"type":"codeListing","syntax":"swift","code":["class UserViewController: UIViewController {","    \/\/ 자동 주입 - 접근 시점에 자동으로 해결됨","    @Inject var userService: UserService","","    \/\/ 선택적 주입 - 등록되지 않은 경우 nil 반환","    @Inject var analyticsService: AnalyticsService?","","    \/\/ 필수 주입 - 등록되지 않은 경우 크래시 (신중하게 사용!)","    @RequiredInject var coreService: CoreService","","    override func viewDidLoad() {","        super.viewDidLoad()","        loadUserData()","    }","","    private func loadUserData() {","        Task {","            do {","                let user = try await userService.getCurrentUser()","                updateUI(with: user)","            } catch {","                showError(error)","            }","        }","    }","}"]},{"type":"heading","level":4,"anchor":"%EC%A7%81%EC%A0%91-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EC%8B%9D","text":"직접 해결 방식"},{"type":"codeListing","syntax":"swift","code":["class UserManager {","    private let userService: UserService","","    init() {","        \/\/ 필요할 때 수동으로 의존성 해결","        self.userService = DI.resolve(UserService.self) ?? UserServiceImpl()","    }","","    func processUser() async {","        \/\/ 에러 처리와 함께 사용","        let result = DI.resolveResult(UserService.self)","        switch result {","        case .success(let service):","            try await service.getCurrentUser()","        case .failure(let error):","            print(\"UserService 해결 실패: \\(error)\")","        }","    }","}"]},{"type":"heading","level":2,"anchor":"%EA%B3%A0%EA%B8%89-%EB%93%B1%EB%A1%9D-%ED%8C%A8%ED%84%B4","text":"고급 등록 패턴"},{"type":"heading","level":3,"anchor":"%ED%99%98%EA%B2%BD%EB%B3%84-%EB%93%B1%EB%A1%9D","text":"환경별 등록"},{"type":"codeListing","syntax":"swift","code":["await DependencyContainer.bootstrap { container in","    #if DEBUG","    container.register(NetworkService.self) { MockNetworkService() }","    container.register(UserService.self) { MockUserService() }","    #elseif STAGING","    container.register(NetworkService.self) { StagingNetworkService() }","    container.register(UserService.self) { UserServiceImpl() }","    #else","    container.register(NetworkService.self) { ProductionNetworkService() }","    container.register(UserService.self) { UserServiceImpl() }","    #endif","}"]},{"type":"heading","level":3,"anchor":"%ED%8C%A9%ED%86%A0%EB%A6%AC-%EA%B8%B0%EB%B0%98-%EB%93%B1%EB%A1%9D","text":"팩토리 기반 등록"},{"type":"codeListing","syntax":"swift","code":["struct ServiceFactory {","    static func createNetworkService() -> NetworkService {","        let config = URLSessionConfiguration.default","        config.timeoutIntervalForRequest = 30","        return URLSessionNetworkService(configuration: config)","    }","","    static func createUserService() -> UserService {","        return UserServiceImpl()","    }","}","","\/\/ 팩토리를 사용한 등록","await DependencyContainer.bootstrap { container in","    container.register(NetworkService.self) {","        ServiceFactory.createNetworkService()","    }","","    container.register(UserService.self) {","        ServiceFactory.createUserService()","    }","}"]},{"type":"heading","level":3,"anchor":"KeyPath-%EA%B8%B0%EB%B0%98-%EB%93%B1%EB%A1%9D","text":"KeyPath 기반 등록"},{"type":"codeListing","syntax":"swift","code":["extension DependencyContainer {","    var userService: UserService? { resolve(UserService.self) }","    var networkService: NetworkService? { resolve(NetworkService.self) }","}","","\/\/ 타입 안전성을 위한 KeyPath 사용","await DependencyContainer.bootstrap { container in","    let userService = container.register(\\.userService) {","        UserServiceImpl()","    }","","    let networkService = container.register(\\.networkService) {","        URLSessionNetworkService()","    }","","    \/\/ 등록 직후 서비스를 바로 사용할 수 있음","    print(\"등록된 서비스: \\(userService), \\(networkService)\")","}"]},{"type":"heading","level":2,"anchor":"%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%84%A4%EC%A0%95","text":"테스트 설정"},{"type":"codeListing","syntax":"swift","code":["class UserServiceTests: XCTestCase {","    override func setUp() async throws {","        await super.setUp()","","        \/\/ 깨끗한 테스트를 위해 DI 상태 리셋","        await DependencyContainer.releaseAll()","","        \/\/ 테스트 의존성 설정","        await DependencyContainer.bootstrap { container in","            container.register(NetworkService.self) {","                MockNetworkService()","            }","","            container.register(UserService.self) {","                UserServiceImpl()","            }","        }","    }","","    func testGetCurrentUser() async throws {","        let userService: UserService = DI.requireResolve(UserService.self)","        let user = try await userService.getCurrentUser()","","        XCTAssertEqual(user.id, \"test-user\")","    }","}"]},{"type":"heading","level":2,"anchor":"%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-%ED%8C%A8%ED%84%B4%EB%93%A4","text":"일반적인 패턴들"},{"type":"heading","level":3,"anchor":"%EC%8B%B1%EA%B8%80%ED%84%B4-%EC%84%9C%EB%B9%84%EC%8A%A4","text":"싱글턴 서비스"},{"type":"codeListing","syntax":"swift","code":["\/\/ 싱글턴 인스턴스 생성","let sharedAnalytics = AnalyticsManager()","let sharedCache = CacheManager()","","await DependencyContainer.bootstrap { container in","    \/\/ 동일한 인스턴스 등록 - 싱글턴으로 동작","    container.register(AnalyticsManager.self) { sharedAnalytics }","    container.register(CacheManager.self) { sharedCache }","}"]},{"type":"heading","level":3,"anchor":"%EC%A1%B0%EA%B1%B4%EB%B6%80-%EB%93%B1%EB%A1%9D","text":"조건부 등록"},{"type":"codeListing","syntax":"swift","code":["await DependencyContainer.bootstrap { container in","    \/\/ 런타임 조건에 따른 등록","    if UserDefaults.standard.bool(forKey: \"useAnalytics\") {","        container.register(AnalyticsService.self) {","            GoogleAnalyticsService()","        }","    } else {","        container.register(AnalyticsService.self) {","            NoOpAnalyticsService()","        }","    }","}"]},{"type":"heading","level":2,"anchor":"AppDIContainer-%ED%99%9C%EC%9A%A9","text":"AppDIContainer 활용"},{"inlineContent":[{"text":"AppDIContainer는 대규모 애플리케이션을 위한 체계적인 DI 관리 시스템입니다:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@main","struct MyApp: App {","    init() {","        Task {","            await AppDIContainer.shared.registerDependencies { container in","                \/\/ Repository 모듈 등록","                var repoFactory = AppDIContainer.shared.repositoryFactory","                repoFactory.registerDefaultDefinitions()","","                await repoFactory.makeAllModules().asyncForEach { module in","                    await container.register(module)","                }","","                \/\/ UseCase 모듈 등록","                let useCaseFactory = AppDIContainer.shared.useCaseFactory","                await useCaseFactory.makeAllModules().asyncForEach { module in","                    await container.register(module)","                }","            }","        }","    }","}"]},{"type":"heading","level":2,"anchor":"%EB%8B%A4%EC%9D%8C-%EB%8B%A8%EA%B3%84","text":"다음 단계"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"doc:모듈시스템"},{"type":"text","text":"에서 대규모 의존성 그래프 구성 방법 학습"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"doc:액터홉최적화"},{"type":"text","text":"에서 최대 성능을 위한 최적화 기법 탐구"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"doc:프로퍼티래퍼","type":"text"},{"text":"에서 @Inject, @Factory 등의 활용법 이해","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"doc:플러그인시스템"},{"type":"text","text":"에서 확장 가능한 아키텍처 구축 방법 학습"}],"type":"paragraph"}]}]}],"kind":"content"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"kind":"article","seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/CoreAPIs","doc:\/\/DiContainer\/documentation\/DiContainer\/MIGRATION-2.0.0","doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIIntegration","doc:\/\/DiContainer\/documentation\/DiContainer\/DependencyContainer"],"anchor":"시작하기","title":"시작하기"}],"identifier":{"url":"doc:\/\/DiContainer\/documentation\/DiContainer\/QuickStart","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/dicontainer\/quickstart"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://DiContainer/documentation/DiContainer/DependencyContainer":{"kind":"symbol","type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DependencyContainer","kind":"identifier"}],"title":"DependencyContainer","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/DependencyContainer","abstract":[],"url":"\/documentation\/dicontainer\/dependencycontainer","navigatorTitle":[{"text":"DependencyContainer","kind":"identifier"}]},"doc://DiContainer/documentation/DiContainer/MIGRATION-2.0.0":{"type":"topic","title":"DiContainer 2.0.0 마이그레이션 가이드","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/MIGRATION-2.0.0","abstract":[{"type":"text","text":"DiContainer 1.x에서 2.0.0으로 업그레이드하는 완전한 가이드"}],"url":"\/documentation\/dicontainer\/migration-2.0.0","role":"article","kind":"article"},"doc://DiContainer/documentation/DiContainer/CoreAPIs":{"role":"article","title":"코어 API 가이드","type":"topic","url":"\/documentation\/dicontainer\/coreapis","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/CoreAPIs","abstract":[],"kind":"article"},"QuickStart.md":{"title":"Quick Start","titleInlineContent":[{"type":"text","text":"Quick Start"}],"url":"QuickStart.md","identifier":"QuickStart.md","type":"link"},"doc://DiContainer/documentation/DiContainer/AppDIIntegration":{"type":"topic","title":"App DI Integration","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIIntegration","kind":"article","url":"\/documentation\/dicontainer\/appdiintegration","abstract":[{"type":"text","text":"애플리케이션 레벨에서 DI를 구성하고 부트스트랩하는 방법을 설명합니다."}],"role":"article"},"doc://DiContainer/documentation/DiContainer":{"url":"\/documentation\/dicontainer","kind":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","abstract":[{"type":"text","text":"현대적인 Swift Concurrency와 Actor 모델을 위해 설계된 고성능 의존성 주입 프레임워크"}],"title":"DiContainer","type":"topic","role":"collection"}}}