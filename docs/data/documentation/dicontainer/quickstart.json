{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/DiContainer\/documentation\/DiContainer\/QuickStart"},"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"개요","type":"heading","anchor":"%EA%B0%9C%EC%9A%94"},{"inlineContent":[{"type":"text","text":"DiContainer 2.0은 Swift Concurrency와 자동 최적화를 완벽 지원하는 현대적인 의존성 주입 프레임워크입니다. 이 가이드에서는 가장 기본적인 사용 방법부터 고급 기능까지 단계별로 안내합니다."}],"type":"paragraph"},{"level":2,"type":"heading","anchor":"1%EB%8B%A8%EA%B3%84-%EC%84%A4%EC%B9%98","text":"1단계: 설치"},{"level":3,"type":"heading","anchor":"Swift-Package-Manager","text":"Swift Package Manager"},{"type":"codeListing","syntax":"swift","code":["dependencies: [","    .package(url: \"https:\/\/github.com\/Roy-wonji\/DiContainer.git\", from: \"2.0.0\")","]"]},{"type":"heading","anchor":"Xcode%EC%97%90%EC%84%9C-%EC%84%A4%EC%B9%98","level":3,"text":"Xcode에서 설치"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Xcode에서 프로젝트 열기","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"File → Add Package Dependencies","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"URL 입력: ","type":"text"},{"code":"https:\/\/github.com\/Roy-wonji\/DiContainer.git","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Add Package","type":"text"}]}]}],"type":"orderedList"},{"type":"heading","anchor":"2%EB%8B%A8%EA%B3%84-%EC%9E%84%ED%8F%AC%ED%8A%B8","level":2,"text":"2단계: 임포트"},{"syntax":"swift","type":"codeListing","code":["import DiContainer"]},{"type":"heading","anchor":"3%EB%8B%A8%EA%B3%84-%EC%B2%AB-%EB%B2%88%EC%A7%B8-%EC%9D%98%EC%A1%B4%EC%84%B1-%EB%93%B1%EB%A1%9D","level":2,"text":"3단계: 첫 번째 의존성 등록"},{"type":"heading","anchor":"%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%A0%95%EC%9D%98","level":3,"text":"서비스 정의"},{"syntax":"swift","type":"codeListing","code":["\/\/ 프로토콜 정의","protocol UserService {","    func getUser(id: String) -> User?","    func saveUser(_ user: User) throws","}","","\/\/ 구현체 정의","class UserServiceImpl: UserService {","    func getUser(id: String) -> User? {","        \/\/ 사용자 조회 로직","        return User(id: id, name: \"Sample User\")","    }","","    func saveUser(_ user: User) throws {","        \/\/ 사용자 저장 로직","        Log.debug(\"Saving user: \\(user.name)\")","    }","}"]},{"type":"heading","anchor":"%EC%9D%98%EC%A1%B4%EC%84%B1-%EB%93%B1%EB%A1%9D-UnifiedDI-%EC%82%AC%EC%9A%A9","level":3,"text":"의존성 등록 (UnifiedDI 사용)"},{"syntax":"swift","type":"codeListing","code":["\/\/ 앱 시작 시점에 등록","let userService = UnifiedDI.register(UserService.self) {","    UserServiceImpl()","}","","\/\/ 즉시 사용 가능","let user = userService.getUser(id: \"123\")"]},{"type":"heading","anchor":"4%EB%8B%A8%EA%B3%84-Property-Wrapper%EB%A1%9C-%EC%A3%BC%EC%9E%85","level":2,"text":"4단계: Property Wrapper로 주입"},{"type":"heading","anchor":"Inject-%EA%B8%B0%EB%B3%B8-%EC%A3%BC%EC%9E%85","level":3,"text":"@Inject - 기본 주입"},{"syntax":"swift","type":"codeListing","code":["class UserViewController {","    @Inject var userService: UserService?","","    func loadUser() {","        if let service = userService {","            let user = service.getUser(id: \"current\")","            \/\/ UI 업데이트","        }","    }","}"]},{"type":"heading","anchor":"Factory-%EB%A7%A4%EB%B2%88-%EC%83%88%EB%A1%9C%EC%9A%B4-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4","level":3,"text":"@Factory - 매번 새로운 인스턴스"},{"syntax":"swift","type":"codeListing","code":["class ReportGenerator {","    @Factory var pdfGenerator: PDFGenerator","","    func generateReport() {","        \/\/ 매번 새로운 PDFGenerator 인스턴스 사용","        let pdf = pdfGenerator.create()","        return pdf","    }","}","","\/\/ PDFGenerator 등록","_ = UnifiedDI.register(PDFGenerator.self) {","    PDFGenerator()","}"]},{"type":"heading","anchor":"SafeInject-%EC%95%88%EC%A0%84%ED%95%9C-%EC%A3%BC%EC%9E%85-%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC","level":3,"text":"@SafeInject - 안전한 주입 (에러 처리)"},{"syntax":"swift","type":"codeListing","code":["class APIController {","    @SafeInject var apiService: APIService?","","    func fetchData() async {","        do {","            let service = try apiService.getValue()","            let data = await service.fetchUserData()","            \/\/ 데이터 처리","        } catch {","            Log.error(\"API service not available: \\(error)\")","            \/\/ 대체 로직","        }","    }","}"]},{"type":"heading","anchor":"5%EB%8B%A8%EA%B3%84-%EB%8B%A4%EC%96%91%ED%95%9C-%EB%93%B1%EB%A1%9D-%EB%B0%A9%EB%B2%95","level":2,"text":"5단계: 다양한 등록 방법"},{"type":"heading","anchor":"KeyPath-%EB%93%B1%EB%A1%9D","level":3,"text":"KeyPath 등록"},{"syntax":"swift","type":"codeListing","code":["\/\/ Extension으로 KeyPath 정의","extension DependencyContainer {","    var userService: UserService? {","        resolve(UserService.self)","    }","}","","\/\/ KeyPath로 등록","let userService = UnifiedDI.register(\\.userService) {","    UserServiceImpl()","}"]},{"type":"heading","anchor":"%EC%A1%B0%EA%B1%B4%EB%B6%80-%EB%93%B1%EB%A1%9D","level":3,"text":"조건부 등록"},{"syntax":"swift","type":"codeListing","code":["\/\/ 환경에 따른 조건부 등록","let analyticsService = UnifiedDI.Conditional.registerIf(","    AnalyticsService.self,","    condition: isProduction,","    factory: { FirebaseAnalyticsService() },  \/\/ 프로덕션용","    fallback: { MockAnalyticsService() }      \/\/ 개발\/테스트용",")"]},{"type":"heading","anchor":"6%EB%8B%A8%EA%B3%84-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95%EB%93%A4","level":2,"text":"6단계: 해결 방법들"},{"type":"heading","anchor":"%EA%B8%B0%EB%B3%B8-%ED%95%B4%EA%B2%B0","level":3,"text":"기본 해결"},{"syntax":"swift","type":"codeListing","code":["\/\/ 옵셔널 해결 (안전)","let service = UnifiedDI.resolve(UserService.self)","if let service = service {","    \/\/ 사용","}","","\/\/ 필수 해결 (없으면 크래시)","let requiredService = UnifiedDI.requireResolve(UserService.self)","\/\/ 항상 유효한 인스턴스","","\/\/ 기본값과 함께 해결","let cacheService = UnifiedDI.resolve(","    CacheService.self,","    default: MemoryCacheService()",")","\/\/ 항상 유효한 인스턴스 (등록되지 않으면 기본값 사용)"]},{"type":"heading","anchor":"7%EB%8B%A8%EA%B3%84-%EC%9E%90%EB%8F%99-%EC%B5%9C%EC%A0%81%ED%99%94-%ED%99%9C%EC%9A%A9","level":2,"text":"7단계: 자동 최적화 활용"},{"type":"heading","anchor":"%EC%9E%90%EB%8F%99%ED%99%94-%EA%B8%B0%EB%8A%A5-%EC%BC%9C%EA%B8%B0","level":3,"text":"자동화 기능 켜기"},{"syntax":"swift","type":"codeListing","code":["\/\/ 앱 시작 시점에 설정","UnifiedDI.setAutoOptimization(true)  \/\/ 기본값: true","UnifiedDI.setLogLevel(.all)          \/\/ 기본값: .all"]},{"type":"heading","anchor":"%EC%9E%90%EB%8F%99-%EC%88%98%EC%A7%91-%EC%A0%95%EB%B3%B4-%ED%99%95%EC%9D%B8","level":3,"text":"자동 수집 정보 확인"},{"syntax":"swift","type":"codeListing","code":["\/\/ 사용 통계 확인","let stats = UnifiedDI.stats","Log.debug(\"사용 통계: \\(stats)\")","","\/\/ Actor hop 통계 확인","let actorHopStats = UnifiedDI.actorHopStats","Log.debug(\"Actor hop 통계: \\(actorHopStats)\")","","\/\/ 최적화 제안 확인","let optimizations = UnifiedDI.actorOptimizations","for (type, optimization) in optimizations {","    Log.debug(\"최적화 제안 - \\(type): \\(optimization.suggestion)\")","}","","\/\/ 타입 안전성 이슈 확인","let safetyIssues = UnifiedDI.typeSafetyIssues","for (type, issue) in safetyIssues {","    Log.warning(\"타입 안전성 이슈 - \\(type): \\(issue.suggestion)\")","}"]},{"type":"heading","anchor":"8%EB%8B%A8%EA%B3%84-%EC%8B%A4%EC%A0%9C-%EC%95%B1-%EA%B5%AC%EC%A1%B0-%EC%98%88%EC%8B%9C","level":2,"text":"8단계: 실제 앱 구조 예시"},{"type":"heading","anchor":"Appswift","level":3,"text":"App.swift"},{"syntax":"swift","type":"codeListing","code":["import SwiftUI","import DiContainer","","@main","struct MyApp: App {","    init() {","        setupDependencies()","    }","","    var body: some Scene {","        WindowGroup {","            ContentView()","        }","    }","","    private func setupDependencies() {","        \/\/ 자동 최적화 활성화","        UnifiedDI.setAutoOptimization(true)","        UnifiedDI.setLogLevel(.all)","","        \/\/ Core Services","        _ = UnifiedDI.register(NetworkService.self) {","            URLSessionNetworkService()","        }","","        _ = UnifiedDI.register(DatabaseService.self) {","            CoreDataService()","        }","","        \/\/ Business Services","        _ = UnifiedDI.register(UserService.self) {","            UserServiceImpl()","        }","","        _ = UnifiedDI.register(AuthService.self) {","            AuthServiceImpl()","        }","","        \/\/ Analytics (조건부)","        _ = UnifiedDI.Conditional.registerIf(","            AnalyticsService.self,","            condition: !ProcessInfo.processInfo.arguments.contains(\"--uitests\"),","            factory: { FirebaseAnalyticsService() },","            fallback: { MockAnalyticsService() }","        )","","        Log.debug(\"Dependencies registered successfully\")","    }","}"]},{"type":"heading","anchor":"ContentViewswift","level":3,"text":"ContentView.swift"},{"syntax":"swift","type":"codeListing","code":["import SwiftUI","import DiContainer","","struct ContentView: View {","    @StateObject private var viewModel = ContentViewModel()","","    var body: some View {","        NavigationView {","            VStack {","                if viewModel.isLoading {","                    ProgressView(\"Loading...\")","                } else {","                    Text(\"Hello, \\(viewModel.currentUser?.name ?? \"Guest\")!\")","                }","","                Button(\"Load User\") {","                    Task {","                        await viewModel.loadCurrentUser()","                    }","                }","            }","            .navigationTitle(\"DiContainer Demo\")","        }","    }","}","","class ContentViewModel: ObservableObject {","    @Published var currentUser: User?","    @Published var isLoading = false","","    @Inject var userService: UserService?","    @Inject var analyticsService: AnalyticsService?","","    @MainActor","    func loadCurrentUser() async {","        isLoading = true","        defer { isLoading = false }","","        analyticsService?.track(event: \"user_load_started\")","","        \/\/ 사용자 로드","        currentUser = userService?.getUser(id: \"current\")","","        analyticsService?.track(event: \"user_load_completed\")","    }","}"]},{"type":"heading","anchor":"9%EB%8B%A8%EA%B3%84-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%84%A4%EC%A0%95","level":2,"text":"9단계: 테스트 설정"},{"type":"heading","anchor":"%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9A%A9-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%84%A4%EC%A0%95","level":3,"text":"테스트용 의존성 설정"},{"syntax":"swift","type":"codeListing","code":["import XCTest","@testable import DiContainer","","class MyAppTests: XCTestCase {","","    @MainActor","    override func setUp() {","        super.setUp()","","        \/\/ 테스트 환경 초기화","        UnifiedDI.releaseAll()","        UnifiedDI.setLogLevel(.off)  \/\/ 테스트 중 로그 끄기","","        \/\/ Mock 서비스들 등록","        _ = UnifiedDI.register(UserService.self) {","            MockUserService()","        }","","        _ = UnifiedDI.register(NetworkService.self) {","            MockNetworkService()","        }","    }","","    @MainActor","    override func tearDown() {","        UnifiedDI.releaseAll()","        super.tearDown()","    }","","    func testUserServiceRegistration() {","        \/\/ Given","        let userService = UnifiedDI.resolve(UserService.self)","","        \/\/ Then","        XCTAssertNotNil(userService)","        XCTAssertTrue(userService is MockUserService)","    }","}","","\/\/ Mock 구현","class MockUserService: UserService {","    func getUser(id: String) -> User? {","        return User(id: id, name: \"Mock User\")","    }","","    func saveUser(_ user: User) throws {","        \/\/ Mock implementation","    }","}"]},{"type":"heading","anchor":"10%EB%8B%A8%EA%B3%84-%EA%B3%A0%EA%B8%89-%EC%82%AC%EC%9A%A9%EB%B2%95-%EB%AF%B8%EB%A6%AC%EB%B3%B4%EA%B8%B0","level":2,"text":"10단계: 고급 사용법 미리보기"},{"type":"heading","anchor":"%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%9D%98%EC%A1%B4%EC%84%B1","level":3,"text":"비동기 의존성"},{"syntax":"swift","type":"codeListing","code":["\/\/ 비동기로 초기화되는 서비스","class DatabaseService {","    static func initialize() async -> DatabaseService {","        let service = DatabaseService()","        await service.connect()","        return service","    }","","    private func connect() async {","        \/\/ DB 연결 로직","    }","}","","\/\/ 등록 시","let dbService = await DatabaseService.initialize()","_ = UnifiedDI.register(DatabaseService.self) { dbService }"]},{"type":"heading","anchor":"Actor-%EA%B8%B0%EB%B0%98-%EC%84%9C%EB%B9%84%EC%8A%A4","level":3,"text":"Actor 기반 서비스"},{"syntax":"swift","type":"codeListing","code":["@MainActor","class UIService {","    func updateUI() {","        \/\/ UI 업데이트 로직 - 자동으로 MainActor에서 실행","    }","}","","\/\/ 등록","_ = UnifiedDI.register(UIService.self) {","    UIService()","}","","\/\/ 사용 - Actor hop 자동 감지","Task {","    let uiService = UnifiedDI.resolve(UIService.self)","    await uiService?.updateUI()  \/\/ MainActor로 자동 hop","}"]},{"type":"heading","anchor":"%EB%8B%A4%EC%9D%8C-%EB%8B%A8%EA%B3%84","level":2,"text":"다음 단계"},{"inlineContent":[{"text":"이제 DiContainer의 기본 사용법을 익혔습니다! 더 자세한 내용은 다음 가이드들을 참고하세요:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"PropertyWrappers.md"},{"type":"text","text":" - 모든 Property Wrapper 패턴"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"AutoDIOptimizer.md"},{"type":"text","text":" - 성능 최적화 기능"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"CoreAPIs.md"},{"type":"text","text":" - 모든 API 레퍼런스"}]}]}],"type":"unorderedList"},{"type":"heading","anchor":"%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0","level":2,"text":"문제 해결"},{"type":"heading","anchor":"%EC%9E%90%EC%A3%BC-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94-%EB%AC%B8%EC%A0%9C%EB%93%A4","level":3,"text":"자주 발생하는 문제들"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"의존성이 nil로 해결되는 경우"}]}]},{"type":"codeListing","syntax":"swift","code":["\/\/ 등록이 해결보다 먼저 되었는지 확인","_ = UnifiedDI.register(Service.self) { ServiceImpl() }","let service = UnifiedDI.resolve(Service.self) \/\/ 이제 정상 동작"]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"테스트에서 의존성이 격리되지 않는 경우"}]}]},{"syntax":"swift","code":["@MainActor","override func setUp() {","    UnifiedDI.releaseAll()  \/\/ 이전 테스트의 의존성 정리","    \/\/ 새 의존성 등록","}"],"type":"codeListing"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"타입 안전성 경고가 나타나는 경우"}],"type":"strong"}]},{"code":["\/\/ Sendable 프로토콜 추가","protocol UserService: Sendable {","    \/\/ ...","}"],"type":"codeListing","syntax":"swift"}]}],"type":"orderedList"},{"inlineContent":[{"type":"text","text":"이제 DiContainer를 프로젝트에 통합하고 현대적인 의존성 주입의 혜택을 누려보세요!"}],"type":"paragraph"}]}],"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"metadata":{"modules":[{"name":"DiContainer"}],"title":"빠른 시작 가이드","role":"article","roleHeading":"Article"},"kind":"article","abstract":[{"type":"text","text":"DiContainer를 5분만에 시작해보세요!"}],"sections":[],"variants":[{"paths":["\/documentation\/dicontainer\/quickstart"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://DiContainer/documentation/DiContainer":{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","title":"DiContainer","abstract":[],"kind":"symbol","role":"collection","type":"topic","url":"\/documentation\/dicontainer"},"CoreAPIs.md":{"identifier":"CoreAPIs.md","type":"link","title":"Core API 참조","url":"CoreAPIs.md","titleInlineContent":[{"text":"Core API 참조","type":"text"}]},"AutoDIOptimizer.md":{"identifier":"AutoDIOptimizer.md","type":"link","title":"자동 최적화 가이드","url":"AutoDIOptimizer.md","titleInlineContent":[{"type":"text","text":"자동 최적화 가이드"}]},"PropertyWrappers.md":{"identifier":"PropertyWrappers.md","type":"link","title":"Property Wrapper 상세 가이드","url":"PropertyWrappers.md","titleInlineContent":[{"type":"text","text":"Property Wrapper 상세 가이드"}]}}}