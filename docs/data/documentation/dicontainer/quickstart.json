{"abstract":[{"text":"Get up and running with DiContainer in minutes.","type":"text"}],"primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This guide will help you integrate DiContainer into your project and start using dependency injection immediately."}]},{"text":"Installation","anchor":"Installation","level":2,"type":"heading"},{"text":"Swift Package Manager","anchor":"Swift-Package-Manager","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Add DiContainer to your ","type":"text"},{"code":"Package.swift","type":"codeVoice"},{"text":":","type":"text"}]},{"code":["dependencies: [","    .package(url: \"https:\/\/github.com\/Roy-wonji\/DiContainer\", from: \"2.0.0\")","]"],"type":"codeListing","syntax":"swift"},{"text":"Xcode","anchor":"Xcode","level":3,"type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"File â†’ Add Package Dependencies","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Enter: "},{"type":"codeVoice","code":"https:\/\/github.com\/Roy-wonji\/DiContainer"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Select version: "},{"type":"codeVoice","code":"2.0.0"},{"type":"text","text":" or later"}]}]}],"type":"orderedList"},{"text":"Basic Setup","anchor":"Basic-Setup","level":2,"type":"heading"},{"text":"1. Define Your Services","anchor":"1-Define-Your-Services","level":3,"type":"heading"},{"code":["\/\/ Define protocols for your services","protocol UserService {","    func getCurrentUser() async throws -> User","    func updateUser(_ user: User) async throws","}","","protocol NetworkService {","    func request<T: Codable>(_ endpoint: String) async throws -> T","}","","\/\/ Implement your services","class UserServiceImpl: UserService {","    @Inject var networkService: NetworkService","","    func getCurrentUser() async throws -> User {","        return try await networkService.request(\"\/user\/current\")","    }","","    func updateUser(_ user: User) async throws {","        try await networkService.request(\"\/user\/update\")","    }","}","","class URLSessionNetworkService: NetworkService {","    func request<T: Codable>(_ endpoint: String) async throws -> T {","        \/\/ Implementation using URLSession","        \/\/ ...","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"2. Bootstrap Dependencies","anchor":"2-Bootstrap-Dependencies","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"In your ","type":"text"},{"type":"codeVoice","code":"App"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"AppDelegate"},{"text":":","type":"text"}]},{"code":["@main","struct MyApp: App {","    init() {","        Task {","            await setupDependencies()","        }","    }","","    var body: some Scene {","        WindowGroup {","            ContentView()","        }","    }","","    private func setupDependencies() async {","        await DependencyContainer.bootstrap { container in","            \/\/ Register your services","            container.register(NetworkService.self) {","                URLSessionNetworkService()","            }","","            container.register(UserService.self) {","                UserServiceImpl()","            }","","            #if DEBUG","            \/\/ Use mocks in debug builds","            container.register(NetworkService.self) {","                MockNetworkService()","            }","            #endif","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"3. Use Dependency Injection","anchor":"3-Use-Dependency-Injection","level":3,"type":"heading"},{"text":"With Property Wrappers (Recommended)","anchor":"With-Property-Wrappers-Recommended","level":4,"type":"heading"},{"code":["class UserViewController: UIViewController {","    \/\/ Automatic injection - will be resolved when accessed","    @Inject var userService: UserService","","    \/\/ Optional injection - returns nil if not registered","    @Inject var analyticsService: AnalyticsService?","","    \/\/ Required injection - crashes if not registered (use carefully!)","    @RequiredInject var coreService: CoreService","","    override func viewDidLoad() {","        super.viewDidLoad()","        loadUserData()","    }","","    private func loadUserData() {","        Task {","            do {","                let user = try await userService.getCurrentUser()","                updateUI(with: user)","            } catch {","                showError(error)","            }","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"With Direct Resolution","anchor":"With-Direct-Resolution","level":4,"type":"heading"},{"code":["class UserManager {","    private let userService: UserService","","    init() {","        \/\/ Resolve dependencies manually when needed","        self.userService = DI.resolve(UserService.self) ?? UserServiceImpl()","    }","","    func processUser() async {","        \/\/ Use with error handling","        let result = DI.resolveResult(UserService.self)","        switch result {","        case .success(let service):","            try await service.getCurrentUser()","        case .failure(let error):","            print(\"Failed to resolve UserService: \\(error)\")","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Advanced Registration Patterns","anchor":"Advanced-Registration-Patterns","level":2,"type":"heading"},{"text":"Environment-Based Registration","anchor":"Environment-Based-Registration","level":3,"type":"heading"},{"code":["await DependencyContainer.bootstrap { container in","    #if DEBUG","    container.register(NetworkService.self) { MockNetworkService() }","    container.register(UserService.self) { MockUserService() }","    #elseif STAGING","    container.register(NetworkService.self) { StagingNetworkService() }","    container.register(UserService.self) { UserServiceImpl() }","    #else","    container.register(NetworkService.self) { ProductionNetworkService() }","    container.register(UserService.self) { UserServiceImpl() }","    #endif","}"],"type":"codeListing","syntax":"swift"},{"text":"Factory-Based Registration","anchor":"Factory-Based-Registration","level":3,"type":"heading"},{"code":["struct ServiceFactory {","    static func createNetworkService() -> NetworkService {","        let config = URLSessionConfiguration.default","        config.timeoutIntervalForRequest = 30","        return URLSessionNetworkService(configuration: config)","    }","","    static func createUserService() -> UserService {","        return UserServiceImpl()","    }","}","","\/\/ Register using factories","await DependencyContainer.bootstrap { container in","    container.register(NetworkService.self) {","        ServiceFactory.createNetworkService()","    }","","    container.register(UserService.self) {","        ServiceFactory.createUserService()","    }","}"],"type":"codeListing","syntax":"swift"},{"level":3,"anchor":"KeyPath-Based-Registration","text":"KeyPath-Based Registration","type":"heading"},{"syntax":"swift","type":"codeListing","code":["extension DependencyContainer {","    var userService: UserService? { resolve(UserService.self) }","    var networkService: NetworkService? { resolve(NetworkService.self) }","}","","\/\/ Register using KeyPaths for type safety","await DependencyContainer.bootstrap { container in","    let userService = container.register(\\.userService) {","        UserServiceImpl()","    }","","    let networkService = container.register(\\.networkService) {","        URLSessionNetworkService()","    }","","    \/\/ Services are available immediately after registration","    print(\"Registered services: \\(userService), \\(networkService)\")","}"]},{"level":2,"anchor":"Testing-Setup","text":"Testing Setup","type":"heading"},{"syntax":"swift","type":"codeListing","code":["class UserServiceTests: XCTestCase {","    override func setUp() async throws {","        await super.setUp()","","        \/\/ Reset DI state for clean tests","        await DependencyContainer.releaseAll()","","        \/\/ Setup test dependencies","        await DependencyContainer.bootstrap { container in","            container.register(NetworkService.self) {","                MockNetworkService()","            }","","            container.register(UserService.self) {","                UserServiceImpl()","            }","        }","    }","","    func testGetCurrentUser() async throws {","        let userService: UserService = DI.requireResolve(UserService.self)","        let user = try await userService.getCurrentUser()","","        XCTAssertEqual(user.id, \"test-user\")","    }","}"]},{"level":2,"anchor":"Common-Patterns","text":"Common Patterns","type":"heading"},{"level":3,"anchor":"Singleton-Services","text":"Singleton Services","type":"heading"},{"syntax":"swift","type":"codeListing","code":["\/\/ Create singleton instances","let sharedAnalytics = AnalyticsManager()","let sharedCache = CacheManager()","","await DependencyContainer.bootstrap { container in","    \/\/ Register the same instance - acts as singleton","    container.register(AnalyticsManager.self) { sharedAnalytics }","    container.register(CacheManager.self) { sharedCache }","}"]},{"level":3,"anchor":"Conditional-Registration","text":"Conditional Registration","type":"heading"},{"syntax":"swift","type":"codeListing","code":["await DependencyContainer.bootstrap { container in","    \/\/ Register based on runtime conditions","    if UserDefaults.standard.bool(forKey: \"useAnalytics\") {","        container.register(AnalyticsService.self) {","            GoogleAnalyticsService()","        }","    } else {","        container.register(AnalyticsService.self) {","            NoOpAnalyticsService()","        }","    }","}"]},{"level":2,"anchor":"Next-Steps","text":"Next Steps","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Learn about ","type":"text"},{"text":"doc:Module-System","type":"text"},{"text":" for organizing large dependency graphs","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Explore ","type":"text"},{"text":"doc:Bootstrap-System","type":"text"},{"text":" for advanced initialization patterns","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Understand "},{"type":"text","text":"doc:Actor-Hop-Optimization"},{"type":"text","text":" for maximum performance"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Review ","type":"text"},{"text":"doc:Best-Practices","type":"text"},{"text":" for production-ready applications","type":"text"}]}]}],"type":"unorderedList"}],"kind":"content"}],"metadata":{"roleHeading":"Article","title":"Quick Start Guide","role":"article","modules":[{"name":"DiContainer"}]},"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/DiContainer\/documentation\/DiContainer\/QuickStart"},"variants":[{"paths":["\/documentation\/dicontainer\/quickstart"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"references":{"doc://DiContainer/documentation/DiContainer":{"kind":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","type":"topic","abstract":[],"url":"\/documentation\/dicontainer","title":"DiContainer","role":"collection"}}}