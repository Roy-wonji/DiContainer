{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/DiContainer\/documentation\/DiContainer\/QuickStart"},"variants":[{"paths":["\/documentation\/dicontainer\/quickstart"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"text":"This guide will walk you through the basics of setting up and using DiContainer in your Swift project. Weâ€™ll cover the essential concepts and provide practical examples to get you started quickly.","type":"text"}],"type":"paragraph"},{"anchor":"Installation","type":"heading","level":2,"text":"Installation"},{"anchor":"Swift-Package-Manager","type":"heading","level":3,"text":"Swift Package Manager"},{"inlineContent":[{"type":"text","text":"Add DiContainer to your project using Swift Package Manager:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["dependencies: [","    .package(url: \"https:\/\/github.com\/your-repo\/DiContainer.git\", from: \"2.0.0\")","]"]},{"anchor":"Basic-Setup","type":"heading","level":2,"text":"Basic Setup"},{"anchor":"1-Bootstrap-Your-Dependencies","type":"heading","level":3,"text":"1. Bootstrap Your Dependencies"},{"inlineContent":[{"text":"The first step is to set up your dependencies at app startup:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["import DiContainer","","@main","struct MyApp: App {","    init() {","        Task {","            await setupDependencies()","        }","    }","","    private func setupDependencies() async {","        await DependencyContainer.bootstrap { container in","            \/\/ Register your dependencies here","            container.register(UserService.self) {","                UserService()","            }","","            container.register(NetworkService.self) {","                NetworkService()","            }","","            container.register(Logger.self) {","                Logger()","            }","        }","    }","}"]},{"anchor":"2-Define-Your-Dependencies","type":"heading","level":3,"text":"2. Define Your Dependencies"},{"type":"paragraph","inlineContent":[{"text":"Create your dependency interfaces and implementations:","type":"text"}]},{"code":["\/\/ Protocol definition","protocol UserService {","    func fetchUser(id: String) async throws -> User","}","","\/\/ Implementation","class UserServiceImpl: UserService {","    @Inject var networkService: NetworkService?","    @RequiredInject var logger: Logger","","    func fetchUser(id: String) async throws -> User {","        logger.info(\"Fetching user with id: \\(id)\")","","        guard let network = networkService else {","            throw DIError.dependencyNotFound(NetworkService.self)","        }","","        return try await network.fetchUser(id: id)","    }","}"],"type":"codeListing","syntax":"swift"},{"level":3,"text":"3. Use Dependencies in Your Views","type":"heading","anchor":"3-Use-Dependencies-in-Your-Views"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inject dependencies into your SwiftUI views or UIKit controllers:"}]},{"code":["\/\/ SwiftUI View","struct UserProfileView: View {","    @Inject var userService: UserService?","    @State private var user: User?","","    let userId: String","","    var body: some View {","        VStack {","            if let user = user {","                Text(\"Hello, \\(user.name)!\")","            } else {","                ProgressView(\"Loading...\")","            }","        }","        .task {","            await loadUser()","        }","    }","","    private func loadUser() async {","        do {","            user = try await userService?.fetchUser(id: userId)","        } catch {","            print(\"Failed to load user: \\(error)\")","        }","    }","}","","\/\/ UIKit Controller","class UserViewController: UIViewController {","    @RequiredInject var userService: UserService","    @Inject var logger: Logger?","","    override func viewDidLoad() {","        super.viewDidLoad()","","        Task {","            do {","                let user = try await userService.fetchUser(id: \"123\")","                await MainActor.run {","                    updateUI(with: user)","                }","                logger?.info(\"User loaded successfully\")","            } catch {","                logger?.error(\"Failed to load user: \\(error)\")","            }","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"level":2,"text":"Advanced Registration","type":"heading","anchor":"Advanced-Registration"},{"level":3,"text":"Using UnifiedDI for Complex Scenarios","type":"heading","anchor":"Using-UnifiedDI-for-Complex-Scenarios"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more advanced use cases, use the UnifiedDI API:"}]},{"code":["\/\/ Conditional registration","UnifiedDI.registerIf(","    AnalyticsService.self,","    condition: !isDebugMode,","    factory: { GoogleAnalytics() },","    fallback: { NoOpAnalytics() }",")","","\/\/ Batch registration","UnifiedDI.registerMany {","    Registration(APIClient.self) { URLSessionAPIClient() }","    Registration(DatabaseService.self) { CoreDataService() }","    Registration(CacheService.self) { NSCacheService() }","}","","\/\/ Direct resolution","let service = UnifiedDI.resolve(UserService.self, default: MockUserService())"],"type":"codeListing","syntax":"swift"},{"level":3,"text":"Environment-Based Configuration","type":"heading","anchor":"Environment-Based-Configuration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Configure different dependencies for different environments:"}]},{"code":["private func setupEnvironmentDependencies() async {","    await DependencyContainer.bootstrap { container in","        #if DEBUG","        container.register(APIClient.self) { MockAPIClient() }","        container.register(Logger.self) { ConsoleLogger(level: .debug) }","        #else","        container.register(APIClient.self) { ProductionAPIClient() }","        container.register(Logger.self) { CloudLogger(level: .info) }","        #endif","","        \/\/ Common dependencies","        container.register(UserService.self) { UserServiceImpl() }","        container.register(DatabaseService.self) { CoreDataService() }","    }","}"],"type":"codeListing","syntax":"swift"},{"level":2,"text":"Property Wrapper Guide","type":"heading","anchor":"Property-Wrapper-Guide"},{"level":3,"text":"@Inject vs @RequiredInject","type":"heading","anchor":"Inject-vs-RequiredInject"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Choose the right property wrapper for your needs:"}]},{"code":["class MyService {","    \/\/ Optional injection - returns nil if not registered","    @Inject var optionalService: OptionalService?","","    \/\/ Required injection - crashes with clear error if not registered","    @RequiredInject var requiredService: RequiredService","","    \/\/ You can also specify default values","    @Inject var serviceWithDefault: ServiceProtocol? = DefaultService()","}"],"type":"codeListing","syntax":"swift"},{"level":3,"text":"KeyPath-Based Injection","type":"heading","anchor":"KeyPath-Based-Injection"},{"inlineContent":[{"text":"For more explicit dependency management, use KeyPath-based registration:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Extend DependencyContainer with your dependencies","extension DependencyContainer {","    var userService: UserService? { resolve(UserService.self) }","    var networkService: NetworkService? { resolve(NetworkService.self) }","}","","\/\/ Register using KeyPath","let service = DI.register(\\.userService) { UserServiceImpl() }","","\/\/ Inject using KeyPath","class MyController {","    @Inject(\\.userService) var userService: UserService?","}"],"type":"codeListing"},{"text":"Testing Setup","anchor":"Testing-Setup","level":2,"type":"heading"},{"text":"Mock Dependencies for Testing","anchor":"Mock-Dependencies-for-Testing","level":3,"type":"heading"},{"inlineContent":[{"text":"Set up clean testing environments:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["class UserServiceTests: XCTestCase {","    var userService: UserService!","    var mockNetwork: MockNetworkService!","","    override func setUp() async throws {","        await super.setUp()","","        \/\/ Reset DI container for clean testing","        await DependencyContainer.resetForTesting()","","        \/\/ Register mock dependencies","        mockNetwork = MockNetworkService()","","        await DependencyContainer.bootstrap { container in","            container.register(NetworkService.self) { self.mockNetwork }","            container.register(Logger.self) { MockLogger() }","        }","","        userService = UserServiceImpl()","    }","","    func testFetchUser() async throws {","        \/\/ Given","        let expectedUser = User(id: \"123\", name: \"Test User\")","        mockNetwork.mockUser = expectedUser","","        \/\/ When","        let user = try await userService.fetchUser(id: \"123\")","","        \/\/ Then","        XCTAssertEqual(user.id, expectedUser.id)","        XCTAssertEqual(user.name, expectedUser.name)","    }","}"],"type":"codeListing"},{"text":"Performance Tips","anchor":"Performance-Tips","level":2,"type":"heading"},{"text":"1. Use Actor Hop Optimization","anchor":"1-Use-Actor-Hop-Optimization","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"DiContainer automatically optimizes Actor transitions, but you can help by structuring your code properly:"}],"type":"paragraph"},{"syntax":"swift","code":["@MainActor","class ViewController {","    @Inject var service: MyService?","","    func loadData() {","        \/\/ This is optimized - no unnecessary actor hops","        Task {","            let data = await service?.fetchData()","            updateUI(with: data) \/\/ Already on MainActor","        }","    }","}"],"type":"codeListing"},{"text":"2. Lazy Registration for Heavy Objects","anchor":"2-Lazy-Registration-for-Heavy-Objects","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"For expensive-to-create objects, consider lazy initialization:"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Heavy object that should be created only when needed","UnifiedDI.register(ExpensiveService.self) {","    \/\/ This closure is only called when the service is first resolved","    ExpensiveService()","}"],"type":"codeListing"},{"text":"3. Memory Management","anchor":"3-Memory-Management","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"Be mindful of retain cycles:"}],"type":"paragraph"},{"syntax":"swift","code":["class ServiceA {","    @Inject weak var serviceB: ServiceB? \/\/ Use weak for optional dependencies that might create cycles","    @RequiredInject var serviceC: ServiceC \/\/ Strong reference for required dependencies","}"],"type":"codeListing"},{"text":"Next Steps","anchor":"Next-Steps","level":2,"type":"heading"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Read the "},{"type":"reference","identifier":"CoreAPIs.md","isActive":true},{"type":"text","text":" guide for detailed API documentation"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Learn about ","type":"text"},{"isActive":true,"type":"reference","identifier":"ActorHopOptimization.md"},{"text":" for performance tuning","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Explore the "},{"type":"reference","identifier":"PluginSystem.md","isActive":true},{"type":"text","text":" for extensibility"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Check out ","type":"text"},{"isActive":true,"type":"reference","identifier":"PropertyWrappers.md"},{"text":" for advanced injection patterns","type":"text"}]}]}],"type":"unorderedList"},{"text":"Common Patterns","anchor":"Common-Patterns","level":2,"type":"heading"},{"text":"Repository Pattern","anchor":"Repository-Pattern","level":3,"type":"heading"},{"syntax":"swift","code":["protocol UserRepository {","    func fetchUser(id: String) async throws -> User","}","","class UserRepositoryImpl: UserRepository {","    @RequiredInject var apiClient: APIClient","    @Inject var cacheService: CacheService?","","    func fetchUser(id: String) async throws -> User {","        \/\/ Check cache first","        if let cached = cacheService?.getUser(id: id) {","            return cached","        }","","        \/\/ Fetch from API","        let user = try await apiClient.fetchUser(id: id)","","        \/\/ Cache the result","        cacheService?.setUser(user, id: id)","","        return user","    }","}","","\/\/ Register in bootstrap","container.register(UserRepository.self) { UserRepositoryImpl() }"],"type":"codeListing"},{"text":"Service Layer Pattern","anchor":"Service-Layer-Pattern","level":3,"type":"heading"},{"syntax":"swift","code":["class UserService {","    @RequiredInject var repository: UserRepository","    @RequiredInject var validator: UserValidator","    @Inject var analytics: AnalyticsService?","","    func updateUser(_ user: User) async throws {","        try validator.validate(user)","        try await repository.updateUser(user)","        analytics?.track(\"user_updated\", parameters: [\"user_id\": user.id])","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Youâ€™re now ready to use DiContainer in your project! The framework handles the complexity of dependency management while providing you with a clean, type-safe API."}],"type":"paragraph"}]}],"abstract":[{"text":"Get up and running with DiContainer in minutes","type":"text"}],"metadata":{"roleHeading":"Article","title":"Quick Start Guide","role":"article","modules":[{"name":"DiContainer"}]},"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"references":{"CoreAPIs.md":{"titleInlineContent":[{"type":"text","text":"Core APIs"}],"url":"CoreAPIs.md","type":"link","identifier":"CoreAPIs.md","title":"Core APIs"},"PluginSystem.md":{"titleInlineContent":[{"type":"text","text":"Plugin System"}],"type":"link","title":"Plugin System","identifier":"PluginSystem.md","url":"PluginSystem.md"},"doc://DiContainer/documentation/DiContainer":{"title":"DiContainer","kind":"symbol","url":"\/documentation\/dicontainer","role":"collection","type":"topic","abstract":[{"text":"A modern, high-performance dependency injection framework designed for Swift Concurrency and Actor models.","type":"text"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer"},"ActorHopOptimization.md":{"titleInlineContent":[{"type":"text","text":"Actor Hop Optimization"}],"url":"ActorHopOptimization.md","type":"link","identifier":"ActorHopOptimization.md","title":"Actor Hop Optimization"},"PropertyWrappers.md":{"titleInlineContent":[{"type":"text","text":"Property Wrappers"}],"type":"link","title":"Property Wrappers","identifier":"PropertyWrappers.md","url":"PropertyWrappers.md"}}}