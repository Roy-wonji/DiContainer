{"sections":[],"abstract":[{"text":"DiContainer의 Bootstrap은 의존성 초기화를 원자적으로 보장하고, 초기 접근 순서를 통제하여 반쪽 상태를 방지합니다.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"왜 필요한가","type":"heading","anchor":"%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%9C%EA%B0%80"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"원자적 초기화: 컨테이너 교체 + 상태 플래그를 한 번에 처리"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"초기 접근 보호: 시작 전에 resolve 호출 방지"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"동시성 안전: 초기화 경합 직렬화","type":"text"}],"type":"paragraph"}]}]},{"level":2,"text":"사용 예시","type":"heading","anchor":"%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C"},{"code":["await DependencyContainer.bootstrap { c in","  c.register(Logger.self) { ConsoleLogger() }","}","","await DependencyContainer.bootstrapAsync { c in","  let db = await Database.open()","  c.register(Database.self, instance: db)","}"],"type":"codeListing","syntax":"swift"},{"level":2,"text":"모범 사례","type":"heading","anchor":"%EB%AA%A8%EB%B2%94-%EC%82%AC%EB%A1%80"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"앱 시작 시 한 번만 수행"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"sync\/async 분리 또는 bootstrapMixed로 단계적 초기화","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"부트스트랩 이후에는 UnifiedDI\/DI로 런타임 추가 등록 가능"}],"type":"paragraph"}]}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/dicontainer\/bootstraprationale"]}],"identifier":{"url":"doc:\/\/DiContainer\/documentation\/DiContainer\/BootstrapRationale","interfaceLanguage":"swift"},"kind":"article","metadata":{"modules":[{"name":"DiContainer"}],"role":"article","roleHeading":"Article","title":"Bootstrap Rationale"},"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://DiContainer/documentation/DiContainer":{"abstract":[{"type":"text","text":"현대적인 Swift Concurrency와 Actor 모델을 위해 설계된 고성능 의존성 주입 프레임워크"}],"kind":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","role":"collection","title":"DiContainer","type":"topic","url":"\/documentation\/dicontainer"}}}