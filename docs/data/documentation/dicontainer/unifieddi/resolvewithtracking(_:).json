{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/DiContainer\/documentation\/DiContainer\/UnifiedDI\/resolveWithTracking(_:)"},"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer","doc:\/\/DiContainer\/documentation\/DiContainer\/UnifiedDI"]]},"sections":[],"abstract":[{"type":"text","text":"성능 추적과 함께 의존성을 해결합니다"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolveWithTracking"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"type"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"platforms":["macOS"],"languages":["swift"]}]},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"해결할 타입","type":"text"}]}],"name":"type"}],"kind":"parameters"},{"content":[{"anchor":"return-value","type":"heading","text":"Return Value","level":2},{"inlineContent":[{"type":"text","text":"해결된 인스턴스 (없으면 nil)"}],"type":"paragraph"}],"kind":"content"},{"content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"해결 과정의 성능을 측정하고 통계를 수집합니다."},{"type":"text","text":" "},{"type":"text","text":"디버그 빌드에서만 실제 측정이 수행되며, 릴리즈 빌드에서는 일반 resolve와 동일합니다."}],"type":"paragraph"},{"level":3,"text":"사용 예시:","anchor":"%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C","type":"heading"},{"syntax":"swift","code":["let service = UnifiedDI.resolveWithTracking(NetworkService.self)","\/\/ 성능 통계가 자동으로 수집됨"],"type":"codeListing"}],"kind":"content"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"modules":[{"name":"DiContainer"}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolveWithTracking","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"role":"symbol","symbolKind":"method","externalID":"s:11DiContainer9UnifiedDIO19resolveWithTrackingyxSgxmlFZ","roleHeading":"Type Method","title":"resolveWithTracking(_:)"},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/dicontainer\/unifieddi\/resolvewithtracking(_:)"]}],"references":{"doc://DiContainer/documentation/DiContainer/UnifiedDI/resolveWithTracking(_:)":{"abstract":[{"type":"text","text":"성능 추적과 함께 의존성을 해결합니다"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/UnifiedDI\/resolveWithTracking(_:)","role":"symbol","type":"topic","url":"\/documentation\/dicontainer\/unifieddi\/resolvewithtracking(_:)","title":"resolveWithTracking(_:)","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolveWithTracking"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}]},"doc://DiContainer/documentation/DiContainer/UnifiedDI":{"abstract":[{"text":"DiContainer 2.0은 두 가지 주요 API 진입점을 제공합니다: ","type":"text"},{"type":"codeVoice","code":"UnifiedDI"},{"text":"와 ","type":"text"},{"type":"codeVoice","code":"DI"},{"text":". 각각의 역할과 사용 시나리오를 이해하여 프로젝트에 최적한 선택을 하세요.","type":"text"}],"title":"통합 DI 시스템 - UnifiedDI vs DI","kind":"article","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/UnifiedDI","type":"topic","role":"article","url":"\/documentation\/dicontainer\/unifieddi"},"doc://DiContainer/documentation/DiContainer":{"title":"DiContainer","url":"\/documentation\/dicontainer","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","role":"collection","kind":"symbol","abstract":[{"type":"text","text":"현대적인 Swift Concurrency와 Actor 모델을 위해 설계된 고성능 의존성 주입 프레임워크"}],"type":"topic"}}}