{"sections":[],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"register","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"keyPath","kind":"internalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s7KeyPathC","text":"KeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:11DiContainer010DependencyB0C","text":"DependencyContainer","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/DependencyContainer","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?>, ","kind":"text"},{"text":"factory","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" () -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"name":"keyPath","content":[{"inlineContent":[{"type":"text","text":"DependencyContainer 내의 KeyPath"}],"type":"paragraph"}]},{"name":"factory","content":[{"inlineContent":[{"type":"text","text":"인스턴스를 생성하는 팩토리 클로저"}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","level":2,"text":"Return Value","anchor":"return-value"},{"inlineContent":[{"text":"생성된 인스턴스","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"DependencyContainer의 KeyPath를 사용하여 타입 안전한 방식으로"},{"type":"text","text":" "},{"type":"text","text":"의존성을 등록하고 동시에 생성된 인스턴스를 반환합니다."},{"type":"text","text":" "},{"type":"text","text":"기존 "},{"code":"DI.register(\\.keyPath)","type":"codeVoice"},{"type":"text","text":" 스타일과 호환되면서 더 편리합니다."}]},{"level":3,"type":"heading","anchor":"%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C","text":"사용 예시:"},{"type":"codeListing","code":["let repository = UnifiedDI.register(\\.summaryPersistenceInterface) {","    SummaryPersistenceRepositoryImpl()","}","return SummaryPersistenceUseCaseImpl(repository: repository)","","let service = UnifiedDI.register(\\.userService) {","    UserServiceImpl()","}"],"syntax":"swift"}]}],"identifier":{"url":"doc:\/\/DiContainer\/documentation\/DiContainer\/UnifiedDI\/register(_:factory:)-2yimp","interfaceLanguage":"swift"},"abstract":[{"text":"KeyPath를 사용하여 의존성을 등록하고 인스턴스를 반환합니다 (DI.register 스타일)","type":"text"}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer","doc:\/\/DiContainer\/documentation\/DiContainer\/UnifiedDI"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/dicontainer\/unifieddi\/register(_:factory:)-2yimp"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"role":"symbol","roleHeading":"Type Method","externalID":"s:11DiContainer9UnifiedDIO8register_7factoryxs7KeyPathCyAA010DependencyB0CxSgG_xyYbctlFZ","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"register","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"text":"<","kind":"text"},{"text":"DependencyContainer","kind":"typeIdentifier","preciseIdentifier":"s:11DiContainer010DependencyB0C"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?>, ","kind":"text"},{"text":"factory","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"modules":[{"name":"DiContainer"}],"symbolKind":"method","title":"register(_:factory:)"},"references":{"doc://DiContainer/documentation/DiContainer/DependencyContainer":{"kind":"symbol","type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DependencyContainer","kind":"identifier"}],"title":"DependencyContainer","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/DependencyContainer","abstract":[],"url":"\/documentation\/dicontainer\/dependencycontainer","navigatorTitle":[{"text":"DependencyContainer","kind":"identifier"}]},"doc://DiContainer/documentation/DiContainer":{"url":"\/documentation\/dicontainer","kind":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","abstract":[{"type":"text","text":"현대적인 Swift Concurrency와 Actor 모델을 위해 설계된 고성능 의존성 주입 프레임워크"}],"title":"DiContainer","type":"topic","role":"collection"},"doc://DiContainer/documentation/DiContainer/UnifiedDI/register(_:factory:)-2yimp":{"url":"\/documentation\/dicontainer\/unifieddi\/register(_:factory:)-2yimp","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/UnifiedDI\/register(_:factory:)-2yimp","role":"symbol","abstract":[{"text":"KeyPath를 사용하여 의존성을 등록하고 인스턴스를 반환합니다 (DI.register 스타일)","type":"text"}],"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"register"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier","text":"KeyPath"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:11DiContainer010DependencyB0C","kind":"typeIdentifier","text":"DependencyContainer"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?>, "},{"kind":"externalParam","text":"factory"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"}],"kind":"symbol","type":"topic","title":"register(_:factory:)"},"doc://DiContainer/documentation/DiContainer/UnifiedDI":{"url":"\/documentation\/dicontainer\/unifieddi","type":"topic","kind":"article","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/UnifiedDI","role":"article","title":"통합 DI 시스템 - UnifiedDI vs DI","abstract":[{"text":"DiContainer 2.0은 두 가지 주요 API 진입점을 제공합니다: ","type":"text"},{"code":"UnifiedDI","type":"codeVoice"},{"text":"와 ","type":"text"},{"code":"DI","type":"codeVoice"},{"text":". 각각의 역할과 사용 시나리오를 이해하여 프로젝트에 최적한 선택을 하세요.","type":"text"}]}}}