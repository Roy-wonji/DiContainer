{"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"type"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"type","content":[{"inlineContent":[{"type":"text","text":"해결할 타입"}],"type":"paragraph"}]}]},{"content":[{"type":"heading","level":2,"text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"text":"해결된 인스턴스 (없으면 nil)","type":"text"}]}],"kind":"content"},{"content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"inlineContent":[{"type":"text","text":"가장 안전한 해결 방법으로, 의존성이 등록되지 않은 경우 nil을 반환합니다."},{"type":"text","text":" "},{"type":"text","text":"크래시 없이 안전하게 처리할 수 있습니다."}],"type":"paragraph"},{"level":3,"anchor":"%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C","type":"heading","text":"사용 예시:"},{"code":["if let service = UnifiedDI.resolve(NetworkService.self) {","    \/\/ 서비스 사용","} else {","    \/\/ 대체 로직 수행","}"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"metadata":{"externalID":"s:11DiContainer9UnifiedDIO7resolveyxSgxmlFZ","title":"resolve(_:)","symbolKind":"method","modules":[{"name":"DiContainer"}],"role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"roleHeading":"Type Method"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/dicontainer\/unifieddi\/resolve(_:)-8rock"]}],"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer","doc:\/\/DiContainer\/documentation\/DiContainer\/UnifiedDI"]]},"abstract":[{"type":"text","text":"등록된 의존성을 해결합니다 (옵셔널 반환)"}],"sections":[],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/DiContainer\/documentation\/DiContainer\/UnifiedDI\/resolve(_:)-8rock"},"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://DiContainer/documentation/DiContainer/UnifiedDI/resolve(_:)-8rock":{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/UnifiedDI\/resolve(_:)-8rock","url":"\/documentation\/dicontainer\/unifieddi\/resolve(_:)-8rock","title":"resolve(_:)","role":"symbol","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"등록된 의존성을 해결합니다 (옵셔널 반환)"}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolve","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}]},"doc://DiContainer/documentation/DiContainer/UnifiedDI":{"type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/UnifiedDI","url":"\/documentation\/dicontainer\/unifieddi","role":"article","abstract":[{"type":"text","text":"DiContainer 2.0은 두 가지 주요 API 진입점을 제공합니다: "},{"type":"codeVoice","code":"UnifiedDI"},{"type":"text","text":"와 "},{"type":"codeVoice","code":"DI"},{"type":"text","text":". 각각의 역할과 사용 시나리오를 이해하여 프로젝트에 최적한 선택을 하세요."}],"title":"통합 DI 시스템 - UnifiedDI vs DI","kind":"article"},"doc://DiContainer/documentation/DiContainer":{"title":"DiContainer","url":"\/documentation\/dicontainer","kind":"symbol","abstract":[{"type":"text","text":"현대적인 Swift Concurrency와 Actor 모델을 위해 설계된 고성능 의존성 주입 프레임워크"}],"type":"topic","role":"collection","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer"}}}