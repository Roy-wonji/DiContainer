{"sections":[],"abstract":[{"text":"KeyPath를 사용하여 등록된 의존성을 해결합니다 (옵셔널 반환)","type":"text"}],"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer","doc:\/\/DiContainer\/documentation\/DiContainer\/UnifiedDI"]]},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolve","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"keyPath","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"text":"<","kind":"text"},{"text":"DependencyContainer","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/DependencyContainer","kind":"typeIdentifier","preciseIdentifier":"s:11DiContainer010DependencyB0C"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":"?>) -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":"?","kind":"text"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"keyPath","content":[{"inlineContent":[{"text":"DependencyContainer 내의 KeyPath","type":"text"}],"type":"paragraph"}]}]},{"kind":"content","content":[{"text":"Return Value","anchor":"return-value","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"해결된 인스턴스 (없으면 nil)","type":"text"}]}]},{"content":[{"level":2,"type":"heading","anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"KeyPath 기반으로 의존성을 안전하게 해결합니다.","type":"text"},{"text":" ","type":"text"},{"text":"의존성이 등록되지 않은 경우 nil을 반환합니다.","type":"text"}]},{"level":3,"type":"heading","anchor":"%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C","text":"사용 예시:"},{"type":"codeListing","syntax":"swift","code":["if let repository = UnifiedDI.resolve(\\.summaryPersistenceInterface) {","    \/\/ 리포지토리 사용","} else {","    \/\/ 대체 로직 수행","}"]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/dicontainer\/unifieddi\/resolve(_:)-1fwp9"]}],"kind":"symbol","identifier":{"url":"doc:\/\/DiContainer\/documentation\/DiContainer\/UnifiedDI\/resolve(_:)-1fwp9","interfaceLanguage":"swift"},"metadata":{"modules":[{"name":"DiContainer"}],"title":"resolve(_:)","roleHeading":"Type Method","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolve","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"KeyPath","preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"DependencyContainer","preciseIdentifier":"s:11DiContainer010DependencyB0C","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?>) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"externalID":"s:11DiContainer9UnifiedDIO7resolveyxSgs7KeyPathCyAA010DependencyB0CAEGlFZ","symbolKind":"method","role":"symbol"},"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://DiContainer/documentation/DiContainer/UnifiedDI":{"url":"\/documentation\/dicontainer\/unifieddi","title":"통합 DI 시스템 - UnifiedDI vs DI","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/UnifiedDI","abstract":[{"text":"DiContainer 2.0은 두 가지 주요 API 진입점을 제공합니다: ","type":"text"},{"code":"UnifiedDI","type":"codeVoice"},{"type":"text","text":"와 "},{"code":"DI","type":"codeVoice"},{"type":"text","text":". 각각의 역할과 사용 시나리오를 이해하여 프로젝트에 최적한 선택을 하세요."}],"kind":"article","type":"topic","role":"article"},"doc://DiContainer/documentation/DiContainer/UnifiedDI/resolve(_:)-1fwp9":{"abstract":[{"type":"text","text":"KeyPath를 사용하여 등록된 의존성을 해결합니다 (옵셔널 반환)"}],"title":"resolve(_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolve","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"DependencyContainer","preciseIdentifier":"s:11DiContainer010DependencyB0C"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?>) -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"url":"\/documentation\/dicontainer\/unifieddi\/resolve(_:)-1fwp9","kind":"symbol","type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/UnifiedDI\/resolve(_:)-1fwp9","role":"symbol"},"doc://DiContainer/documentation/DiContainer":{"abstract":[{"type":"text","text":"현대적인 Swift Concurrency와 Actor 모델을 위해 설계된 고성능 의존성 주입 프레임워크"}],"kind":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","role":"collection","title":"DiContainer","type":"topic","url":"\/documentation\/dicontainer"},"doc://DiContainer/documentation/DiContainer/DependencyContainer":{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/DependencyContainer","title":"DependencyContainer","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"DependencyContainer","kind":"identifier"}],"navigatorTitle":[{"text":"DependencyContainer","kind":"identifier"}],"abstract":[],"type":"topic","url":"\/documentation\/dicontainer\/dependencycontainer","role":"symbol"}}}