{"metadata":{"role":"symbol","externalID":"s:11DiContainer28UseCaseModuleFactoryProtocola","modules":[{"name":"DiContainer"}],"navigatorTitle":[{"text":"UseCaseModuleFactoryProtocol","kind":"identifier"}],"title":"UseCaseModuleFactoryProtocol","platforms":[{"deprecated":true,"unavailable":false,"message":"Use UseCaseModuleFactory instead","beta":false}],"symbolKind":"typealias","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UseCaseModuleFactoryProtocol","kind":"identifier"}],"roleHeading":"Type Alias"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/dicontainer\/usecasemodulefactoryprotocol"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UseCaseModuleFactoryProtocol","kind":"identifier"},{"text":" = ","kind":"text"},{"text":"ModuleFactory","preciseIdentifier":"s:11DiContainer13ModuleFactoryP","kind":"typeIdentifier","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ModuleFactory"}]}]}],"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"identifier":{"url":"doc:\/\/DiContainer\/documentation\/DiContainer\/UseCaseModuleFactoryProtocol","interfaceLanguage":"swift"},"sections":[],"kind":"symbol","schemaVersion":{"major":0,"patch":0,"minor":3},"deprecationSummary":[{"type":"paragraph","inlineContent":[{"text":"Use UseCaseModuleFactory instead","type":"text"}]}],"references":{"doc://DiContainer/documentation/DiContainer":{"url":"\/documentation\/dicontainer","role":"collection","type":"topic","abstract":[{"text":"현대적인 Swift Concurrency와 Actor 모델을 위해 설계된 고성능 의존성 주입 프레임워크","type":"text"}],"title":"DiContainer","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","kind":"symbol"},"doc://DiContainer/documentation/DiContainer/ModuleFactory":{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ModuleFactory","url":"\/documentation\/dicontainer\/modulefactory","title":"Module Factory","type":"topic","abstract":[{"text":"팩토리로 모듈을 체계적으로 생성하고 Container에 등록합니다.","type":"text"}],"kind":"article","role":"article"},"doc://DiContainer/documentation/DiContainer/UseCaseModuleFactoryProtocol":{"url":"\/documentation\/dicontainer\/usecasemodulefactoryprotocol","role":"symbol","type":"topic","abstract":[],"title":"UseCaseModuleFactoryProtocol","navigatorTitle":[{"text":"UseCaseModuleFactoryProtocol","kind":"identifier"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/UseCaseModuleFactoryProtocol","kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UseCaseModuleFactoryProtocol","kind":"identifier"}],"deprecated":true}}}