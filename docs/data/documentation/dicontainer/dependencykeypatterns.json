{"seeAlsoSections":[{"identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/PropertyWrappers","doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerRegister"],"anchor":"프로퍼티-래퍼-확장","title":"프로퍼티 래퍼 확장","generated":true}],"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"의존성 해석을 안전하게 하기 위한 DependencyKey 패턴을 정리합니다."}],"kind":"article","hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"metadata":{"title":"DependencyKey Patterns","modules":[{"name":"DiContainer"}],"roleHeading":"Article","role":"article"},"primaryContentSections":[{"content":[{"level":2,"text":"안전한 패턴 예시","anchor":"%EC%95%88%EC%A0%84%ED%95%9C-%ED%8C%A8%ED%84%B4-%EC%98%88%EC%8B%9C","type":"heading"},{"syntax":"swift","code":["\/\/ 앱 시작 시 사전 등록 + 안전한 해석","extension BookListUseCaseImpl: DependencyKey {","  public static var liveValue: BookListInterface = {","    guard let repo = DependencyContainer.live.resolve(BookListInterface.self) else {","      return DefaultBookListRepositoryImpl()","    }","    return BookListUseCaseImpl(repository: repo)","  }()","}"],"type":"codeListing"},{"type":"heading","level":2,"text":"Factory 지연 초기화","anchor":"Factory-%EC%A7%80%EC%97%B0-%EC%B4%88%EA%B8%B0%ED%99%94"},{"syntax":"swift","type":"codeListing","code":["extension BookListUseCaseImpl: DependencyKey {","  public static var liveValue: BookListInterface = BookListUseCaseFactory.create()","}","","enum BookListUseCaseFactory {","  static func create() -> BookListInterface {","    @Inject(\\.bookListInterface) var repo: BookListInterface?","    return repo ?? DefaultBookListRepositoryImpl()","  }","}"]},{"type":"heading","level":2,"text":"비동기 등록 예시","anchor":"%EB%B9%84%EB%8F%99%EA%B8%B0-%EB%93%B1%EB%A1%9D-%EC%98%88%EC%8B%9C"},{"syntax":"swift","type":"codeListing","code":["Task {","  await DependencyContainer.bootstrapAsync { c in","    c.register(BookListInterface.self) { BookListRepositoryImpl() }","  }","}"]}],"kind":"content"}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/dicontainer\/dependencykeypatterns"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/DiContainer\/documentation\/DiContainer\/DependencyKeyPatterns"},"references":{"doc://DiContainer/documentation/DiContainer":{"type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","kind":"symbol","title":"DiContainer","url":"\/documentation\/dicontainer","role":"collection","abstract":[{"type":"text","text":"현대적인 Swift Concurrency와 Actor 모델을 위해 설계된 고성능 의존성 주입 프레임워크"}]},"doc://DiContainer/documentation/DiContainer/ContainerRegister":{"kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ContainerRegister","kind":"identifier"}],"abstract":[{"text":"사용자가 원하는 ContainerRegister 이름으로 사용할 수 있도록 typealias 제공","type":"text"}],"type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerRegister","url":"\/documentation\/dicontainer\/containerregister","title":"ContainerRegister","role":"symbol","navigatorTitle":[{"text":"ContainerRegister","kind":"identifier"}]},"doc://DiContainer/documentation/DiContainer/PropertyWrappers":{"abstract":[{"type":"text","text":"DiContainer의 강력한 Property Wrapper들을 활용하여 선언적이고 타입 안전한 의존성 주입을 구현하는 방법"}],"type":"topic","role":"article","url":"\/documentation\/dicontainer\/propertywrappers","title":"Property Wrapper 가이드","kind":"article","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/PropertyWrappers"}}}