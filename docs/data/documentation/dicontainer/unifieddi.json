{"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"kind":"article","identifier":{"url":"doc:\/\/DiContainer\/documentation\/DiContainer\/UnifiedDI","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"kind":"content","content":[{"text":"🎯 API 선택 가이드","type":"heading","level":2,"anchor":"%F0%9F%8E%AF-API-%EC%84%A0%ED%83%9D-%EA%B0%80%EC%9D%B4%EB%93%9C"},{"text":"UnifiedDI (권장)","type":"heading","level":3,"anchor":"UnifiedDI-%EA%B6%8C%EC%9E%A5"},{"inlineContent":[{"inlineContent":[{"text":"“모든 기능을 담은 포괄적 API”","type":"text"}],"type":"strong"}],"type":"paragraph"},{"code":["\/\/ 모든 등록 방식 지원","UnifiedDI.register(Service.self) { ServiceImpl() }","UnifiedDI.registerIf(Service.self, condition: isProduction,","                     factory: { ProdService() },","                     fallback: { MockService() })","","\/\/ 다양한 해결 전략","let service = UnifiedDI.resolve(Service.self)                    \/\/ 옵셔널","let required = UnifiedDI.requireResolve(Service.self)           \/\/ 필수","let safe = try UnifiedDI.resolveThrows(Service.self)           \/\/ Throws","let withDefault = UnifiedDI.resolve(Service.self, default: MockService())","","\/\/ 성능 추적","let tracked = UnifiedDI.resolveWithTracking(Service.self)","","\/\/ 배치 등록","UnifiedDI.registerMany {","    Registration(NetworkService.self) { NetworkServiceImpl() }","    Registration(UserService.self) { sharedUserService }","    Registration(AnalyticsService.self, condition: analytics) {","        GoogleAnalytics()","    } fallback: {","        NoOpAnalytics()","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"스코프 기반 등록\/해결(화면\/세션\/요청)","type":"heading","level":4,"anchor":"%EC%8A%A4%EC%BD%94%ED%94%84-%EA%B8%B0%EB%B0%98-%EB%93%B1%EB%A1%9D%ED%95%B4%EA%B2%B0%ED%99%94%EB%A9%B4%EC%84%B8%EC%85%98%EC%9A%94%EC%B2%AD"},{"syntax":"swift","code":["\/\/ 스코프 ID 설정 (예: 로그인 성공 시 세션 스코프 시작)","ScopeContext.shared.setCurrent(.session, id: user.id)","","\/\/ 스코프 등록 (동기\/비동기)","UnifiedDI.registerScoped(UserService.self, scope: .session) { UserServiceImpl() }","UnifiedDI.registerAsyncScoped(ProfileCache.self, scope: .screen) { await ProfileCache.make() }","","\/\/ 기존과 동일한 방식으로 해결 (현재 스코프 ID가 있으면 스코프 캐시 사용)","let userService = UnifiedDI.resolve(UserService.self)","","\/\/ 스코프 해제 (전체\/특정 타입)","UnifiedDI.releaseScope(.session, id: user.id)","UnifiedDI.releaseScoped(UserService.self, kind: .session, id: user.id)"],"type":"codeListing"},{"level":4,"anchor":"%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%8B%B1%EA%B8%80%ED%86%A4%EC%B5%9C%EC%B4%88-1%ED%9A%8C-%EC%83%9D%EC%84%B1","text":"비동기 싱글톤(최초 1회 생성)","type":"heading"},{"syntax":"swift","code":["await GlobalUnifiedRegistry.registerAsyncSingleton(RemoteConfig.self) { await RemoteConfig.fetch() }","","\/\/ 어디서든 사용","let config: RemoteConfig? = await UnifiedDI.resolveAsync(RemoteConfig.self)"],"type":"codeListing"},{"text":"그래프 자동 수집(선택)","type":"heading","level":4,"anchor":"%EA%B7%B8%EB%9E%98%ED%94%84-%EC%9E%90%EB%8F%99-%EC%88%98%EC%A7%91%EC%84%A0%ED%83%9D"},{"syntax":"swift","code":["\/\/ 자동 기록 활성화 (해결 시 상위 컨텍스트 → 대상 타입 간 엣지 기록)","CircularDependencyDetector.shared.setAutoRecordingEnabled(true)","","\/\/ 더 정확한 그래프를 원하면 '소유 타입' 컨텍스트에서 begin\/end로 감싸주세요","try? CircularDependencyDetector.shared.beginResolution(HomeViewModel.self)","defer { CircularDependencyDetector.shared.endResolution(HomeViewModel.self) }","","let service = UnifiedDI.resolve(UserService.self)"],"type":"codeListing"},{"inlineContent":[{"inlineContent":[{"text":"사용 시나리오:","type":"text"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"복잡한 앱 아키텍처"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"고급 DI 기능이 필요한 경우"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"성능 최적화가 중요한 경우"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"A\/B 테스트나 조건부 등록이 필요한 경우","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"대규모 팀 개발","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":3,"anchor":"DI-%EB%8B%A8%EC%88%9C%ED%99%94","text":"DI (단순화)","type":"heading"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"“핵심만 담은 간결한 API”"}],"type":"strong"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ 기본 3가지 패턴만 제공","DI.register(Service.self) { ServiceImpl() }  \/\/ 등록","@Inject var service: Service?                 \/\/ 주입","let service = DI.resolve(Service.self)        \/\/ 해결"]},{"inlineContent":[{"inlineContent":[{"text":"사용 시나리오:","type":"text"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"간단한 프로젝트"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"DI 학습 목적"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"최소한의 설정을 원하는 경우","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"프로토타입 개발","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"소규모 팀 개발","type":"text"}]}]}],"type":"unorderedList"},{"level":2,"anchor":"%F0%9F%94%84-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98-%EC%A0%84%EB%9E%B5","text":"🔄 마이그레이션 전략","type":"heading"},{"level":3,"anchor":"Legacy-DI-%E2%86%92-UnifiedDI","type":"heading","text":"Legacy DI → UnifiedDI"},{"syntax":"swift","code":["\/\/ Before (Legacy)","DI.register(Service.self) { ServiceImpl() }","let service = DI.resolve(Service.self)","","\/\/ After (UnifiedDI)","UnifiedDI.register(Service.self) { ServiceImpl() }","let service = UnifiedDI.resolve(Service.self)"],"type":"codeListing"},{"level":3,"anchor":"%EC%A0%90%EC%A7%84%EC%A0%81-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98","type":"heading","text":"점진적 마이그레이션"},{"syntax":"swift","code":["\/\/ 1단계: 기존 코드 유지하면서 새로운 코드는 UnifiedDI 사용","class LegacyViewController {","    @Inject var service: OldService?  \/\/ 기존 코드 유지","}","","class NewViewController {","    private let newService = UnifiedDI.resolve(NewService.self, default: DefaultNewService())","}","","\/\/ 2단계: 배치 등록으로 통합","await DependencyContainer.bootstrap { container in","    \/\/ 기존 서비스들","    container.register(OldService.self) { OldServiceImpl() }","","    \/\/ 새로운 서비스들 - UnifiedDI 스타일로 등록","    UnifiedDI.register(NewService.self) { NewServiceImpl() }","}","","\/\/ 3단계: 완전히 UnifiedDI로 통합","UnifiedDI.registerMany {","    Registration(OldService.self) { OldServiceImpl() }","    Registration(NewService.self) { NewServiceImpl() }","}"],"type":"codeListing"},{"level":2,"anchor":"%F0%9F%8F%97%EF%B8%8F-%EC%8B%A4%EB%AC%B4-%ED%8C%A8%ED%84%B4","text":"🏗️ 실무 패턴","type":"heading"},{"level":3,"anchor":"%ED%99%98%EA%B2%BD%EB%B3%84-%EA%B5%AC%EC%84%B1","text":"환경별 구성","type":"heading"},{"syntax":"swift","code":["#if DEBUG","UnifiedDI.registerMany {","    Registration(APIService.self) { MockAPIService() }","    Registration(AnalyticsService.self) { DebugAnalytics() }","    Registration(LoggerService.self, default: ConsoleLogger(level: .debug))","}","#else","UnifiedDI.registerMany {","    Registration(APIService.self) { ProductionAPIService() }","    Registration(AnalyticsService.self) { FirebaseAnalytics() }","    Registration(LoggerService.self, default: CloudLogger(level: .info))","}","#endif"],"type":"codeListing"},{"level":3,"anchor":"%EB%AA%A8%EB%93%88%EB%B3%84-%EB%B6%84%EB%A6%AC","text":"모듈별 분리","type":"heading"},{"syntax":"swift","code":["enum NetworkModule {","    static func register() {","        UnifiedDI.registerMany {","            Registration(HTTPClient.self) { URLSessionHTTPClient() }","            Registration(APIService.self) { APIServiceImpl() }","            Registration(NetworkReachability.self) { NetworkReachability.shared }","        }","    }","}","","enum DataModule {","    static func register() {","        UnifiedDI.registerMany {","            Registration(DatabaseService.self) { CoreDataService() }","            Registration(CacheService.self) { NSCacheService() }","            Registration(KeychainService.self) { KeychainService.shared }","        }","    }","}","","\/\/ 앱 초기화에서","await DependencyContainer.bootstrap { container in","    NetworkModule.register()","    DataModule.register()","}"],"type":"codeListing"},{"text":"📊 성능 특성 비교","type":"heading","level":2,"anchor":"%F0%9F%93%8A-%EC%84%B1%EB%8A%A5-%ED%8A%B9%EC%84%B1-%EB%B9%84%EA%B5%90"},{"header":"row","type":"table","rows":[[[{"inlineContent":[{"type":"text","text":"기능"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"UnifiedDI"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"DI (단순화)","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"기본 등록\/해결","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"✅ 최적화됨"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"✅ 최적화됨"}]}]],[[{"inlineContent":[{"type":"text","text":"조건부 등록"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"✅ 지원"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"❌ 미지원","type":"text"}]}]],[[{"inlineContent":[{"text":"성능 추적","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"✅ 내장","type":"text"}]}],[{"inlineContent":[{"text":"❌ 미지원","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"배치 등록"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"✅ Result Builder DSL"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"❌ 미지원"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"KeyPath 등록"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"✅ 지원"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"❌ 미지원"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"스코프(.screen\/.session\/.request)"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"✅ 등록\/해결\/해제 지원"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"❌ 미지원"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"비동기 싱글톤(초기화 1회 보장)"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"✅ 지원(GlobalUnifiedRegistry)"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"❌ 미지원"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"그래프 자동 수집 옵션"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"✅ 지원(CircularDependencyDetector)"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"❌ 미지원"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"에러 전략"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"✅ 다양함 (throws, default 등)"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"✅ 기본만"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"학습 곡선"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"보통"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"낮음"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"메모리 오버헤드"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"낮음"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"매우 낮음"}]}]]]},{"text":"🎯 결론 및 권장사항","type":"heading","level":2,"anchor":"%F0%9F%8E%AF-%EA%B2%B0%EB%A1%A0-%EB%B0%8F-%EA%B6%8C%EC%9E%A5%EC%82%AC%ED%95%AD"},{"text":"✅ UnifiedDI를 선택하세요","type":"heading","level":3,"anchor":"%E2%9C%85-UnifiedDI%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%98%EC%84%B8%EC%9A%94"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"프로덕션 앱 개발 시"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"팀 개발 환경"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"복잡한 의존성 그래프"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"성능 최적화가 중요한 경우"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"테스트 친화적 아키텍처 필요 시"}],"type":"paragraph"}]}]},{"text":"✅ DI(단순화)를 선택하세요","type":"heading","level":3,"anchor":"%E2%9C%85-DI%EB%8B%A8%EC%88%9C%ED%99%94%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%98%EC%84%B8%EC%9A%94"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"프로토타입 개발","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"학습 목적","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"매우 간단한 프로젝트","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"최소한의 의존성 관리만 필요한 경우"}]}]}]},{"text":"💡 Best Practice","type":"heading","level":3,"anchor":"%F0%9F%92%A1-Best-Practice"},{"inlineContent":[{"type":"text","text":"대부분의 경우 "},{"type":"strong","inlineContent":[{"type":"text","text":"UnifiedDI"}]},{"type":"text","text":"를 사용하는 것을 권장합니다. 더 많은 기능을 제공하면서도 필요한 만큼만 사용할 수 있어 확장성이 뛰어나기 때문입니다."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ 권장 패턴: UnifiedDI로 시작하여 필요에 따라 기능 확장","@main","struct MyApp: App {","    init() {","        Task {","            await setupDependencies()","        }","    }","","    private func setupDependencies() async {","        \/\/ UnifiedDI의 강력한 배치 등록 사용","        UnifiedDI.registerMany {","            \/\/ 기본 서비스들","            Registration(NetworkService.self) { NetworkServiceImpl() }","            Registration(UserService.self) { UserServiceImpl() }","","            \/\/ 환경별 조건부 등록","            Registration(AnalyticsService.self,","                        condition: !isDebug,","                        factory: { GoogleAnalytics() },","                        fallback: { NoOpAnalytics() })","        }","","        \/\/ 성능 최적화 활성화","        await UnifiedDI.enablePerformanceOptimization()","    }","}"]},{"text":"🔬 참고: “컴파일 타임 절대 보증\/초저오버헤드”가 목표라면","type":"heading","level":2,"anchor":"%F0%9F%94%AC-%EC%B0%B8%EA%B3%A0-%EC%BB%B4%ED%8C%8C%EC%9D%BC-%ED%83%80%EC%9E%84-%EC%A0%88%EB%8C%80-%EB%B3%B4%EC%A6%9D%EC%B4%88%EC%A0%80%EC%98%A4%EB%B2%84%ED%97%A4%EB%93%9C%EA%B0%80-%EB%AA%A9%ED%91%9C%EB%9D%BC%EB%A9%B4"},{"inlineContent":[{"type":"text","text":"본 프레임워크는 런타임 DI(유연성\/도구\/동시성 최적화) 중심입니다. 만약 Needle 스타일의 "},{"inlineContent":[{"type":"text","text":"컴파일 타임 보증"}],"type":"strong"},{"type":"text","text":"과 "},{"inlineContent":[{"type":"text","text":"초저오버헤드"}],"type":"strong"},{"text":"가 최우선이라면:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"레지스트리\/런타임 조회 대신 코드 생성 기반 정적 바인딩으로 전환","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"컴포넌트(Dependencies\/Provides) 선언 → 빌드 시 wire 코드 생성"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"프로덕션 핫패스에서 프로퍼티 래퍼\/딕셔너리\/캐스팅 제거, 생성자 주입\/직접 참조로 대체"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"이 접근은 팀\/도메인에 따라 큰 이점을 줄 수 있습니다. 현 레포에서도 점진 전환(디버그=런타임 DI, 릴리즈=코드생성 DI) 전략을 고려할 수 있습니다.","type":"text"}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/dicontainer\/unifieddi"]}],"sections":[],"metadata":{"role":"article","title":"통합 DI 시스템 - UnifiedDI vs DI","roleHeading":"Article","modules":[{"name":"DiContainer"}]},"abstract":[{"type":"text","text":"DiContainer 2.0은 두 가지 주요 API 진입점을 제공합니다: "},{"type":"codeVoice","code":"UnifiedDI"},{"type":"text","text":"와 "},{"code":"DI","type":"codeVoice"},{"text":". 각각의 역할과 사용 시나리오를 이해하여 프로젝트에 최적한 선택을 하세요.","type":"text"}],"seeAlsoSections":[{"identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/DI","doc:\/\/DiContainer\/documentation\/DiContainer\/DependencyContainer","doc:\/\/DiContainer\/documentation\/DiContainer\/GlobalUnifiedRegistry","doc:\/\/DiContainer\/documentation\/DiContainer\/Inject","doc:\/\/DiContainer\/documentation\/DiContainer\/RequiredInject","doc:\/\/DiContainer\/documentation\/DiContainer\/Factory","doc:\/\/DiContainer\/documentation\/DiContainer\/FactoryValues","doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerUsage","doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerPerformance","doc:\/\/DiContainer\/documentation\/DiContainer\/Container","doc:\/\/DiContainer\/documentation\/DiContainer\/Module","doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer"],"anchor":"핵심-컴포넌트","title":"핵심 컴포넌트","generated":true}],"references":{"doc://DiContainer/documentation/DiContainer/AppDIContainer":{"url":"\/documentation\/dicontainer\/appdicontainer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AppDIContainer"}],"title":"AppDIContainer","role":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer","fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"AppDIContainer"}],"abstract":[]},"doc://DiContainer/documentation/DiContainer/DependencyContainer":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"DependencyContainer","kind":"identifier"}],"url":"\/documentation\/dicontainer\/dependencycontainer","navigatorTitle":[{"text":"DependencyContainer","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/DependencyContainer","abstract":[],"title":"DependencyContainer","role":"symbol","kind":"symbol"},"doc://DiContainer/documentation/DiContainer/Factory":{"url":"\/documentation\/dicontainer\/factory","kind":"symbol","type":"topic","navigatorTitle":[{"text":"Factory","kind":"identifier"}],"title":"Factory","role":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Factory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Factory"}],"abstract":[{"type":"text","text":"팩토리 패턴 기반 의존성 주입을 위한 프로퍼티 래퍼"}]},"doc://DiContainer/documentation/DiContainer/ContainerPerformance":{"url":"\/documentation\/dicontainer\/containerperformance","kind":"article","type":"topic","title":"Container Performance","role":"article","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerPerformance","abstract":[{"text":"Container는 모듈 배열을 스냅샷한 뒤 TaskGroup으로 병렬 등록하여 불필요한 actor hop을 줄입니다.","type":"text"}]},"doc://DiContainer/documentation/DiContainer/Inject":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Inject","kind":"identifier"}],"url":"\/documentation\/dicontainer\/inject","navigatorTitle":[{"text":"Inject","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Inject","abstract":[{"text":"옵셔널 의존성 주입을 위한 프로퍼티 래퍼","type":"text"}],"title":"Inject","role":"symbol","kind":"symbol"},"doc://DiContainer/documentation/DiContainer/Container":{"url":"\/documentation\/dicontainer\/container","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Container"}],"title":"Container","role":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Container","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Container","kind":"identifier"}],"abstract":[]},"doc://DiContainer/documentation/DiContainer/DI":{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/DI","url":"\/documentation\/dicontainer\/di","title":"DI","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"DI"}],"navigatorTitle":[{"kind":"identifier","text":"DI"}],"abstract":[{"type":"text","text":"단순화된 의존성 주입 API"}],"kind":"symbol","role":"symbol"},"doc://DiContainer/documentation/DiContainer/ContainerUsage":{"url":"\/documentation\/dicontainer\/containerusage","kind":"article","type":"topic","title":"Container Usage","role":"article","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerUsage","abstract":[{"type":"text","text":"DiContainer의 Container는 모듈을 수집한 뒤 한 번에 병렬 등록하여 Actor hop을 최소화합니다."}]},"doc://DiContainer/documentation/DiContainer/Module":{"url":"\/documentation\/dicontainer\/module","type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Module","kind":"identifier"}],"navigatorTitle":[{"text":"Module","kind":"identifier"}],"title":"Module","abstract":[{"type":"codeVoice","code":"Module"},{"type":"text","text":"은 DI(의존성 주입)를 위한 "},{"inlineContent":[{"text":"단일 모듈","type":"text"}],"type":"strong"},{"type":"text","text":"을 나타내는 구조체입니다."}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Module","role":"symbol"},"doc://DiContainer/documentation/DiContainer/GlobalUnifiedRegistry":{"url":"\/documentation\/dicontainer\/globalunifiedregistry","kind":"symbol","type":"topic","title":"GlobalUnifiedRegistry","role":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/GlobalUnifiedRegistry","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"GlobalUnifiedRegistry","kind":"identifier"},{"text":": ","kind":"text"},{"text":"UnifiedRegistry","kind":"typeIdentifier","preciseIdentifier":"s:11DiContainer15UnifiedRegistryC"}],"abstract":[{"type":"text","text":"글로벌 통합 Registry 인스턴스"},{"type":"text","text":" "},{"type":"text","text":"DependencyContainer.live에서 내부적으로 사용"}]},"doc://DiContainer/documentation/DiContainer/RequiredInject":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequiredInject","kind":"identifier"}],"url":"\/documentation\/dicontainer\/requiredinject","navigatorTitle":[{"text":"RequiredInject","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/RequiredInject","abstract":[{"type":"text","text":"필수 의존성 주입을 위한 프로퍼티 래퍼"}],"title":"RequiredInject","role":"symbol","kind":"symbol"},"doc://DiContainer/documentation/DiContainer":{"url":"\/documentation\/dicontainer","role":"collection","type":"topic","abstract":[{"text":"현대적인 Swift Concurrency와 Actor 모델을 위해 설계된 고성능 의존성 주입 프레임워크","type":"text"}],"title":"DiContainer","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","kind":"symbol"},"doc://DiContainer/documentation/DiContainer/FactoryValues":{"url":"\/documentation\/dicontainer\/factoryvalues","kind":"symbol","type":"topic","navigatorTitle":[{"text":"FactoryValues","kind":"identifier"}],"title":"FactoryValues","role":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/FactoryValues","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"FactoryValues","kind":"identifier"}],"abstract":[{"type":"text","text":"팩토리 값들을 관리하는 프로퍼티 래퍼"}]}}}