{"sections":[],"kind":"article","metadata":{"modules":[{"name":"DiContainer"}],"title":"통합 DI 시스템 - UnifiedDI vs DI","role":"article","roleHeading":"Article"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/dicontainer\/unifieddi"]}],"abstract":[{"type":"text","text":"DiContainer 2.0은 두 가지 주요 API 진입점을 제공합니다: "},{"type":"codeVoice","code":"UnifiedDI"},{"type":"text","text":"와 "},{"type":"codeVoice","code":"DI"},{"type":"text","text":". 각각의 역할과 사용 시나리오를 이해하여 프로젝트에 최적한 선택을 하세요."}],"identifier":{"url":"doc:\/\/DiContainer\/documentation\/DiContainer\/UnifiedDI","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"anchor":"%F0%9F%8E%AF-API-%EC%84%A0%ED%83%9D-%EA%B0%80%EC%9D%B4%EB%93%9C","text":"🎯 API 선택 가이드","level":2,"type":"heading"},{"anchor":"UnifiedDI-%EA%B6%8C%EC%9E%A5","text":"UnifiedDI (권장)","level":3,"type":"heading"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"“모든 기능을 담은 포괄적 API”"}],"type":"strong"}],"type":"paragraph"},{"code":["\/\/ 모든 등록 방식 지원","UnifiedDI.register(Service.self) { ServiceImpl() }","UnifiedDI.registerIf(Service.self, condition: isProduction,","                     factory: { ProdService() },","                     fallback: { MockService() })","","\/\/ 다양한 해결 전략","let service = UnifiedDI.resolve(Service.self)                    \/\/ 옵셔널","let required = UnifiedDI.requireResolve(Service.self)           \/\/ 필수","let safe = try UnifiedDI.resolveThrows(Service.self)           \/\/ Throws","let withDefault = UnifiedDI.resolve(Service.self, default: MockService())","","\/\/ 성능 추적","let tracked = UnifiedDI.resolveWithTracking(Service.self)","","\/\/ 배치 등록","UnifiedDI.registerMany {","    Registration(NetworkService.self) { NetworkServiceImpl() }","    Registration(UserService.self, singleton: sharedUserService)","    Registration(AnalyticsService.self, condition: analytics) {","        GoogleAnalytics()","    } fallback: {","        NoOpAnalytics()","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"사용 시나리오:"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"복잡한 앱 아키텍처","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"고급 DI 기능이 필요한 경우","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"성능 최적화가 중요한 경우","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A\/B 테스트나 조건부 등록이 필요한 경우"}]}]},{"content":[{"inlineContent":[{"text":"대규모 팀 개발","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"DI-%EB%8B%A8%EC%88%9C%ED%99%94","text":"DI (단순화)","level":3,"type":"heading"},{"inlineContent":[{"inlineContent":[{"text":"“핵심만 담은 간결한 API”","type":"text"}],"type":"strong"}],"type":"paragraph"},{"code":["\/\/ 기본 3가지 패턴만 제공","DI.register(Service.self) { ServiceImpl() }  \/\/ 등록","@Inject var service: Service?                 \/\/ 주입","let service = DI.resolve(Service.self)        \/\/ 해결"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"사용 시나리오:","type":"text"}]}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"간단한 프로젝트","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"DI 학습 목적","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"최소한의 설정을 원하는 경우","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"프로토타입 개발","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"소규모 팀 개발","type":"text"}]}]}],"type":"unorderedList"},{"level":2,"type":"heading","anchor":"%F0%9F%94%84-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98-%EC%A0%84%EB%9E%B5","text":"🔄 마이그레이션 전략"},{"level":3,"type":"heading","anchor":"Legacy-DI-%E2%86%92-UnifiedDI","text":"Legacy DI → UnifiedDI"},{"type":"codeListing","code":["\/\/ Before (Legacy)","DI.register(Service.self) { ServiceImpl() }","let service = DI.resolve(Service.self)","","\/\/ After (UnifiedDI)","UnifiedDI.register(Service.self) { ServiceImpl() }","let service = UnifiedDI.resolve(Service.self)"],"syntax":"swift"},{"level":3,"type":"heading","anchor":"%EC%A0%90%EC%A7%84%EC%A0%81-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98","text":"점진적 마이그레이션"},{"type":"codeListing","code":["\/\/ 1단계: 기존 코드 유지하면서 새로운 코드는 UnifiedDI 사용","class LegacyViewController {","    @Inject var service: OldService?  \/\/ 기존 코드 유지","}","","class NewViewController {","    private let newService = UnifiedDI.resolve(NewService.self, default: DefaultNewService())","}","","\/\/ 2단계: 배치 등록으로 통합","await DependencyContainer.bootstrap { container in","    \/\/ 기존 서비스들","    container.register(OldService.self) { OldServiceImpl() }","","    \/\/ 새로운 서비스들 - UnifiedDI 스타일로 등록","    UnifiedDI.register(NewService.self) { NewServiceImpl() }","}","","\/\/ 3단계: 완전히 UnifiedDI로 통합","UnifiedDI.registerMany {","    Registration(OldService.self) { OldServiceImpl() }","    Registration(NewService.self) { NewServiceImpl() }","}"],"syntax":"swift"},{"level":2,"type":"heading","anchor":"%F0%9F%8F%97%EF%B8%8F-%EC%8B%A4%EB%AC%B4-%ED%8C%A8%ED%84%B4","text":"🏗️ 실무 패턴"},{"text":"환경별 구성","level":3,"type":"heading","anchor":"%ED%99%98%EA%B2%BD%EB%B3%84-%EA%B5%AC%EC%84%B1"},{"syntax":"swift","type":"codeListing","code":["#if DEBUG","UnifiedDI.registerMany {","    Registration(APIService.self) { MockAPIService() }","    Registration(AnalyticsService.self) { DebugAnalytics() }","    Registration(LoggerService.self, default: ConsoleLogger(level: .debug))","}","#else","UnifiedDI.registerMany {","    Registration(APIService.self) { ProductionAPIService() }","    Registration(AnalyticsService.self) { FirebaseAnalytics() }","    Registration(LoggerService.self, default: CloudLogger(level: .info))","}","#endif"]},{"text":"모듈별 분리","level":3,"type":"heading","anchor":"%EB%AA%A8%EB%93%88%EB%B3%84-%EB%B6%84%EB%A6%AC"},{"syntax":"swift","type":"codeListing","code":["enum NetworkModule {","    static func register() {","        UnifiedDI.registerMany {","            Registration(HTTPClient.self) { URLSessionHTTPClient() }","            Registration(APIService.self) { APIServiceImpl() }","            Registration(NetworkReachability.self, singleton: NetworkReachability.shared)","        }","    }","}","","enum DataModule {","    static func register() {","        UnifiedDI.registerMany {","            Registration(DatabaseService.self) { CoreDataService() }","            Registration(CacheService.self) { NSCacheService() }","            Registration(KeychainService.self, singleton: KeychainService.shared)","        }","    }","}","","\/\/ 앱 초기화에서","await DependencyContainer.bootstrap { container in","    NetworkModule.register()","    DataModule.register()","}"]},{"text":"📊 성능 특성 비교","level":2,"type":"heading","anchor":"%F0%9F%93%8A-%EC%84%B1%EB%8A%A5-%ED%8A%B9%EC%84%B1-%EB%B9%84%EA%B5%90"},{"header":"row","type":"table","rows":[[[{"inlineContent":[{"type":"text","text":"기능"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"UnifiedDI"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"DI (단순화)"}],"type":"paragraph"}]],[[{"inlineContent":[{"text":"기본 등록\/해결","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"✅ 최적화됨"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"✅ 최적화됨"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"조건부 등록"}],"type":"paragraph"}],[{"inlineContent":[{"text":"✅ 지원","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"❌ 미지원"}],"type":"paragraph"}]],[[{"inlineContent":[{"text":"성능 추적","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"✅ 내장"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"❌ 미지원"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"배치 등록"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"✅ Result Builder DSL"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"❌ 미지원"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"KeyPath 등록"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"✅ 지원"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"❌ 미지원"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"에러 전략"}],"type":"paragraph"}],[{"inlineContent":[{"text":"✅ 다양함 (throws, default 등)","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"✅ 기본만"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"학습 곡선"}],"type":"paragraph"}],[{"inlineContent":[{"text":"보통","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"낮음","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"text":"메모리 오버헤드","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"낮음","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"매우 낮음","type":"text"}],"type":"paragraph"}]]]},{"text":"🎯 결론 및 권장사항","level":2,"type":"heading","anchor":"%F0%9F%8E%AF-%EA%B2%B0%EB%A1%A0-%EB%B0%8F-%EA%B6%8C%EC%9E%A5%EC%82%AC%ED%95%AD"},{"text":"✅ UnifiedDI를 선택하세요","level":3,"type":"heading","anchor":"%E2%9C%85-UnifiedDI%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%98%EC%84%B8%EC%9A%94"},{"items":[{"content":[{"inlineContent":[{"text":"프로덕션 앱 개발 시","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"팀 개발 환경"}]}]},{"content":[{"inlineContent":[{"text":"복잡한 의존성 그래프","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"성능 최적화가 중요한 경우"}]}]},{"content":[{"inlineContent":[{"text":"테스트 친화적 아키텍처 필요 시","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"✅ DI(단순화)를 선택하세요","level":3,"type":"heading","anchor":"%E2%9C%85-DI%EB%8B%A8%EC%88%9C%ED%99%94%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%98%EC%84%B8%EC%9A%94"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"프로토타입 개발","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"학습 목적","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"매우 간단한 프로젝트","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"최소한의 의존성 관리만 필요한 경우","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"💡 Best Practice","level":3,"type":"heading","anchor":"%F0%9F%92%A1-Best-Practice"},{"type":"paragraph","inlineContent":[{"type":"text","text":"대부분의 경우 "},{"type":"strong","inlineContent":[{"type":"text","text":"UnifiedDI"}]},{"type":"text","text":"를 사용하는 것을 권장합니다. 더 많은 기능을 제공하면서도 필요한 만큼만 사용할 수 있어 확장성이 뛰어나기 때문입니다."}]},{"syntax":"swift","type":"codeListing","code":["\/\/ 권장 패턴: UnifiedDI로 시작하여 필요에 따라 기능 확장","@main","struct MyApp: App {","    init() {","        Task {","            await setupDependencies()","        }","    }","","    private func setupDependencies() async {","        \/\/ UnifiedDI의 강력한 배치 등록 사용","        UnifiedDI.registerMany {","            \/\/ 기본 서비스들","            Registration(NetworkService.self) { NetworkServiceImpl() }","            Registration(UserService.self) { UserServiceImpl() }","","            \/\/ 환경별 조건부 등록","            Registration(AnalyticsService.self,","                        condition: !isDebug,","                        factory: { GoogleAnalytics() },","                        fallback: { NoOpAnalytics() })","        }","","        \/\/ 성능 최적화 활성화","        await UnifiedDI.enablePerformanceOptimization()","    }","}"]}],"kind":"content"}],"seeAlsoSections":[{"anchor":"핵심-컴포넌트","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/DI","doc:\/\/DiContainer\/documentation\/DiContainer\/DependencyContainer","doc:\/\/DiContainer\/documentation\/DiContainer\/GlobalUnifiedRegistry","doc:\/\/DiContainer\/documentation\/DiContainer\/Inject","doc:\/\/DiContainer\/documentation\/DiContainer\/RequiredInject","doc:\/\/DiContainer\/documentation\/DiContainer\/Factory","doc:\/\/DiContainer\/documentation\/DiContainer\/FactoryValues","doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerUsage","doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerPerformance","doc:\/\/DiContainer\/documentation\/DiContainer\/Container","doc:\/\/DiContainer\/documentation\/DiContainer\/Module","doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer"],"title":"핵심 컴포넌트","generated":true}],"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://DiContainer/documentation/DiContainer/Container":{"abstract":[],"role":"symbol","kind":"symbol","title":"Container","type":"topic","url":"\/documentation\/dicontainer\/container","navigatorTitle":[{"kind":"identifier","text":"Container"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Container","fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"Container"}]},"doc://DiContainer/documentation/DiContainer/DI":{"type":"topic","url":"\/documentation\/dicontainer\/di","title":"DI","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"DI","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DI","kind":"identifier"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/DI","abstract":[{"type":"text","text":"단순화된 DI API - 사용자 혼란을 줄이기 위해 핵심 패턴만 제공"}]},"doc://DiContainer/documentation/DiContainer/AppDIContainer":{"url":"\/documentation\/dicontainer\/appdicontainer","title":"AppDIContainer","role":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer","kind":"symbol","navigatorTitle":[{"text":"AppDIContainer","kind":"identifier"}],"abstract":[],"fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AppDIContainer","kind":"identifier"}],"type":"topic"},"doc://DiContainer/documentation/DiContainer/Factory":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Factory","kind":"identifier"}],"kind":"symbol","title":"Factory","navigatorTitle":[{"text":"Factory","kind":"identifier"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Factory","type":"topic","abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/FactoryValues"},{"text":" 로부터 특정 팩토리 인스턴스를 주입받는 프로퍼티 래퍼입니다.","type":"text"}],"url":"\/documentation\/dicontainer\/factory"},"doc://DiContainer/documentation/DiContainer/FactoryValues":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryValues"}],"kind":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/FactoryValues","abstract":[{"type":"text","text":"A global container of factories used across the application."}],"type":"topic","role":"symbol","url":"\/documentation\/dicontainer\/factoryvalues","navigatorTitle":[{"text":"FactoryValues","kind":"identifier"}],"title":"FactoryValues"},"doc://DiContainer/documentation/DiContainer/ContainerUsage":{"role":"article","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerUsage","title":"Container Usage","kind":"article","type":"topic","abstract":[{"text":"DiContainer의 Container는 모듈을 수집한 뒤 한 번에 병렬 등록하여 Actor hop을 최소화합니다.","type":"text"}],"url":"\/documentation\/dicontainer\/containerusage"},"doc://DiContainer/documentation/DiContainer/Inject":{"role":"symbol","navigatorTitle":[{"text":"Inject","kind":"identifier"}],"abstract":[{"type":"text","text":"의존성을 자동으로 해결하여 주입하는 프로퍼티 래퍼입니다."}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Inject","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Inject","kind":"identifier"}],"type":"topic","title":"Inject","url":"\/documentation\/dicontainer\/inject"},"doc://DiContainer/documentation/DiContainer/DependencyContainer":{"abstract":[],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"DependencyContainer"}],"navigatorTitle":[{"kind":"identifier","text":"DependencyContainer"}],"type":"topic","url":"\/documentation\/dicontainer\/dependencycontainer","title":"DependencyContainer","role":"symbol","kind":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/DependencyContainer"},"doc://DiContainer/documentation/DiContainer/ContainerPerformance":{"url":"\/documentation\/dicontainer\/containerperformance","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerPerformance","title":"Container Performance","abstract":[{"type":"text","text":"Container는 모듈 배열을 스냅샷한 뒤 TaskGroup으로 병렬 등록하여 불필요한 actor hop을 줄입니다."}],"type":"topic","role":"article","kind":"article"},"doc://DiContainer/documentation/DiContainer/GlobalUnifiedRegistry":{"role":"symbol","type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/GlobalUnifiedRegistry","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"GlobalUnifiedRegistry","kind":"identifier"},{"text":": ","kind":"text"},{"text":"UnifiedRegistry","preciseIdentifier":"s:11DiContainer15UnifiedRegistryC","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"글로벌 통합 Registry 인스턴스"},{"type":"text","text":" "},{"type":"text","text":"DependencyContainer.live에서 내부적으로 사용"}],"kind":"symbol","title":"GlobalUnifiedRegistry","url":"\/documentation\/dicontainer\/globalunifiedregistry"},"doc://DiContainer/documentation/DiContainer/RequiredInject":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequiredInject","kind":"identifier"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/RequiredInject","title":"RequiredInject","navigatorTitle":[{"text":"RequiredInject","kind":"identifier"}],"url":"\/documentation\/dicontainer\/requiredinject","type":"topic","abstract":[{"text":"의존성을 필수적으로 해결하여 주입하는 프로퍼티 래퍼입니다.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://DiContainer/documentation/DiContainer/Module":{"kind":"symbol","url":"\/documentation\/dicontainer\/module","title":"Module","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Module"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Module","abstract":[{"code":"Module","type":"codeVoice"},{"type":"text","text":"은 DI(의존성 주입)를 위한 "},{"inlineContent":[{"text":"단일 모듈","type":"text"}],"type":"strong"},{"type":"text","text":"을 나타내는 구조체입니다."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Module"}]},"doc://DiContainer/documentation/DiContainer":{"title":"DiContainer","url":"\/documentation\/dicontainer","kind":"symbol","abstract":[{"type":"text","text":"현대적인 Swift Concurrency와 Actor 모델을 위해 설계된 고성능 의존성 주입 프레임워크"}],"type":"topic","role":"collection","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer"}}}