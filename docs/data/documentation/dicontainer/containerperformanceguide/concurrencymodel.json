{"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer","doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerPerformanceGuide"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"concurrencyModel"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"}],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"level":2,"anchor":"%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%AA%A8%EB%8D%B8","text":"동시성 모델","type":"heading"},{"level":3,"anchor":"Actor-%EA%B8%B0%EB%B0%98-%EC%95%88%EC%A0%84%EC%84%B1","text":"Actor 기반 안전성","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"내부 상태 변경은 actor의 직렬 실행 큐에서만 발생"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"외부에서의 동시 접근이 자동으로 동기화됨"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"데이터 경쟁 조건 완전 차단","type":"text"}]}]}],"type":"unorderedList"},{"level":3,"anchor":"Task-Group-%ED%99%9C%EC%9A%A9","text":"Task Group 활용","type":"heading"},{"code":["\/\/ 내부 구현 예시 (실제 코드)","await withTaskGroup(of: Void.self) { group in","    for module in modules {","        group.addTask { @Sendable in","            await module.register() \/\/ 각 모듈이 병렬 등록","        }","    }","    await group.waitForAll() \/\/ 모든 등록 완료까지 대기","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"identifier":{"url":"doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerPerformanceGuide\/concurrencyModel","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/dicontainer\/containerperformanceguide\/concurrencymodel"]}],"sections":[],"metadata":{"roleHeading":"Type Property","modules":[{"name":"DiContainer"}],"symbolKind":"property","role":"symbol","externalID":"s:11DiContainer0B16PerformanceGuideO16concurrencyModelSSvpZ","title":"concurrencyModel","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"concurrencyModel","kind":"identifier"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"}]},"kind":"symbol","references":{"doc://DiContainer/documentation/DiContainer/ContainerPerformanceGuide":{"url":"\/documentation\/dicontainer\/containerperformanceguide","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ContainerPerformanceGuide","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerPerformanceGuide","title":"ContainerPerformanceGuide","role":"symbol","abstract":[{"type":"text","text":"Container 성능 특성에 대한 상세 문서"}],"kind":"symbol","navigatorTitle":[{"text":"ContainerPerformanceGuide","kind":"identifier"}]},"doc://DiContainer/documentation/DiContainer":{"type":"topic","title":"DiContainer","abstract":[{"type":"text","text":"현대적인 Swift Concurrency와 Actor 모델을 위해 설계된 고성능 의존성 주입 프레임워크"}],"role":"collection","url":"\/documentation\/dicontainer","kind":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer"},"doc://DiContainer/documentation/DiContainer/ContainerPerformanceGuide/concurrencyModel":{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerPerformanceGuide\/concurrencyModel","title":"concurrencyModel","url":"\/documentation\/dicontainer\/containerperformanceguide\/concurrencymodel","abstract":[],"kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"concurrencyModel"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"}]}}}