{"kind":"article","abstract":[{"type":"text","text":"DiContainer의 강력한 플러그인 시스템을 통해 의존성 주입 동작을 확장하고 커스터마이징할 수 있습니다."}],"sections":[],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"%F0%9F%93%8A-%EA%B0%9C%EC%9A%94","text":"📊 개요"},{"type":"paragraph","inlineContent":[{"text":"플러그인 시스템의 주요 기능:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"의존성 생성\/해결 라이프사이클 훅"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"커스텀 로깅 및 모니터링"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"성능 추적 및 메트릭 수집"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"조건부 의존성 해결"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"테스트 환경 지원"}]}]}]},{"type":"heading","level":2,"anchor":"%F0%9F%8F%97-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98","text":"🏗 플러그인 아키텍처"},{"type":"heading","level":3,"anchor":"%EA%B8%B0%EB%B3%B8-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4","text":"기본 플러그인 인터페이스"},{"type":"codeListing","syntax":"swift","code":["public protocol DIPlugin: Sendable {","    var name: String { get }","    var priority: Int { get }","","    \/\/ 라이프사이클 훅","    func willRegister<T>(type: T.Type, factory: @escaping () -> T)","    func didRegister<T>(type: T.Type)","    func willResolve<T>(type: T.Type)","    func didResolve<T>(type: T.Type, instance: T)","    func resolutionFailed<T>(type: T.Type, error: Error)","}"]},{"type":"heading","level":3,"anchor":"%EC%A0%84%EB%AC%B8%ED%99%94%EB%90%9C-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%ED%83%80%EC%9E%85","text":"전문화된 플러그인 타입"},{"type":"codeListing","syntax":"swift","code":["\/\/ 로깅 전용 플러그인","public protocol LoggingPlugin: DIPlugin {","    func logRegistration<T>(type: T.Type, timestamp: Date)","    func logResolution<T>(type: T.Type, duration: TimeInterval)","}","","\/\/ 성능 모니터링 플러그인","public protocol PerformancePlugin: DIPlugin {","    func recordMetric(name: String, value: Double, tags: [String: String])","    func startTimer(name: String) -> TimerToken","    func endTimer(token: TimerToken)","}","","\/\/ 조건부 해결 플러그인","public protocol ConditionalPlugin: DIPlugin {","    func shouldResolve<T>(type: T.Type, context: ResolutionContext) -> Bool","    func provideAlternative<T>(type: T.Type) -> T?","}"]},{"type":"heading","level":2,"anchor":"%F0%9F%9A%80-%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9%EB%B2%95","text":"🚀 기본 사용법"},{"type":"heading","level":3,"anchor":"1-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EB%93%B1%EB%A1%9D","text":"1. 플러그인 등록"},{"code":["\/\/ 단일 플러그인 등록","PluginManager.shared.register(LoggingPlugin())","","\/\/ 여러 플러그인 등록","PluginManager.shared.register([","    LoggingPlugin(),","    PerformancePlugin(),","    DebugPlugin()","])","","\/\/ 우선순위 지정 등록","PluginManager.shared.register(CustomPlugin(), priority: 100)"],"type":"codeListing","syntax":"swift"},{"text":"2. 플러그인 비활성화\/제거","anchor":"2-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EB%B9%84%ED%99%9C%EC%84%B1%ED%99%94%EC%A0%9C%EA%B1%B0","level":3,"type":"heading"},{"code":["\/\/ 특정 플러그인 비활성화","PluginManager.shared.disable(\"LoggingPlugin\")","","\/\/ 플러그인 제거","PluginManager.shared.unregister(\"LoggingPlugin\")","","\/\/ 모든 플러그인 제거","PluginManager.shared.unregisterAll()"],"type":"codeListing","syntax":"swift"},{"text":"📝 내장 플러그인","anchor":"%F0%9F%93%9D-%EB%82%B4%EC%9E%A5-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8","level":2,"type":"heading"},{"type":"heading","level":3,"text":"로깅 플러그인","anchor":"%EB%A1%9C%EA%B9%85-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8"},{"code":["\/\/ 기본 로깅 플러그인","let loggingPlugin = ExampleLoggingPlugin()","PluginManager.shared.register(loggingPlugin)","","\/\/ 커스텀 로깅 설정","let customLogging = ExampleLoggingPlugin(","    logLevel: .debug,","    includeTimestamp: true,","    includeTypeInfo: true",")","PluginManager.shared.register(customLogging)"],"type":"codeListing","syntax":"swift"},{"text":"성능 모니터링 플러그인","anchor":"%EC%84%B1%EB%8A%A5-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8","level":3,"type":"heading"},{"code":["\/\/ 성능 추적 플러그인","let performancePlugin = PerformanceMonitoringPlugin()","PluginManager.shared.register(performancePlugin)","","\/\/ 메트릭 확인","let metrics = performancePlugin.getMetrics()","print(\"평균 해결 시간: \\(metrics.averageResolutionTime)ms\")","print(\"총 해결 횟수: \\(metrics.totalResolutions)\")"],"type":"codeListing","syntax":"swift"},{"text":"디버그 플러그인","anchor":"%EB%94%94%EB%B2%84%EA%B7%B8-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8","level":3,"type":"heading"},{"code":["\/\/ 개발 환경에서만 활성화","#if DEBUG","let debugPlugin = DebugInformationPlugin(","    trackDependencyChain: true,","    validateCircularDependencies: true,","    logMemoryUsage: true",")","PluginManager.shared.register(debugPlugin)","#endif"],"type":"codeListing","syntax":"swift"},{"text":"🛠 커스텀 플러그인 개발","anchor":"%F0%9F%9B%A0-%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EA%B0%9C%EB%B0%9C","level":2,"type":"heading"},{"anchor":"%EA%B8%B0%EB%B3%B8-%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8","text":"기본 커스텀 플러그인","type":"heading","level":3},{"code":["public class MyCustomPlugin: DIPlugin {","    public let name = \"MyCustomPlugin\"","    public let priority = 50","","    public func willRegister<T>(type: T.Type, factory: @escaping () -> T) {","        #logInfo(\"등록 준비: \\(T.self)\")","    }","","    public func didRegister<T>(type: T.Type) {","        #logInfo(\"등록 완료: \\(T.self)\")","    }","","    public func willResolve<T>(type: T.Type) {","        #logDebug(\"해결 시작: \\(T.self)\")","    }","","    public func didResolve<T>(type: T.Type, instance: T) {","        #logDebug(\"해결 완료: \\(T.self)\")","    }","","    public func resolutionFailed<T>(type: T.Type, error: Error) {","        #logError(\"해결 실패: \\(T.self) - \\(error)\")","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"고급 로깅 플러그인","anchor":"%EA%B3%A0%EA%B8%89-%EB%A1%9C%EA%B9%85-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8","level":3,"type":"heading"},{"code":["public class AdvancedLoggingPlugin: LoggingPlugin {","    public let name = \"AdvancedLoggingPlugin\"","    public let priority = 75","","    private var resolutionTimes: [String: Date] = [:]","    private let queue = DispatchQueue(label: \"logging-plugin\")","","    public func logRegistration<T>(type: T.Type, timestamp: Date) {","        let typeName = String(describing: T.self)","        #logInfo(\"📝 [\\(timestamp)] 등록: \\(typeName)\")","    }","","    public func logResolution<T>(type: T.Type, duration: TimeInterval) {","        let typeName = String(describing: T.self)","        #logDebug(\"⚡ 해결: \\(typeName) (\\(duration * 1000)ms)\")","    }","","    public func willResolve<T>(type: T.Type) {","        queue.async {","            self.resolutionTimes[String(describing: T.self)] = Date()","        }","    }","","    public func didResolve<T>(type: T.Type, instance: T) {","        let typeName = String(describing: T.self)","        queue.async {","            if let startTime = self.resolutionTimes.removeValue(forKey: typeName) {","                let duration = Date().timeIntervalSince(startTime)","                self.logResolution(type: T.self, duration: duration)","            }","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"조건부 해결 플러그인","anchor":"%EC%A1%B0%EA%B1%B4%EB%B6%80-%ED%95%B4%EA%B2%B0-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8","level":3,"type":"heading"},{"code":["public class ConditionalResolutionPlugin: ConditionalPlugin {","    public let name = \"ConditionalResolutionPlugin\"","    public let priority = 90","","    private let testMode: Bool","","    public init(testMode: Bool = false) {","        self.testMode = testMode","    }","","    public func shouldResolve<T>(type: T.Type, context: ResolutionContext) -> Bool {","        \/\/ 테스트 모드에서는 특정 타입들을 제한","        if testMode && String(describing: T.self).contains(\"Network\") {","            return false","        }","        return true","    }","","    public func provideAlternative<T>(type: T.Type) -> T? {","        if testMode && T.self == NetworkService.self {","            return MockNetworkService() as? T","        }","        return nil","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"📊 메트릭 및 모니터링","anchor":"%F0%9F%93%8A-%EB%A9%94%ED%8A%B8%EB%A6%AD-%EB%B0%8F-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81","level":2,"type":"heading"},{"text":"성능 메트릭 수집","anchor":"%EC%84%B1%EB%8A%A5-%EB%A9%94%ED%8A%B8%EB%A6%AD-%EC%88%98%EC%A7%91","level":3,"type":"heading"},{"code":["public class MetricsCollectionPlugin: PerformancePlugin {","    public let name = \"MetricsCollectionPlugin\"","    public let priority = 60","","    private var metrics: [String: Double] = [:]","    private var timers: [TimerToken: Date] = [:]","","    public func recordMetric(name: String, value: Double, tags: [String: String] = [:]) {","        metrics[name] = value","        #logDebug(\"📊 메트릭 기록: \\(name) = \\(value)\")","    }","","    public func startTimer(name: String) -> TimerToken {","        let token = TimerToken(name: name)","        timers[token] = Date()","        return token","    }","","    public func endTimer(token: TimerToken) {","        guard let startTime = timers.removeValue(forKey: token) else { return }","        let duration = Date().timeIntervalSince(startTime)","        recordMetric(name: \"\\(token.name)_duration\", value: duration * 1000)","    }","","    public func getMetrics() -> [String: Double] {","        return metrics","    }","}","","public struct TimerToken: Hashable {","    let name: String","    let id = UUID()","}"],"type":"codeListing","syntax":"swift"},{"text":"메모리 사용량 추적","anchor":"%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%82%AC%EC%9A%A9%EB%9F%89-%EC%B6%94%EC%A0%81","level":3,"type":"heading"},{"type":"codeListing","code":["public class MemoryTrackingPlugin: DIPlugin {","    public let name = \"MemoryTrackingPlugin\"","    public let priority = 40","","    private var instanceCounts: [String: Int] = [:]","","    public func didResolve<T>(type: T.Type, instance: T) {","        let typeName = String(describing: T.self)","        instanceCounts[typeName, default: 0] += 1","","        #logDebug(\"🧠 메모리 추적: \\(typeName) (\\(instanceCounts[typeName]!)개 인스턴스)\")","    }","","    public func getInstanceCounts() -> [String: Int] {","        return instanceCounts","    }","","    public func resetCounts() {","        instanceCounts.removeAll()","    }","}"],"syntax":"swift"},{"text":"🧪 테스트 환경 플러그인","type":"heading","level":2,"anchor":"%F0%9F%A7%AA-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8"},{"text":"테스트 전용 플러그인","type":"heading","level":3,"anchor":"%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A0%84%EC%9A%A9-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8"},{"type":"codeListing","code":["public class TestEnvironmentPlugin: DIPlugin {","    public let name = \"TestEnvironmentPlugin\"","    public let priority = 100","","    private var mockMappings: [String: Any] = [:]","","    public func addMockMapping<T, Mock>(for type: T.Type, mock: Mock) {","        mockMappings[String(describing: T.self)] = mock","    }","","    public func willResolve<T>(type: T.Type) {","        let typeName = String(describing: T.self)","        if let mock = mockMappings[typeName] as? T {","            #logInfo(\"🧪 테스트 모킹: \\(typeName)\")","        }","    }","}","","\/\/ 사용 예시","let testPlugin = TestEnvironmentPlugin()","testPlugin.addMockMapping(for: NetworkService.self, mock: MockNetworkService())","testPlugin.addMockMapping(for: DatabaseService.self, mock: MockDatabaseService())","PluginManager.shared.register(testPlugin)"],"syntax":"swift"},{"text":"🔧 플러그인 체인 및 우선순위","type":"heading","level":2,"anchor":"%F0%9F%94%A7-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%B2%B4%EC%9D%B8-%EB%B0%8F-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84"},{"text":"우선순위 시스템","type":"heading","level":3,"anchor":"%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%EC%8B%9C%EC%8A%A4%ED%85%9C"},{"type":"codeListing","code":["\/\/ 높은 우선순위 (먼저 실행)","PluginManager.shared.register(SecurityPlugin(), priority: 100)","PluginManager.shared.register(ValidationPlugin(), priority: 90)","PluginManager.shared.register(LoggingPlugin(), priority: 50)","PluginManager.shared.register(MetricsPlugin(), priority: 10)","","\/\/ 실행 순서: Security → Validation → Logging → Metrics"],"syntax":"swift"},{"text":"조건부 플러그인 활성화","type":"heading","level":3,"anchor":"%EC%A1%B0%EA%B1%B4%EB%B6%80-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%ED%99%9C%EC%84%B1%ED%99%94"},{"type":"codeListing","code":["\/\/ 환경별 플러그인 설정","#if DEBUG","PluginManager.shared.register([","    DebugInformationPlugin(),","    PerformanceMonitoringPlugin(),","    MemoryTrackingPlugin()","])","#endif","","#if TESTING","PluginManager.shared.register([","    TestEnvironmentPlugin(),","    MockingPlugin()","])","#endif","","#if PRODUCTION","PluginManager.shared.register([","    ProductionLoggingPlugin(),","    ErrorReportingPlugin()","])","#endif"],"syntax":"swift"},{"text":"📚 실제 사용 사례","type":"heading","level":2,"anchor":"%F0%9F%93%9A-%EC%8B%A4%EC%A0%9C-%EC%82%AC%EC%9A%A9-%EC%82%AC%EB%A1%80"},{"text":"앱 시작 시 플러그인 설정","type":"heading","level":3,"anchor":"%EC%95%B1-%EC%8B%9C%EC%9E%91-%EC%8B%9C-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%84%A4%EC%A0%95"},{"type":"codeListing","code":["@main","class AppDelegate: UIResponder, UIApplicationDelegate {","","    func application(","        _ application: UIApplication,","        didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?","    ) -> Bool {","","        \/\/ 플러그인 설정","        setupPlugins()","","        \/\/ DI 컨테이너 부트스트랩","        Task {","            await DependencyContainer.bootstrap { container in","                \/\/ 의존성 등록...","            }","        }","","        return true","    }","","    private func setupPlugins() {","        #if DEBUG","        PluginManager.shared.register([","            ExampleLoggingPlugin(logLevel: .debug),","            PerformanceMonitoringPlugin(),","            DebugInformationPlugin()","        ])","        #else","        PluginManager.shared.register([","            ExampleLoggingPlugin(logLevel: .info),","            ErrorReportingPlugin()","        ])","        #endif","    }","}"],"syntax":"swift"},{"text":"단위 테스트에서 플러그인 사용","type":"heading","level":3,"anchor":"%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%97%90%EC%84%9C-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%82%AC%EC%9A%A9"},{"type":"codeListing","code":["class DIContainerTests: XCTestCase {","","    override func setUp() {","        super.setUp()","","        \/\/ 테스트용 플러그인 설정","        let testPlugin = TestEnvironmentPlugin()","        testPlugin.addMockMapping(for: NetworkService.self, mock: MockNetworkService())","        PluginManager.shared.register(testPlugin)","    }","","    override func tearDown() {","        PluginManager.shared.unregisterAll()","        super.tearDown()","    }","","    func testDependencyResolution() {","        \/\/ 플러그인이 자동으로 모킹 처리","        let service: NetworkService = DI.resolve()","        XCTAssertTrue(service is MockNetworkService)","    }","}"],"syntax":"swift"},{"text":"💡 팁과 권장사항","type":"heading","level":2,"anchor":"%F0%9F%92%A1-%ED%8C%81%EA%B3%BC-%EA%B6%8C%EC%9E%A5%EC%82%AC%ED%95%AD"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"우선순위 설계"}]},{"text":": 플러그인 간 실행 순서를 신중히 고려하세요","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"성능 고려"}]},{"text":": 무거운 작업은 백그라운드 큐에서 처리하세요","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"메모리 관리","type":"text"}]},{"type":"text","text":": 플러그인에서 강한 참조를 피하세요"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"조건부 활성화"}]},{"text":": 환경별로 적절한 플러그인만 활성화하세요","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"테스트 격리"}]},{"type":"text","text":": 테스트에서 플러그인 상태를 깔끔히 정리하세요"}]}]}]},{"text":"🔗 관련 문서","type":"heading","level":2,"anchor":"%F0%9F%94%97-%EA%B4%80%EB%A0%A8-%EB%AC%B8%EC%84%9C"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"CoreAPIs.md","type":"reference","isActive":true},{"type":"text","text":" - 핵심 API 가이드"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"DependencyGraphUsage.md","type":"reference"},{"text":" - 의존성 그래프 사용법","type":"text"}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"PropertyWrappers.md","type":"reference"},{"text":" - 프로퍼티 래퍼 가이드","type":"text"}],"type":"paragraph"}]}]}]}],"variants":[{"paths":["\/documentation\/dicontainer\/pluginsystemusage"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"role":"article","modules":[{"name":"DiContainer"}],"roleHeading":"Article","title":"플러그인 시스템 가이드"},"identifier":{"url":"doc:\/\/DiContainer\/documentation\/DiContainer\/PluginSystemUsage","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"references":{"PropertyWrappers.md":{"type":"link","title":"PropertyWrappers","url":"PropertyWrappers.md","identifier":"PropertyWrappers.md","titleInlineContent":[{"text":"PropertyWrappers","type":"text"}]},"DependencyGraphUsage.md":{"identifier":"DependencyGraphUsage.md","title":"DependencyGraphUsage","titleInlineContent":[{"text":"DependencyGraphUsage","type":"text"}],"type":"link","url":"DependencyGraphUsage.md"},"CoreAPIs.md":{"identifier":"CoreAPIs.md","url":"CoreAPIs.md","titleInlineContent":[{"type":"text","text":"CoreAPIs"}],"type":"link","title":"CoreAPIs"},"doc://DiContainer/documentation/DiContainer":{"abstract":[{"type":"text","text":"현대적인 Swift Concurrency와 Actor 모델을 위해 설계된 고성능 의존성 주입 프레임워크"}],"kind":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","role":"collection","title":"DiContainer","type":"topic","url":"\/documentation\/dicontainer"}}}