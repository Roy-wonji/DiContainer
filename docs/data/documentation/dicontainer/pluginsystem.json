{"kind":"article","hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/DiContainer\/documentation\/DiContainer\/PluginSystem","interfaceLanguage":"swift"},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"개요","type":"heading","anchor":"%EA%B0%9C%EC%9A%94"},{"inlineContent":[{"text":"DiContainer의 플러그인 시스템은 의존성 등록, 해결, 생명주기 관리 등의 모든 단계에서 커스텀 로직을 삽입할 수 있는 확장 가능한 아키텍처를 제공합니다. 로깅, 성능 모니터링, 검증, 자동 탐지 등 다양한 기능을 플러그인을 통해 구현할 수 있습니다.","type":"text"}],"type":"paragraph"},{"level":2,"text":"플러그인 아키텍처","type":"heading","anchor":"%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98"},{"level":3,"text":"핵심 구성요소","type":"heading","anchor":"%ED%95%B5%EC%8B%AC-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C"},{"code":["\/\/ 1. 베이스 플러그인 - 모든 플러그인의 기본 클래스","open class BasePlugin: @unchecked Sendable {","    public let id: String","    public let priority: PluginPriority","","    public init(id: String, priority: PluginPriority = .normal) {","        self.id = id","        self.priority = priority","    }","","    \/\/ 플러그인 생명주기","    open func willLoad() async { }","    open func didLoad() async { }","    open func willUnload() async { }","    open func didUnload() async { }","}","","\/\/ 2. 플러그인 타입별 프로토콜","public protocol RegistrationPlugin: Plugin {","    func beforeRegistration<T>(_ type: T.Type, factory: @escaping () -> T)","    func afterRegistration<T>(_ type: T.Type, instance: T)","}","","public protocol ResolutionPlugin: Plugin {","    func beforeResolution<T>(_ type: T.Type) -> T?","    func afterResolution<T>(_ type: T.Type, instance: T) -> T","}","","public protocol LifecyclePlugin: Plugin {","    func onContainerCreated(_ container: DependencyContainer)","    func onContainerDestroyed(_ container: DependencyContainer)","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"플러그인 우선순위","type":"heading","anchor":"%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84"},{"code":["public enum PluginPriority: Int, Comparable {","    case highest = 1000","    case high = 750","    case normal = 500","    case low = 250","    case lowest = 100","","    public static func < (lhs: PluginPriority, rhs: PluginPriority) -> Bool {","        return lhs.rawValue < rhs.rawValue","    }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"내장 플러그인","type":"heading","anchor":"%EB%82%B4%EC%9E%A5-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8"},{"level":3,"text":"1. 로깅 플러그인","type":"heading","anchor":"1-%EB%A1%9C%EA%B9%85-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8"},{"inlineContent":[{"text":"모든 DI 활동을 로그로 기록합니다.","type":"text"}],"type":"paragraph"},{"code":["public final class LoggingPlugin: BasePlugin, RegistrationPlugin, ResolutionPlugin, LifecyclePlugin {","","    private let logLevel: LogLevel","    private let logger: Logger","","    public init(logLevel: LogLevel = .info, logger: Logger = .default) {","        self.logLevel = logLevel","        self.logger = logger","        super.init(id: \"com.dicontainer.logging\", priority: .high)","    }","","    \/\/ 등록 시 로깅","    public func beforeRegistration<T>(_ type: T.Type, factory: @escaping () -> T) {","        logger.log(\"📝 Registering \\(String(describing: type))\", level: logLevel)","    }","","    public func afterRegistration<T>(_ type: T.Type, instance: T) {","        logger.log(\"✅ Registered \\(String(describing: type))\", level: logLevel)","    }","","    \/\/ 해결 시 로깅","    public func beforeResolution<T>(_ type: T.Type) -> T? {","        logger.log(\"🔍 Resolving \\(String(describing: type))\", level: logLevel)","        return nil \/\/ 실제 해결은 컨테이너가 수행","    }","","    public func afterResolution<T>(_ type: T.Type, instance: T) -> T {","        logger.log(\"✨ Resolved \\(String(describing: type))\", level: logLevel)","        return instance","    }","","    \/\/ 생명주기 로깅","    public func onContainerCreated(_ container: DependencyContainer) {","        logger.log(\"🚀 DI Container created\", level: .info)","    }","}","","\/\/ 사용법","DI.addPlugin(LoggingPlugin(logLevel: .debug))"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"2. 성능 모니터링 플러그인","type":"heading","anchor":"2-%EC%84%B1%EB%8A%A5-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8"},{"inlineContent":[{"type":"text","text":"DI 성능 메트릭스를 추적합니다."}],"type":"paragraph"},{"code":["public final class PerformanceMonitoringPlugin: BasePlugin, ResolutionPlugin, MonitoringPlugin {","","    private var resolutionTimes: [String: [TimeInterval]] = [:]","    private var resolutionCounts: [String: Int] = [:]","    private let queue = DispatchQueue(label: \"performance-monitoring\", attributes: .concurrent)","","    public override init() {","        super.init(id: \"com.dicontainer.performance\", priority: .normal)","    }","","    public func beforeResolution<T>(_ type: T.Type) -> T? {","        let typeName = String(describing: type)","        markResolutionStart(for: typeName)","        return nil","    }","","    public func afterResolution<T>(_ type: T.Type, instance: T) -> T {","        let typeName = String(describing: type)","        markResolutionEnd(for: typeName)","        return instance","    }","","    private func markResolutionStart(for typeName: String) {","        queue.async(flags: .barrier) {","            self.resolutionStartTimes[typeName] = CFAbsoluteTimeGetCurrent()","        }","    }","","    private func markResolutionEnd(for typeName: String) {","        let endTime = CFAbsoluteTimeGetCurrent()","","        queue.async(flags: .barrier) {","            guard let startTime = self.resolutionStartTimes[typeName] else { return }","","            let duration = endTime - startTime","            self.resolutionTimes[typeName, default: []].append(duration)","            self.resolutionCounts[typeName, default: 0] += 1","","            self.resolutionStartTimes.removeValue(forKey: typeName)","        }","    }","","    \/\/ 성능 리포트 생성","    public func generateReport() -> PerformanceReport {","        return queue.sync {","            var metrics: [String: PerformanceMetric] = [:]","","            for (typeName, times) in resolutionTimes {","                let avgTime = times.reduce(0, +) \/ Double(times.count)","                let maxTime = times.max() ?? 0","                let minTime = times.min() ?? 0","                let count = resolutionCounts[typeName] ?? 0","","                metrics[typeName] = PerformanceMetric(","                    averageTime: avgTime,","                    maxTime: maxTime,","                    minTime: minTime,","                    totalResolutions: count","                )","            }","","            return PerformanceReport(metrics: metrics)","        }","    }","}","","\/\/ 사용법","let performancePlugin = PerformanceMonitoringPlugin()","DI.addPlugin(performancePlugin)","","\/\/ 리포트 확인","let report = performancePlugin.generateReport()","print(\"평균 해결 시간: \\(report.averageResolutionTime)ms\")"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"3. 검증 플러그인","type":"heading","anchor":"3-%EA%B2%80%EC%A6%9D-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8"},{"inlineContent":[{"text":"의존성 등록\/해결을 검증합니다.","type":"text"}],"type":"paragraph"},{"code":["public final class DependencyValidationPlugin: BasePlugin, ValidationPlugin {","","    private let rules: [ValidationRule]","","    public init(rules: [ValidationRule]) {","        self.rules = rules","        super.init(id: \"com.dicontainer.validation\", priority: .highest)","    }","","    public func validateRegistration<T>(_ type: T.Type, factory: @escaping () -> T) throws {","        for rule in rules {","            try rule.validateRegistration(type, factory: factory)","        }","    }","","    public func validateResolution<T>(_ type: T.Type, instance: T?) throws {","        for rule in rules {","            try rule.validateResolution(type, instance: instance)","        }","    }","}","","\/\/ 검증 규칙 예시","public struct SingletonValidationRule: ValidationRule {","    public func validateRegistration<T>(_ type: T.Type, factory: @escaping () -> T) throws {","        \/\/ 싱글톤 패턴 검증 로직","        if isSingletonType(type) && hasMultipleRegistrations(type) {","            throw ValidationError.multipleSingletonRegistration(String(describing: type))","        }","    }","}","","\/\/ 사용법","let validationPlugin = DependencyValidationPlugin(rules: [","    SingletonValidationRule(),","    CircularDependencyRule(),","    ThreadSafetyRule()","])","DI.addPlugin(validationPlugin)"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"커스텀 플러그인 개발","type":"heading","anchor":"%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EA%B0%9C%EB%B0%9C"},{"level":3,"text":"기본 플러그인 생성","type":"heading","anchor":"%EA%B8%B0%EB%B3%B8-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%83%9D%EC%84%B1"},{"code":["\/\/ 간단한 디버깅 플러그인","public final class DebugPlugin: BasePlugin, ResolutionPlugin {","","    private var resolutionCount = 0","","    public override init() {","        super.init(id: \"com.myapp.debug\", priority: .low)","    }","","    public func afterResolution<T>(_ type: T.Type, instance: T) -> T {","        resolutionCount += 1","","        #if DEBUG","        print(\"🐛 [Debug] Resolved \\(String(describing: type)) (총 \\(resolutionCount)회 해결)\")","","        \/\/ 메모리 사용량 체크","        if resolutionCount % 10 == 0 {","            let memoryUsage = getMemoryUsage()","            print(\"🐛 [Debug] 현재 메모리 사용량: \\(memoryUsage)MB\")","        }","        #endif","","        return instance","    }","","    private func getMemoryUsage() -> Int {","        var info = mach_task_basic_info()","        var count = mach_msg_type_number_t(MemoryLayout<mach_task_basic_info>.size)\/4","","        let kerr: kern_return_t = withUnsafeMutablePointer(to: &info) {","            $0.withMemoryRebound(to: integer_t.self, capacity: 1) {","                task_info(mach_task_self_,","                         task_flavor_t(MACH_TASK_BASIC_INFO),","                         $0,","                         &count)","            }","        }","","        if kerr == KERN_SUCCESS {","            return Int(info.resident_size) \/ 1024 \/ 1024","        }","        return 0","    }","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"고급 플러그인 - 자동 탐지","type":"heading","anchor":"%EA%B3%A0%EA%B8%89-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%9E%90%EB%8F%99-%ED%83%90%EC%A7%80"},{"code":["\/\/ 자동으로 특정 패키지의 타입을 탐지하고 등록하는 플러그인","public final class AutoDiscoveryPlugin: BasePlugin, RegistrationPlugin {","","    private let packagePrefixes: [String]","    private let discoveryQueue = DispatchQueue(label: \"auto-discovery\", qos: .background)","","    public init(packagePrefixes: [String]) {","        self.packagePrefixes = packagePrefixes","        super.init(id: \"com.dicontainer.autodiscovery\", priority: .high)","    }","","    public override func didLoad() async {","        await discoverAndRegisterTypes()","    }","","    private func discoverAndRegisterTypes() async {","        return await withTaskGroup(of: Void.self) { group in","            for prefix in packagePrefixes {","                group.addTask {","                    await self.discoverTypes(withPrefix: prefix)","                }","            }","        }","    }","","    private func discoverTypes(withPrefix prefix: String) async {","        \/\/ 런타임 타입 탐지 (실제 구현은 더 복잡함)","        let discoveredTypes = await scanTypesWithPrefix(prefix)","","        for type in discoveredTypes {","            if conformsToAutoRegistrable(type) {","                await registerDiscoveredType(type)","            }","        }","    }","","    public func beforeRegistration<T>(_ type: T.Type, factory: @escaping () -> T) {","        let typeName = String(describing: type)","        print(\"🔍 [AutoDiscovery] Auto-registering \\(typeName)\")","    }","}","","\/\/ 자동 등록 가능한 타입을 위한 프로토콜","public protocol AutoRegistrable {","    static func createInstance() -> Self","}","","\/\/ 사용법","DI.addPlugin(AutoDiscoveryPlugin(packagePrefixes: [","    \"com.myapp.services\",","    \"com.myapp.repositories\"","]))"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"설정 기반 플러그인","type":"heading","anchor":"%EC%84%A4%EC%A0%95-%EA%B8%B0%EB%B0%98-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8"},{"code":["\/\/ 설정 파일을 기반으로 의존성을 관리하는 플러그인","public final class ConfigurationPlugin: BasePlugin, RegistrationPlugin, LifecyclePlugin {","","    private let configurationPath: String","    private var configuration: DIConfiguration?","","    public init(configurationPath: String) {","        self.configurationPath = configurationPath","        super.init(id: \"com.dicontainer.configuration\", priority: .highest)","    }","","    public override func willLoad() async {","        do {","            configuration = try await loadConfiguration()","            await registerConfiguredDependencies()","        } catch {","            print(\"❌ [Configuration] 설정 로드 실패: \\(error)\")","        }","    }","","    private func loadConfiguration() async throws -> DIConfiguration {","        let data = try Data(contentsOf: URL(fileURLWithPath: configurationPath))","        return try JSONDecoder().decode(DIConfiguration.self, from: data)","    }","","    private func registerConfiguredDependencies() async {","        guard let config = configuration else { return }","","        for dependency in config.dependencies {","            await registerDependency(dependency)","        }","    }","","    private func registerDependency(_ dependency: DIConfiguration.Dependency) async {","        \/\/ 설정 기반 등록 로직","        switch dependency.scope {","        case .singleton:","            \/\/ 싱글톤으로 등록","            break","        case .transient:","            \/\/ 매번 새로운 인스턴스로 등록","            break","        case .scoped:","            \/\/ 스코프 기반으로 등록","            break","        }","    }","}","","\/\/ 설정 모델","struct DIConfiguration: Codable {","    let dependencies: [Dependency]","","    struct Dependency: Codable {","        let type: String","        let implementation: String","        let scope: Scope","","        enum Scope: String, Codable {","            case singleton","            case transient","            case scoped","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"플러그인 관리","type":"heading","anchor":"%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EA%B4%80%EB%A6%AC"},{"level":3,"text":"플러그인 등록 및 제거","type":"heading","anchor":"%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EB%93%B1%EB%A1%9D-%EB%B0%8F-%EC%A0%9C%EA%B1%B0"},{"code":["\/\/ 플러그인 추가","let loggingPlugin = LoggingPlugin(logLevel: .debug)","DI.addPlugin(loggingPlugin)","","\/\/ 여러 플러그인 동시 추가","DI.addPlugins([","    LoggingPlugin(),","    PerformanceMonitoringPlugin(),","    ValidationPlugin()","])","","\/\/ 플러그인 제거","DI.removePlugin(withId: \"com.dicontainer.logging\")","","\/\/ 모든 플러그인 제거","DI.removeAllPlugins()","","\/\/ 플러그인 조회","let activePlugins = DI.getActivePlugins()","print(\"활성 플러그인: \\(activePlugins.map { $0.id })\")"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"플러그인 생명주기 관리","type":"heading","anchor":"%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0-%EA%B4%80%EB%A6%AC"},{"code":["\/\/ 플러그인 시스템 초기화","await DI.initializePluginSystem()","","\/\/ 플러그인 순서대로 로드","await DI.loadPlugins()","","\/\/ 플러그인 시스템 종료","await DI.shutdownPluginSystem()"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"플러그인 조합 패턴","type":"heading","anchor":"%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%A1%B0%ED%95%A9-%ED%8C%A8%ED%84%B4"},{"level":3,"text":"1. 개발\/프로덕션 환경별 플러그인","type":"heading","anchor":"1-%EA%B0%9C%EB%B0%9C%ED%94%84%EB%A1%9C%EB%8D%95%EC%85%98-%ED%99%98%EA%B2%BD%EB%B3%84-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8"},{"code":["class EnvironmentPluginManager {","    static func configurePlugins() {","        #if DEBUG","        DI.addPlugins([","            LoggingPlugin(logLevel: .debug),","            PerformanceMonitoringPlugin(),","            DebugPlugin(),","            ValidationPlugin(rules: [CircularDependencyRule()])","        ])","        #elseif RELEASE","        DI.addPlugins([","            LoggingPlugin(logLevel: .error),","            CrashReportingPlugin(),","            ProductionMonitoringPlugin()","        ])","        #endif","    }","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"2. 기능별 플러그인 세트","type":"heading","anchor":"2-%EA%B8%B0%EB%8A%A5%EB%B3%84-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%84%B8%ED%8A%B8"},{"code":["\/\/ 보안 관련 플러그인 세트","struct SecurityPluginSet {","    static var plugins: [Plugin] {","        return [","            AccessControlPlugin(),","            AuditLoggingPlugin(),","            SecurityValidationPlugin()","        ]","    }","}","","\/\/ 성능 관련 플러그인 세트","struct PerformancePluginSet {","    static var plugins: [Plugin] {","        return [","            PerformanceMonitoringPlugin(),","            CachingPlugin(),","            ProfilerPlugin()","        ]","    }","}","","\/\/ 사용","DI.addPlugins(SecurityPluginSet.plugins)","DI.addPlugins(PerformancePluginSet.plugins)"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"플러그인 테스팅","type":"heading","anchor":"%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%ED%85%8C%EC%8A%A4%ED%8C%85"},{"level":3,"text":"플러그인 단위 테스트","type":"heading","anchor":"%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8"},{"code":["class LoggingPluginTests: XCTestCase {","","    var plugin: LoggingPlugin!","    var mockLogger: MockLogger!","","    override func setUp() {","        mockLogger = MockLogger()","        plugin = LoggingPlugin(logger: mockLogger)","    }","","    func testRegistrationLogging() {","        \/\/ Given","        let expectation = XCTestExpectation(description: \"로깅 호출됨\")","","        mockLogger.onLog = { message, level in","            XCTAssertTrue(message.contains(\"UserService\"))","            expectation.fulfill()","        }","","        \/\/ When","        plugin.beforeRegistration(UserService.self) { UserService() }","","        \/\/ Then","        wait(for: [expectation], timeout: 1.0)","    }","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"통합 테스트","type":"heading","anchor":"%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8"},{"code":["class PluginIntegrationTests: XCTestCase {","","    func testMultiplePluginsWork() async {","        \/\/ Given","        let loggingPlugin = LoggingPlugin()","        let performancePlugin = PerformanceMonitoringPlugin()","","        DI.addPlugins([loggingPlugin, performancePlugin])","","        \/\/ When","        DI.register(UserService.self) { UserService() }","        let service: UserService = DI.resolve()","","        \/\/ Then","        let report = performancePlugin.generateReport()","        XCTAssertTrue(report.metrics.contains(\"UserService\"))","    }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"모범 사례","type":"heading","anchor":"%EB%AA%A8%EB%B2%94-%EC%82%AC%EB%A1%80"},{"level":3,"text":"1. 플러그인 설계 원칙","type":"heading","anchor":"1-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%84%A4%EA%B3%84-%EC%9B%90%EC%B9%99"},{"code":["\/\/ ✅ 좋은 예: 단일 책임 원칙","class LoggingOnlyPlugin: BasePlugin, ResolutionPlugin {","    \/\/ 로깅만 담당","}","","class PerformanceOnlyPlugin: BasePlugin, ResolutionPlugin {","    \/\/ 성능 모니터링만 담당","}","","\/\/ ❌ 나쁜 예: 여러 책임","class EverythingPlugin: BasePlugin, ResolutionPlugin {","    \/\/ 로깅도 하고, 성능도 측정하고, 검증도 하고...","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"2. 성능 고려사항","type":"heading","anchor":"2-%EC%84%B1%EB%8A%A5-%EA%B3%A0%EB%A0%A4%EC%82%AC%ED%95%AD"},{"code":["class OptimizedPlugin: BasePlugin, ResolutionPlugin {","    private let isEnabled: Bool = UserDefaults.standard.bool(forKey: \"plugin.enabled\")","","    public func afterResolution<T>(_ type: T.Type, instance: T) -> T {","        \/\/ 성능을 위한 빠른 조건 검사","        guard isEnabled else { return instance }","","        \/\/ 실제 플러그인 로직","        performPluginLogic(for: type, instance: instance)","        return instance","    }","","    private func performPluginLogic<T>(for type: T.Type, instance: T) {","        \/\/ 비용이 큰 작업은 백그라운드에서","        Task.detached(priority: .background) {","            \/\/ 무거운 로직","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"3. 오류 처리","type":"heading","anchor":"3-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC"},{"code":["class RobustPlugin: BasePlugin, ResolutionPlugin {","    public func afterResolution<T>(_ type: T.Type, instance: T) -> T {","        do {","            \/\/ 플러그인 로직 실행","            return try processInstance(instance)","        } catch {","            \/\/ 플러그인 오류가 DI 과정을 방해하지 않도록","            print(\"⚠️ Plugin error: \\(error)\")","            return instance \/\/ 원본 인스턴스 반환","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"DiContainer의 플러그인 시스템을 통해 의존성 주입 과정을 완전히 커스터마이징하고, 애플리케이션의 요구사항에 맞는 강력한 DI 솔루션을 구축할 수 있습니다.","type":"text"}],"type":"paragraph"}]}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/AutoResolution","doc:\/\/DiContainer\/documentation\/DiContainer\/AutoDependencyResolver","doc:\/\/DiContainer\/documentation\/DiContainer\/BasePlugin","doc:\/\/DiContainer\/documentation\/DiContainer\/ModuleFactory","doc:\/\/DiContainer\/documentation\/DiContainer\/RepositoryModuleFactory","doc:\/\/DiContainer\/documentation\/DiContainer\/UseCaseModuleFactory","doc:\/\/DiContainer\/documentation\/DiContainer\/ScopeModuleFactory"],"anchor":"고급-기능","title":"고급 기능"}],"metadata":{"roleHeading":"Article","modules":[{"name":"DiContainer"}],"role":"article","title":"플러그인 시스템"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/dicontainer\/pluginsystem"]}],"abstract":[{"text":"DiContainer의 강력한 플러그인 아키텍처를 사용하여 의존성 주입 과정을 커스터마이징하고 확장하는 방법","type":"text"}],"references":{"doc://DiContainer/documentation/DiContainer/UseCaseModuleFactory":{"type":"topic","abstract":[{"text":"UseCase 계층 모듈 팩토리","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"UseCaseModuleFactory"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"UseCaseModuleFactory"}],"title":"UseCaseModuleFactory","kind":"symbol","role":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/UseCaseModuleFactory","url":"\/documentation\/dicontainer\/usecasemodulefactory"},"doc://DiContainer/documentation/DiContainer":{"title":"DiContainer","url":"\/documentation\/dicontainer","kind":"symbol","abstract":[{"type":"text","text":"현대적인 Swift Concurrency와 Actor 모델을 위해 설계된 고성능 의존성 주입 프레임워크"}],"type":"topic","role":"collection","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer"},"doc://DiContainer/documentation/DiContainer/AutoDependencyResolver":{"abstract":[{"type":"text","text":"자동 의존성 해결을 수행하는 핵심 클래스 (메인 액터 격리)"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AutoDependencyResolver"}],"navigatorTitle":[{"kind":"identifier","text":"AutoDependencyResolver"}],"url":"\/documentation\/dicontainer\/autodependencyresolver","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AutoDependencyResolver","title":"AutoDependencyResolver","type":"topic"},"doc://DiContainer/documentation/DiContainer/ScopeModuleFactory":{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ScopeModuleFactory","navigatorTitle":[{"kind":"identifier","text":"ScopeModuleFactory"}],"kind":"symbol","abstract":[{"text":"Scope 계층 모듈 팩토리","type":"text"}],"role":"symbol","title":"ScopeModuleFactory","url":"\/documentation\/dicontainer\/scopemodulefactory","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ScopeModuleFactory"}]},"doc://DiContainer/documentation/DiContainer/BasePlugin":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BasePlugin","kind":"identifier"}],"title":"BasePlugin","role":"symbol","kind":"symbol","url":"\/documentation\/dicontainer\/baseplugin","abstract":[{"text":"기본 플러그인 구현을 위한 베이스 클래스","type":"text"}],"type":"topic","navigatorTitle":[{"text":"BasePlugin","kind":"identifier"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/BasePlugin"},"doc://DiContainer/documentation/DiContainer/ModuleFactory":{"type":"topic","abstract":[{"text":"팩토리로 모듈을 체계적으로 생성하고 Container에 등록합니다.","type":"text"}],"role":"article","title":"Module Factory","url":"\/documentation\/dicontainer\/modulefactory","kind":"article","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ModuleFactory"},"doc://DiContainer/documentation/DiContainer/AutoResolution":{"role":"article","abstract":[{"type":"text","text":"DiContainer의 강력한 자동 의존성 해결 시스템을 활용하여 리플렉션 기반의 자동 주입을 구현하는 방법"}],"title":"자동 의존성 해결","url":"\/documentation\/dicontainer\/autoresolution","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AutoResolution","type":"topic","kind":"article"},"doc://DiContainer/documentation/DiContainer/RepositoryModuleFactory":{"url":"\/documentation\/dicontainer\/repositorymodulefactory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RepositoryModuleFactory"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/RepositoryModuleFactory","abstract":[{"type":"text","text":"Repository 계층 모듈 팩토리"}],"navigatorTitle":[{"text":"RepositoryModuleFactory","kind":"identifier"}],"type":"topic","title":"RepositoryModuleFactory","role":"symbol","kind":"symbol"}}}