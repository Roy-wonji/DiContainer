{"kind":"symbol","metadata":{"symbolKind":"class","roleHeading":"Class","modules":[{"name":"DiContainer"}],"navigatorTitle":[{"text":"Container","kind":"identifier"}],"title":"Container","externalID":"s:11DiContainer0B0C","role":"symbol","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Container","kind":"identifier"}]},"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/dicontainer\/container"]}],"sections":[],"relationshipsSections":[{"identifiers":["doc:\/\/DiContainer\/s8SendableP","doc:\/\/DiContainer\/ScA"],"type":"conformsTo","kind":"relationships","title":"Conforms To"}],"topicSections":[{"generated":true,"anchor":"Initializers","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/Container\/init()"],"title":"Initializers"},{"generated":true,"anchor":"Instance-Methods","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/Container\/build()","doc:\/\/DiContainer\/documentation\/DiContainer\/Container\/callAsFunction(_:)","doc:\/\/DiContainer\/documentation\/DiContainer\/Container\/register(_:)"],"title":"Instance Methods"},{"generated":true,"anchor":"Default-Implementations","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/Container\/Actor-Implementations"],"title":"Default Implementations"}],"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"identifier":{"url":"doc:\/\/DiContainer\/documentation\/DiContainer\/Container","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"Container"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"type":"heading","text":"개요","level":2,"anchor":"%EA%B0%9C%EC%9A%94"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Container"},{"type":"text","text":"는 여러 개의 "},{"type":"codeVoice","code":"Module"},{"type":"text","text":" 인스턴스를 수집하고 일괄 등록할 수 있는"},{"type":"text","text":" "},{"type":"text","text":"Swift Concurrency 기반의 액터입니다. 이 컨테이너는 대규모 의존성 그래프를"},{"type":"text","text":" "},{"type":"text","text":"효율적으로 관리하고 병렬 처리를 통해 성능을 최적화합니다."}]},{"type":"heading","text":"핵심 특징","level":2,"anchor":"%ED%95%B5%EC%8B%AC-%ED%8A%B9%EC%A7%95"},{"type":"heading","text":"⚡ 고성능 병렬 처리","level":3,"anchor":"%E2%9A%A1-%EA%B3%A0%EC%84%B1%EB%8A%A5-%EB%B3%91%EB%A0%AC-%EC%B2%98%EB%A6%AC"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Task Group 활용"}],"type":"strong"},{"text":": 모든 모듈의 등록을 동시에 병렬 실행","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"스냅샷 기반","type":"text"}],"type":"strong"},{"text":": 내부 배열을 복사하여 actor hop 최소화","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"비동기 안전","type":"text"}],"type":"strong"},{"text":": Swift Concurrency 패턴으로 스레드 안전성 보장","type":"text"}]}]}]},{"type":"heading","text":"🏗️ 배치 등록 시스템","level":3,"anchor":"%F0%9F%8F%97%EF%B8%8F-%EB%B0%B0%EC%B9%98-%EB%93%B1%EB%A1%9D-%EC%8B%9C%EC%8A%A4%ED%85%9C"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"모듈 수집"}]},{"type":"text","text":": 여러 모듈을 먼저 수집한 후 한 번에 등록"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"지연 실행"}],"type":"strong"},{"text":": ","type":"text"},{"code":"build()","type":"codeVoice"},{"text":" 호출 시점까지 실제 등록 지연","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"원자적 처리"}],"type":"strong"},{"type":"text","text":": 모든 모듈이 함께 등록되거나 실패"}],"type":"paragraph"}]}]},{"type":"heading","text":"🔒 동시성 안전성","anchor":"%F0%9F%94%92-%EB%8F%99%EC%8B%9C%EC%84%B1-%EC%95%88%EC%A0%84%EC%84%B1","level":3},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Actor 보호","type":"text"}],"type":"strong"},{"text":": 내부 상태(","type":"text"},{"type":"codeVoice","code":"modules"},{"type":"text","text":")가 데이터 경쟁으로부터 안전"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"순서 독립"}]},{"text":": 모듈 등록 순서와 무관하게 동작","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"메모리 안전"}]},{"text":": 약한 참조 없이도 안전한 메모리 관리","type":"text"}]}]}],"type":"unorderedList"},{"anchor":"%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9-%ED%8C%A8%ED%84%B4","type":"heading","level":2,"text":"기본 사용 패턴"},{"anchor":"1%EB%8B%A8%EA%B3%84-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1-%EB%B0%8F-%EB%AA%A8%EB%93%88-%EC%88%98%EC%A7%91","type":"heading","level":3,"text":"1단계: 컨테이너 생성 및 모듈 수집"},{"type":"codeListing","syntax":"swift","code":["let container = Container()","","\/\/ 모듈 개별 등록","container.register(userRepositoryModule)","container.register(authServiceModule) ","container.register(networkServiceModule)"]},{"anchor":"2%EB%8B%A8%EA%B3%84-%EC%B2%B4%EC%9D%B4%EB%8B%9D%EC%9D%84-%ED%86%B5%ED%95%9C-%EC%97%B0%EC%86%8D-%EB%93%B1%EB%A1%9D","type":"heading","level":3,"text":"2단계: 체이닝을 통한 연속 등록"},{"type":"codeListing","syntax":"swift","code":["let container = Container()","    .register(userRepositoryModule)","    .register(authServiceModule)","    .register(networkServiceModule)"]},{"anchor":"3%EB%8B%A8%EA%B3%84-%EC%9D%BC%EA%B4%84-%EB%93%B1%EB%A1%9D-%EC%8B%A4%ED%96%89","type":"heading","level":3,"text":"3단계: 일괄 등록 실행"},{"type":"codeListing","syntax":"swift","code":["\/\/ 모든 모듈을 병렬로 등록","await container.build()"]},{"anchor":"%EA%B3%A0%EA%B8%89-%EC%82%AC%EC%9A%A9-%ED%8C%A8%ED%84%B4","type":"heading","level":2,"text":"고급 사용 패턴"},{"anchor":"Factory-%ED%8C%A8%ED%84%B4%EA%B3%BC%EC%9D%98-%EC%97%B0%EB%8F%99","type":"heading","level":3,"text":"Factory 패턴과의 연동"},{"type":"codeListing","syntax":"swift","code":["let container = Container()","let repositoryFactory = RepositoryModuleFactory()","let useCaseFactory = UseCaseModuleFactory()","","\/\/ Factory에서 생성된 모듈들을 일괄 등록","await repositoryFactory.makeAllModules().asyncForEach { module in","    await container.register(module)","}","","await useCaseFactory.makeAllModules().asyncForEach { module in","    await container.register(module)","}","","\/\/ 모든 모듈을 병렬 등록","await container.build()"]},{"anchor":"%EC%A1%B0%EA%B1%B4%EB%B6%80-%EB%AA%A8%EB%93%88-%EB%93%B1%EB%A1%9D","type":"heading","level":3,"text":"조건부 모듈 등록"},{"type":"codeListing","syntax":"swift","code":["let container = Container()","","\/\/ 환경에 따른 조건부 등록","if ProcessInfo.processInfo.environment[\"ENABLE_ANALYTICS\"] == \"true\" {","    container.register(analyticsModule)","}","","#if DEBUG","container.register(debugLoggingModule)","#else","container.register(productionLoggingModule)","#endif","","await container.build()"]},{"anchor":"%ED%81%B4%EB%A1%9C%EC%A0%80%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EA%B5%AC%EC%84%B1","type":"heading","level":3,"text":"클로저를 활용한 구성"},{"code":["let container = Container()","","container {","    \/\/ 클로저 내부에서 추가 설정","    print(\"모듈 등록 준비 완료\")","}",".register(module1)",".register(module2)","","await container.build()"],"type":"codeListing","syntax":"swift"},{"text":"성능 특징","type":"heading","level":2,"anchor":"%EC%84%B1%EB%8A%A5-%ED%8A%B9%EC%A7%95"},{"text":"병렬 처리 최적화","type":"heading","level":3,"anchor":"%EB%B3%91%EB%A0%AC-%EC%B2%98%EB%A6%AC-%EC%B5%9C%EC%A0%81%ED%99%94"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"동시 실행"}],"type":"strong"},{"type":"text","text":": 독립적인 모듈들이 병렬로 등록되어 전체 시간 단축"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"메모리 효율"}]},{"type":"text","text":": 스냅샷 방식으로 불필요한 메모리 복사 최소화"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"CPU 활용"}]},{"text":": 멀티코어 환경에서 모든 코어 활용 가능","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"메모리 관리","type":"heading","level":3,"anchor":"%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC"},{"code":["\/\/ 등록 완료 후 내부 모듈 배열은 자동으로 해제됨","await container.build() \/\/ 이후 modules 배열은 비워짐"],"type":"codeListing","syntax":"swift"},{"text":"동시성 모델","type":"heading","level":2,"anchor":"%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%AA%A8%EB%8D%B8"},{"text":"Actor 기반 안전성","type":"heading","level":3,"anchor":"Actor-%EA%B8%B0%EB%B0%98-%EC%95%88%EC%A0%84%EC%84%B1"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"내부 상태 변경은 actor의 직렬 실행 큐에서만 발생","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"외부에서의 동시 접근이 자동으로 동기화됨"}]}]},{"content":[{"inlineContent":[{"text":"데이터 경쟁 조건 완전 차단","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"Task Group 활용","type":"heading","level":3,"anchor":"Task-Group-%ED%99%9C%EC%9A%A9"},{"code":["\/\/ 내부 구현 예시 (실제 코드)","await withTaskGroup(of: Void.self) { group in","    for module in modules {","        group.addTask { @Sendable in","            await module.register() \/\/ 각 모듈이 병렬 등록","        }","    }","    await group.waitForAll() \/\/ 모든 등록 완료까지 대기","}"],"type":"codeListing","syntax":"swift"},{"text":"제한사항 및 고려사항","type":"heading","level":2,"anchor":"%EC%A0%9C%ED%95%9C%EC%82%AC%ED%95%AD-%EB%B0%8F-%EA%B3%A0%EB%A0%A4%EC%82%AC%ED%95%AD"},{"text":"⚠️ 의존성 순서","type":"heading","level":3,"anchor":"%E2%9A%A0%EF%B8%8F-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%88%9C%EC%84%9C"},{"type":"paragraph","inlineContent":[{"text":"이 컨테이너는 의존성 간의 순서를 보장하지 않습니다. 순서가 중요한 경우:","type":"text"}]},{"code":["\/\/ ❌ 문제 상황: B가 A에 의존하지만 순서 보장 없음","container.register(moduleB) \/\/ A가 필요하지만 아직 등록되지 않을 수 있음","container.register(moduleA)","","\/\/ ✅ 해결책 1: 모듈 팩토리에서 의존성 해결","let moduleB = registerModule.makeDependency(BProtocol.self) {","    let a = DependencyContainer.live.resolve(AProtocol.self)!","    return BImplementation(dependency: a)","}","","\/\/ ✅ 해결책 2: 별도의 순서 보장 로직 사용","await container.register(moduleA).build() \/\/ A 먼저 등록","await Container().register(moduleB).build() \/\/ B 나중에 등록"],"type":"codeListing","syntax":"swift"},{"text":"⚠️ 오류 처리","type":"heading","level":3,"anchor":"%E2%9A%A0%EF%B8%8F-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC"},{"type":"paragraph","inlineContent":[{"type":"text","text":"현재 구현에서는 모듈 등록 실패를 개별적으로 처리하지 않습니다:"}]},{"code":["\/\/ 현재: 모든 모듈이 성공하거나 일부 실패해도 계속 진행","await container.build() \/\/ throws 하지 않음","","\/\/ 향후 확장 가능: 오류 수집 및 보고","\/\/ let failures = try await container.buildWithErrorHandling()"],"type":"codeListing","syntax":"swift"},{"text":"관련 API","type":"heading","level":2,"anchor":"%EA%B4%80%EB%A0%A8-API"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Module","isActive":true,"type":"reference"},{"text":": 개별 의존성 등록 단위","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/RegisterModule"},{"type":"text","text":": 모듈 생성 헬퍼"}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/DependencyContainer","isActive":true},{"type":"text","text":": 실제 의존성 저장소"}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"사용 예시","type":"heading","level":1,"anchor":"%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C"},{"code":["\/\/ 모듈 팩토리에서 [Module] 생성","let repoModules: [Module]    = repositoryFactory.makeAllModules()","let useCaseModules: [Module] = useCaseFactory.makeAllModules()","","let container = Container()","","\/\/ 비동기 for-each로 담기","await repoModules.asyncForEach   { await container.register($0) }","await useCaseModules.asyncForEach{ await container.register($0) }","","\/\/ 병렬 등록 실행","await container.build()"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"references":{"doc://DiContainer/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/DiContainer\/s8SendableP"},"doc://DiContainer/documentation/DiContainer/RegisterModule":{"kind":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/RegisterModule","abstract":[],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RegisterModule"}],"navigatorTitle":[{"kind":"identifier","text":"RegisterModule"}],"url":"\/documentation\/dicontainer\/registermodule","title":"RegisterModule"},"doc://DiContainer/documentation/DiContainer/Container/register(_:)":{"abstract":[{"type":"text","text":"모듈을 컨테이너에 추가하여 나중에 일괄 등록할 수 있도록 준비합니다."}],"type":"topic","title":"register(_:)","url":"\/documentation\/dicontainer\/container\/register(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"register"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Module","preciseIdentifier":"s:11DiContainer6ModuleC"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Container\/register(_:)","kind":"symbol","role":"symbol"},"doc://DiContainer/documentation/DiContainer/Container/init()":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/dicontainer\/container\/init()","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Container\/init()","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"기본 초기화 메서드."}],"title":"init()"},"doc://DiContainer/documentation/DiContainer/DependencyContainer":{"role":"symbol","url":"\/documentation\/dicontainer\/dependencycontainer","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DependencyContainer","kind":"identifier"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/DependencyContainer","kind":"symbol","type":"topic","abstract":[],"navigatorTitle":[{"text":"DependencyContainer","kind":"identifier"}],"title":"DependencyContainer"},"doc://DiContainer/documentation/DiContainer":{"abstract":[],"url":"\/documentation\/dicontainer","kind":"symbol","type":"topic","title":"DiContainer","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","role":"collection"},"doc://DiContainer/documentation/DiContainer/Container/callAsFunction(_:)":{"kind":"symbol","url":"\/documentation\/dicontainer\/container\/callasfunction(_:)","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Container\/callAsFunction(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"callAsFunction","kind":"identifier"},{"text":"(() -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"}],"type":"topic","title":"callAsFunction(_:)","abstract":[{"text":"Trailing closure를 처리할 때 사용되는 메서드입니다.","type":"text"}],"role":"symbol"},"doc://DiContainer/documentation/DiContainer/Module":{"navigatorTitle":[{"text":"Module","kind":"identifier"}],"url":"\/documentation\/dicontainer\/module","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Module","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Module","kind":"identifier"}],"type":"topic","role":"symbol","kind":"symbol","title":"Module","abstract":[{"type":"codeVoice","code":"Module"},{"type":"text","text":"은 DI(의존성 주입)를 위한 "},{"type":"strong","inlineContent":[{"type":"text","text":"단일 모듈"}]},{"type":"text","text":"을 나타내는 구조체입니다."}]},"doc://DiContainer/documentation/DiContainer/Container/Actor-Implementations":{"title":"Actor Implementations","type":"topic","url":"\/documentation\/dicontainer\/container\/actor-implementations","kind":"article","abstract":[],"role":"collectionGroup","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Container\/Actor-Implementations"},"doc://DiContainer/documentation/DiContainer/Container/build()":{"kind":"symbol","role":"symbol","url":"\/documentation\/dicontainer\/container\/build()","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Container\/build()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"build"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"}],"type":"topic","title":"build()","abstract":[{"text":"수집된 모든 모듈의 등록을 병렬로 실행하는 핵심 메서드입니다.","type":"text"}]},"doc://DiContainer/documentation/DiContainer/Container":{"type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Container","navigatorTitle":[{"kind":"identifier","text":"Container"}],"fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"Container"}],"role":"symbol","title":"Container","abstract":[],"kind":"symbol","url":"\/documentation\/dicontainer\/container"},"doc://DiContainer/ScA":{"type":"unresolvable","identifier":"doc:\/\/DiContainer\/ScA","title":"_Concurrency.Actor"}}}