{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/DiContainer\/documentation\/DiContainer\/ActorHopExplanation"},"sections":[],"abstract":[{"type":"text","text":"Actor hop은 서로 다른 actor 격리 간 이동 비용입니다. DiContainer는 스냅샷 후 병렬 등록으로 hop을 최소화합니다."}],"schemaVersion":{"patch":0,"minor":3,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/dicontainer\/actorhopexplanation"]}],"kind":"article","hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"핵심 아이디어","anchor":"%ED%95%B5%EC%8B%AC-%EC%95%84%EC%9D%B4%EB%94%94%EC%96%B4"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"스냅샷: 등록할 모듈 배열을 actor 내부에서 복사","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"병렬 처리: TaskGroup으로 비즈니스 로직 등록 실행"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"정리: 완료 후 필요한 만큼만 상태 갱신","type":"text"}],"type":"paragraph"}]}]},{"level":2,"type":"heading","text":"예시","anchor":"%EC%98%88%EC%8B%9C"},{"code":["let snapshot = modules","await withTaskGroup(of: Void.self) { group in","  for module in snapshot {","    group.addTask { await module.register() }","  }","  await group.waitForAll()","}"],"type":"codeListing","syntax":"swift"},{"level":2,"type":"heading","text":"베스트 프랙티스","anchor":"%EB%B2%A0%EC%8A%A4%ED%8A%B8-%ED%94%84%EB%9E%99%ED%8B%B0%EC%8A%A4"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"build() 단계에서만 병렬화","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"등록 시점에는 누적만 하고 즉시 실행하지 않기"}],"type":"paragraph"}]}]}],"kind":"content"}],"metadata":{"modules":[{"name":"DiContainer"}],"roleHeading":"Article","title":"Actor Hop Explanation","role":"article"},"references":{"doc://DiContainer/documentation/DiContainer":{"title":"DiContainer","kind":"symbol","url":"\/documentation\/dicontainer","role":"collection","type":"topic","abstract":[{"text":"A modern, high-performance dependency injection framework designed for Swift Concurrency and Actor models.","type":"text"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer"}}}