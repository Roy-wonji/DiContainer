{"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"%ED%95%B5%EC%8B%AC-%EC%95%84%EC%9D%B4%EB%94%94%EC%96%B4","text":"핵심 아이디어","type":"heading"},{"items":[{"content":[{"inlineContent":[{"text":"스냅샷: 등록할 모듈 배열을 actor 내부에서 복사","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"병렬 처리: TaskGroup으로 비즈니스 로직 등록 실행"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"정리: 완료 후 필요한 만큼만 상태 갱신","type":"text"}]}]}],"type":"unorderedList"},{"level":2,"anchor":"%EC%98%88%EC%8B%9C","text":"예시","type":"heading"},{"code":["let snapshot = modules","await withTaskGroup(of: Void.self) { group in","  for module in snapshot {","    group.addTask { await module.register() }","  }","  await group.waitForAll()","}"],"syntax":"swift","type":"codeListing"},{"level":2,"anchor":"%EB%B2%A0%EC%8A%A4%ED%8A%B8-%ED%94%84%EB%9E%99%ED%8B%B0%EC%8A%A4","text":"베스트 프랙티스","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"build() 단계에서만 병렬화","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"등록 시점에는 누적만 하고 즉시 실행하지 않기"}]}]}],"type":"unorderedList"}]}],"metadata":{"modules":[{"name":"DiContainer"}],"role":"article","roleHeading":"Article","title":"Actor Hop Explanation"},"variants":[{"paths":["\/documentation\/dicontainer\/actorhopexplanation"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"kind":"article","abstract":[{"type":"text","text":"Actor hop은 서로 다른 actor 격리 간 이동 비용입니다. DiContainer는 스냅샷 후 병렬 등록으로 hop을 최소화합니다."}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/DiContainer\/documentation\/DiContainer\/ActorHopExplanation"},"references":{"doc://DiContainer/documentation/DiContainer":{"url":"\/documentation\/dicontainer","type":"topic","kind":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","title":"DiContainer","abstract":[{"type":"text","text":"현대적인 Swift Concurrency와 Actor 모델을 위해 설계된 고성능 의존성 주입 프레임워크"}],"role":"collection"}}}