{"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"abstract":[{"text":"DiContainer 2.0의 모듈 시스템을 활용하여 대규모 애플리케이션의 의존성을 체계적으로 관리하는 방법을 알아보세요.","type":"text"}],"sections":[],"metadata":{"roleHeading":"Article","title":"모듈 시스템","role":"article","modules":[{"name":"DiContainer"}]},"identifier":{"url":"doc:\/\/DiContainer\/documentation\/DiContainer\/ModuleSystem","interfaceLanguage":"swift"},"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"content":[{"text":"개요","type":"heading","anchor":"%EA%B0%9C%EC%9A%94","level":2},{"inlineContent":[{"text":"모듈 시스템은 관련된 의존성들을 논리적으로 그룹화하고 체계적으로 관리할 수 있게 해주는 DiContainer의 핵심 기능입니다. Clean Architecture의 각 계층을 모듈로 구성하여 유지보수성과 확장성을 크게 향상시킬 수 있습니다.","type":"text"}],"type":"paragraph"},{"text":"기본 모듈 구조","type":"heading","anchor":"%EA%B8%B0%EB%B3%B8-%EB%AA%A8%EB%93%88-%EA%B5%AC%EC%A1%B0","level":2},{"text":"Module 프로토콜","type":"heading","anchor":"Module-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"모든 모듈은 "},{"code":"Module","type":"codeVoice"},{"type":"text","text":" 프로토콜을 구현해야 합니다:"}]},{"type":"codeListing","syntax":"swift","code":["protocol Module {","    func registerDependencies() async","}"]},{"level":3,"type":"heading","text":"기본 모듈 구현","anchor":"%EA%B8%B0%EB%B3%B8-%EB%AA%A8%EB%93%88-%EA%B5%AC%ED%98%84"},{"type":"codeListing","syntax":"swift","code":["struct UserModule: Module {","    func registerDependencies() async {","        \/\/ Repository 계층","        DI.register(UserRepository.self) {","            CoreDataUserRepository()","        }","","        \/\/ UseCase 계층","        DI.register(UserUseCase.self) {","            UserUseCaseImpl()","        }","","        \/\/ Service 계층","        DI.register(UserService.self) {","            UserServiceImpl()","        }","    }","}"]},{"anchor":"AppDIContainer%EB%A5%BC-%ED%86%B5%ED%95%9C-%EB%AA%A8%EB%93%88-%EA%B4%80%EB%A6%AC","level":2,"type":"heading","text":"AppDIContainer를 통한 모듈 관리"},{"anchor":"Repository-%EB%AA%A8%EB%93%88-%ED%8C%A9%ED%86%A0%EB%A6%AC","level":3,"type":"heading","text":"Repository 모듈 팩토리"},{"inlineContent":[{"type":"text","text":"Repository 계층의 모듈들을 체계적으로 관리합니다:"}],"type":"paragraph"},{"code":["extension RepositoryModuleFactory {","    public mutating func registerDefaultDefinitions() {","        let registerModuleCopy = registerModule","","        repositoryDefinitions = [","            \/\/ 사용자 Repository","            registerModuleCopy.makeDependency(UserRepositoryProtocol.self) {","                CoreDataUserRepository()","            },","","            \/\/ 인증 Repository","            registerModuleCopy.makeDependency(AuthRepositoryProtocol.self) {","                KeychainAuthRepository()","            },","","            \/\/ 네트워크 Repository","            registerModuleCopy.makeDependency(NetworkRepositoryProtocol.self) {","                URLSessionNetworkRepository()","            },","","            \/\/ 캐시 Repository","            registerModuleCopy.makeDependency(CacheRepositoryProtocol.self) {","                UserDefaultsCacheRepository()","            }","        ]","    }","}"],"syntax":"swift","type":"codeListing"},{"anchor":"UseCase-%EB%AA%A8%EB%93%88-%ED%8C%A9%ED%86%A0%EB%A6%AC","level":3,"type":"heading","text":"UseCase 모듈 팩토리"},{"type":"paragraph","inlineContent":[{"type":"text","text":"UseCase 계층은 Repository와 자동으로 연결됩니다:"}]},{"syntax":"swift","type":"codeListing","code":["extension UseCaseModuleFactory {","    public var useCaseDefinitions: [() -> Module] {","        [","            \/\/ 사용자 UseCase - Repository 자동 주입","            registerModule.makeUseCaseWithRepository(","                UserUseCaseProtocol.self,","                repositoryProtocol: UserRepositoryProtocol.self,","                repositoryFallback: CoreDataUserRepository()","            ) { repository in","                UserUseCaseImpl(userRepository: repository)","            },","","            \/\/ 인증 UseCase - Repository 자동 주입","            registerModule.makeUseCaseWithRepository(","                AuthUseCaseProtocol.self,","                repositoryProtocol: AuthRepositoryProtocol.self,","                repositoryFallback: KeychainAuthRepository()","            ) { repository in","                AuthUseCaseImpl(authRepository: repository)","            },","","            \/\/ 복합 UseCase - 여러 Repository 사용","            registerModule.makeComplexUseCase(","                UserProfileUseCaseProtocol.self","            ) {","                let userRepo = DI.resolve(UserRepositoryProtocol.self)","                let authRepo = DI.resolve(AuthRepositoryProtocol.self)","                return UserProfileUseCaseImpl(","                    userRepository: userRepo,","                    authRepository: authRepo","                )","            }","        ]","    }","}"]},{"type":"heading","text":"전체 모듈 등록","anchor":"%EC%A0%84%EC%B2%B4-%EB%AA%A8%EB%93%88-%EB%93%B1%EB%A1%9D","level":3},{"syntax":"swift","type":"codeListing","code":["@main","struct MyApp: App {","    init() {","        Task {","            await setupModules()","        }","    }","","    private func setupModules() async {","        await AppDIContainer.shared.registerDependencies { container in","            \/\/ 1. Repository 모듈들 등록","            var repositoryFactory = AppDIContainer.shared.repositoryFactory","            repositoryFactory.registerDefaultDefinitions()","","            await repositoryFactory.makeAllModules().asyncForEach { module in","                await container.register(module)","            }","","            \/\/ 2. UseCase 모듈들 등록 (Repository 의존성 자동 해결)","            let useCaseFactory = AppDIContainer.shared.useCaseFactory","            await useCaseFactory.makeAllModules().asyncForEach { module in","                await container.register(module)","            }","","            \/\/ 3. Scope 모듈들 등록","            let scopeFactory = AppDIContainer.shared.scopeFactory","            await scopeFactory.makeAllModules().asyncForEach { module in","                await container.register(module)","            }","        }","    }","}"]},{"type":"heading","text":"계층별 모듈 구성","anchor":"%EA%B3%84%EC%B8%B5%EB%B3%84-%EB%AA%A8%EB%93%88-%EA%B5%AC%EC%84%B1","level":2},{"type":"heading","text":"Repository 계층 모듈","anchor":"Repository-%EA%B3%84%EC%B8%B5-%EB%AA%A8%EB%93%88","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"데이터 접근과 외부 시스템 연동을 담당합니다:"}]},{"syntax":"swift","type":"codeListing","code":["struct DataModule: Module {","    func registerDependencies() async {","        \/\/ Core Data Stack","        DI.register(CoreDataStack.self) {","            CoreDataStack(modelName: \"DataModel\")","        }","","        \/\/ Repository 구현체들","        DI.register(UserRepository.self) {","            CoreDataUserRepository()","        }","","        DI.register(PostRepository.self) {","            CoreDataPostRepository()","        }","","        \/\/ 네트워크 관련","        DI.register(NetworkRepository.self) {","            URLSessionNetworkRepository()","        }","","        DI.register(APIClient.self) {","            RESTAPIClient(baseURL: \"https:\/\/api.example.com\")","        }","    }","}"]},{"type":"heading","text":"UseCase 계층 모듈","anchor":"UseCase-%EA%B3%84%EC%B8%B5-%EB%AA%A8%EB%93%88","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"비즈니스 로직을 캡슐화합니다:"}]},{"syntax":"swift","type":"codeListing","code":["struct BusinessModule: Module {","    func registerDependencies() async {","        \/\/ 사용자 관련 UseCase","        DI.register(GetUserProfileUseCase.self) {","            GetUserProfileUseCaseImpl()","        }","","        DI.register(UpdateUserProfileUseCase.self) {","            UpdateUserProfileUseCaseImpl()","        }","","        \/\/ 게시글 관련 UseCase","        DI.register(CreatePostUseCase.self) {","            CreatePostUseCaseImpl()","        }","","        DI.register(GetPostListUseCase.self) {","            GetPostListUseCaseImpl()","        }","","        \/\/ 복합 비즈니스 로직","        DI.register(UserPostCoordinator.self) {","            UserPostCoordinatorImpl()","        }","    }","}"]},{"type":"heading","anchor":"Service-%EA%B3%84%EC%B8%B5-%EB%AA%A8%EB%93%88","text":"Service 계층 모듈","level":3},{"type":"paragraph","inlineContent":[{"text":"애플리케이션 서비스와 UI 지원을 담당합니다:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct ServiceModule: Module {","    func registerDependencies() async {","        \/\/ UI 관련 서비스","        DI.register(NavigationService.self) {","            NavigationServiceImpl()","        }","","        DI.register(AlertService.self) {","            AlertServiceImpl()","        }","","        \/\/ 시스템 서비스","        DI.register(NotificationService.self) {","            UserNotificationService()","        }","","        DI.register(AnalyticsService.self) {","            FirebaseAnalyticsService()","        }","","        \/\/ 유틸리티 서비스","        DI.register(ValidationService.self) {","            ValidationServiceImpl()","        }","","        DI.register(FormatterService.self) {","            FormatterServiceImpl()","        }","    }","}"]},{"type":"heading","level":2,"text":"환경별 모듈 구성","anchor":"%ED%99%98%EA%B2%BD%EB%B3%84-%EB%AA%A8%EB%93%88-%EA%B5%AC%EC%84%B1"},{"type":"heading","level":3,"text":"개발\/테스트\/프로덕션 분리","anchor":"%EA%B0%9C%EB%B0%9C%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%94%84%EB%A1%9C%EB%8D%95%EC%85%98-%EB%B6%84%EB%A6%AC"},{"type":"codeListing","syntax":"swift","code":["protocol EnvironmentModule: Module {","    var environment: Environment { get }","}","","struct DevelopmentModule: EnvironmentModule {","    let environment = Environment.development","","    func registerDependencies() async {","        \/\/ 개발용 Mock 서비스들","        DI.register(NetworkService.self) {","            MockNetworkService()","        }","","        DI.register(AnalyticsService.self) {","            ConsoleAnalyticsService() \/\/ 콘솔 로깅만","        }","","        DI.register(DatabaseService.self) {","            InMemoryDatabaseService() \/\/ 메모리 DB","        }","    }","}","","struct ProductionModule: EnvironmentModule {","    let environment = Environment.production","","    func registerDependencies() async {","        \/\/ 프로덕션용 실제 서비스들","        DI.register(NetworkService.self) {","            URLSessionNetworkService()","        }","","        DI.register(AnalyticsService.self) {","            FirebaseAnalyticsService()","        }","","        DI.register(DatabaseService.self) {","            CoreDataService()","        }","    }","}","","\/\/ 환경에 따른 모듈 선택","struct EnvironmentModuleFactory {","    static func createModule() -> EnvironmentModule {","        #if DEBUG","        return DevelopmentModule()","        #elseif STAGING","        return StagingModule()","        #else","        return ProductionModule()","        #endif","    }","}"]},{"type":"heading","level":3,"anchor":"%ED%94%8C%EB%9E%AB%ED%8F%BC%EB%B3%84-%EB%AA%A8%EB%93%88","text":"플랫폼별 모듈"},{"type":"codeListing","syntax":"swift","code":["struct iOSModule: Module {","    func registerDependencies() async {","        DI.register(HapticService.self) {","            UIImpactFeedbackService()","        }","","        DI.register(PhotoService.self) {","            UIImagePickerService()","        }","","        DI.register(BiometricService.self) {","            TouchIDService()","        }","    }","}","","struct macOSModule: Module {","    func registerDependencies() async {","        DI.register(MenuService.self) {","            NSMenuService()","        }","","        DI.register(WindowService.self) {","            NSWindowService()","        }","","        DI.register(FileService.self) {","            NSOpenPanelService()","        }","    }","}","","\/\/ 플랫폼 감지 및 모듈 등록","struct PlatformModuleLoader {","    static func loadPlatformModules() async {","        let container = DependencyContainer.live","","        #if os(iOS)","        await container.register(iOSModule())","        #elseif os(macOS)","        await container.register(macOSModule())","        #endif","    }","}"]},{"type":"heading","level":2,"anchor":"%EB%AA%A8%EB%93%88-%EC%9D%98%EC%A1%B4%EC%84%B1-%EA%B4%80%EB%A6%AC","text":"모듈 의존성 관리"},{"type":"heading","level":3,"anchor":"%EB%AA%A8%EB%93%88-%EA%B0%84-%EC%9D%98%EC%A1%B4%EC%84%B1","text":"모듈 간 의존성"},{"syntax":"swift","code":["struct NetworkModule: Module {","    func registerDependencies() async {","        DI.register(HTTPClient.self) {","            URLSessionHTTPClient()","        }","","        DI.register(JSONDecoder.self) {","            let decoder = JSONDecoder()","            decoder.dateDecodingStrategy = .iso8601","            return decoder","        }","    }","}","","struct APIModule: Module {","    \/\/ NetworkModule에 의존","    func registerDependencies() async {","        DI.register(UserAPI.self) {","            UserAPIImpl() \/\/ HTTPClient 자동 주입","        }","","        DI.register(PostAPI.self) {","            PostAPIImpl() \/\/ HTTPClient 자동 주입","        }","    }","}","","\/\/ 의존성 순서를 고려한 등록","await DependencyContainer.bootstrap { container in","    \/\/ 기본 모듈 먼저","    await container.register(NetworkModule())","","    \/\/ 의존 모듈 나중에","    await container.register(APIModule())","}"],"type":"codeListing"},{"type":"heading","level":3,"anchor":"%EC%88%9C%ED%99%98-%EC%9D%98%EC%A1%B4%EC%84%B1-%ED%95%B4%EA%B2%B0","text":"순환 의존성 해결"},{"type":"codeListing","syntax":"swift","code":["protocol UserServiceProtocol: AnyObject {","    var postService: PostServiceProtocol? { get set }","}","","protocol PostServiceProtocol: AnyObject {","    var userService: UserServiceProtocol? { get set }","}","","struct CircularDependencyModule: Module {","    func registerDependencies() async {","        \/\/ 1. 먼저 모든 서비스 등록","        DI.register(UserServiceProtocol.self) {","            UserService()","        }","","        DI.register(PostServiceProtocol.self) {","            PostService()","        }","","        \/\/ 2. 나중에 순환 의존성 설정","        if let userService = DI.resolve(UserServiceProtocol.self),","           let postService = DI.resolve(PostServiceProtocol.self) {","            userService.postService = postService","            postService.userService = userService","        }","    }","}"]},{"type":"heading","level":2,"anchor":"%EB%8F%99%EC%A0%81-%EB%AA%A8%EB%93%88-%EB%A1%9C%EB%94%A9","text":"동적 모듈 로딩"},{"type":"heading","level":3,"anchor":"%EC%A7%80%EC%97%B0-%EB%A1%9C%EB%94%A9-%EB%AA%A8%EB%93%88","text":"지연 로딩 모듈"},{"type":"codeListing","syntax":"swift","code":["struct LazyModule: Module {","    private let moduleLoader: () async -> Module","","    init(_ loader: @escaping () async -> Module) {","        self.moduleLoader = loader","    }","","    func registerDependencies() async {","        let actualModule = await moduleLoader()","        await actualModule.registerDependencies()","    }","}","","\/\/ 사용 예시","let heavyModule = LazyModule {","    \/\/ 필요할 때만 로드","    await HeavyComputationModule()","}","","await container.register(heavyModule)"]},{"anchor":"%EC%A1%B0%EA%B1%B4%EB%B6%80-%EB%AA%A8%EB%93%88-%EB%A1%9C%EB%94%A9","text":"조건부 모듈 로딩","level":3,"type":"heading"},{"syntax":"swift","code":["struct ConditionalModuleLoader {","    static func loadModules() async {","        await DependencyContainer.bootstrap { container in","            \/\/ 기본 모듈은 항상 로드","            await container.register(CoreModule())","","            \/\/ 기능별 조건부 로드","            if FeatureFlags.analyticsEnabled {","                await container.register(AnalyticsModule())","            }","","            if FeatureFlags.pushNotificationEnabled {","                await container.register(PushNotificationModule())","            }","","            if UserDefaults.standard.bool(forKey: \"premium\") {","                await container.register(PremiumFeaturesModule())","            }","        }","    }","}"],"type":"codeListing"},{"text":"모듈 테스팅","level":2,"type":"heading","anchor":"%EB%AA%A8%EB%93%88-%ED%85%8C%EC%8A%A4%ED%8C%85"},{"text":"모듈별 단위 테스트","level":3,"type":"heading","anchor":"%EB%AA%A8%EB%93%88%EB%B3%84-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8"},{"code":["class UserModuleTests: XCTestCase {","    override func setUp() async throws {","        await super.setUp()","","        \/\/ 테스트용 깨끗한 컨테이너","        await DependencyContainer.releaseAll()","","        \/\/ 테스트용 의존성만 등록","        await DependencyContainer.bootstrap { container in","            await container.register(TestUserModule())","        }","    }","","    func testUserModuleRegistration() async {","        \/\/ Repository 등록 확인","        let userRepo = DI.resolve(UserRepository.self)","        XCTAssertNotNil(userRepo)","","        \/\/ UseCase 등록 확인","        let userUseCase = DI.resolve(UserUseCase.self)","        XCTAssertNotNil(userUseCase)","","        \/\/ 의존성 주입 확인","        if let useCase = userUseCase as? UserUseCaseImpl {","            XCTAssertNotNil(useCase.userRepository)","        }","    }","}","","struct TestUserModule: Module {","    func registerDependencies() async {","        DI.register(UserRepository.self) {","            MockUserRepository()","        }","","        DI.register(UserUseCase.self) {","            UserUseCaseImpl()","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"통합 테스트","level":3,"type":"heading","anchor":"%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8"},{"type":"codeListing","syntax":"swift","code":["class ModuleIntegrationTests: XCTestCase {","    func testCompleteModuleStack() async throws {","        \/\/ 전체 모듈 스택 테스트","        await AppDIContainer.shared.registerDefaultDependencies()","","        \/\/ Repository → UseCase 의존성 체인 검증","        let userUseCase = DI.resolve(UserUseCaseProtocol.self)","        XCTAssertNotNil(userUseCase)","","        \/\/ 실제 비즈니스 로직 테스트","        let result = try await userUseCase?.getUserProfile(id: \"test\")","        XCTAssertNotNil(result)","    }","}"]},{"type":"heading","level":2,"anchor":"%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94","text":"성능 최적화"},{"type":"heading","level":3,"anchor":"%EB%B3%91%EB%A0%AC-%EB%AA%A8%EB%93%88-%EB%93%B1%EB%A1%9D","text":"병렬 모듈 등록"},{"type":"codeListing","syntax":"swift","code":["await AppDIContainer.shared.registerDependencies { container in","    \/\/ 독립적인 모듈들을 병렬로 등록","    await withTaskGroup(of: Void.self) { group in","        group.addTask {","            await container.register(NetworkModule())","        }","","        group.addTask {","            await container.register(StorageModule())","        }","","        group.addTask {","            await container.register(UtilityModule())","        }","    }","","    \/\/ 의존성이 있는 모듈들은 순차적으로","    await container.register(BusinessModule()) \/\/ NetworkModule 필요","    await container.register(ServiceModule())  \/\/ BusinessModule 필요","}"]},{"type":"heading","level":3,"anchor":"%EB%AA%A8%EB%93%88-%EC%82%AC%EC%A0%84-%EC%B4%88%EA%B8%B0%ED%99%94","text":"모듈 사전 초기화"},{"type":"codeListing","syntax":"swift","code":["class ModulePreloader {","    static func preloadCriticalModules() async {","        \/\/ 앱 시작 시 중요한 모듈들만 미리 로드","        await DependencyContainer.bootstrap { container in","            await container.register(CoreModule())","            await container.register(AuthModule())","            await container.register(NavigationModule())","        }","    }","","    static func loadRemainingModules() async {","        \/\/ 나머지 모듈들은 필요시 로드","        let container = DependencyContainer.live","        await container.register(AnalyticsModule())","        await container.register(SocialModule())","        await container.register(PremiumModule())","    }","}"]},{"type":"heading","level":2,"anchor":"%EB%AA%A8%EB%B2%94-%EC%82%AC%EB%A1%80","text":"모범 사례"},{"type":"heading","level":3,"anchor":"1-%EB%8B%A8%EC%9D%BC-%EC%B1%85%EC%9E%84-%EC%9B%90%EC%B9%99","text":"1. 단일 책임 원칙"},{"type":"codeListing","syntax":"swift","code":["\/\/ ✅ 좋은 예: 각 모듈이 명확한 책임을 가짐","struct AuthModule: Module {","    func registerDependencies() async {","        \/\/ 인증 관련 의존성만 등록","    }","}","","struct NetworkModule: Module {","    func registerDependencies() async {","        \/\/ 네트워크 관련 의존성만 등록","    }","}","","\/\/ ❌ 나쁜 예: 여러 관심사가 섞임","struct MixedModule: Module {","    func registerDependencies() async {","        \/\/ 인증, 네트워크, UI가 섞여있음","    }","}"]},{"type":"heading","level":3,"anchor":"2-%EC%9D%98%EC%A1%B4%EC%84%B1-%EB%B0%A9%ED%96%A5-%EA%B4%80%EB%A6%AC","text":"2. 의존성 방향 관리"},{"type":"codeListing","syntax":"swift","code":["\/\/ ✅ 좋은 의존성 방향: Service → UseCase → Repository","struct LayeredArchitectureModules {","    static func register() async {","        await DependencyContainer.bootstrap { container in","            await container.register(RepositoryModule()) \/\/ 하위 계층","            await container.register(UseCaseModule())    \/\/ 중간 계층","            await container.register(ServiceModule())    \/\/ 상위 계층","        }","    }","}"]},{"type":"heading","level":3,"anchor":"3-%ED%99%98%EA%B2%BD-%EB%B6%84%EB%A6%AC","text":"3. 환경 분리"},{"type":"codeListing","code":["struct EnvironmentAwareModule: Module {","    func registerDependencies() async {","        #if DEBUG","        DI.register(LoggerService.self) {","            ConsoleLogger(level: .debug)","        }","        #else","        DI.register(LoggerService.self) {","            FileLogger(level: .warning)","        }","        #endif","    }","}"],"syntax":"swift"},{"type":"heading","level":2,"text":"다음 단계","anchor":"%EB%8B%A4%EC%9D%8C-%EB%8B%A8%EA%B3%84"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"isActive":true,"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/CoreAPIs","type":"reference"},{"text":"에서 모듈에서 사용할 수 있는 등록\/해결 API 학습","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/PropertyWrappers","isActive":true,"type":"reference"},{"type":"text","text":"에서 모듈 내 자동 의존성 주입 활용"}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AutoDIOptimizer"},{"type":"text","text":"에서 모듈 레벨 성능 최적화"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ModuleFactory","type":"reference","isActive":true},{"type":"text","text":"에서 모듈 확장 가능성 탐구"}],"type":"paragraph"}]}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/dicontainer\/modulesystem"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://DiContainer/documentation/DiContainer/PropertyWrappers":{"url":"\/documentation\/dicontainer\/propertywrappers","abstract":[{"text":"DiContainer의 강력한 Property Wrapper들을 활용하여 선언적이고 타입 안전한 의존성 주입을 구현하는 방법","type":"text"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/PropertyWrappers","kind":"article","type":"topic","title":"Property Wrapper 가이드","role":"article"},"doc://DiContainer/documentation/DiContainer/ModuleFactory":{"url":"\/documentation\/dicontainer\/modulefactory","abstract":[{"text":"팩토리로 모듈을 체계적으로 생성하고 Container에 등록합니다.","type":"text"}],"type":"topic","kind":"article","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ModuleFactory","title":"Module Factory","role":"article"},"doc://DiContainer/documentation/DiContainer":{"url":"\/documentation\/dicontainer","role":"collection","type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","abstract":[],"title":"DiContainer","kind":"symbol"},"doc://DiContainer/documentation/DiContainer/AutoDIOptimizer":{"abstract":[{"type":"text","text":"자동으로 의존성 그래프를 생성하고 성능을 최적화하는 시스템"}],"kind":"article","role":"article","url":"\/documentation\/dicontainer\/autodioptimizer","type":"topic","title":"자동 DI 최적화","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AutoDIOptimizer"},"doc://DiContainer/documentation/DiContainer/CoreAPIs":{"url":"\/documentation\/dicontainer\/coreapis","abstract":[],"type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/CoreAPIs","kind":"article","title":"코어 API 가이드","role":"article"}}}