{"kind":"symbol","topicSections":[{"generated":true,"anchor":"Type-Properties","title":"Type Properties","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/ActorHopOptimization\/benchmarkResults","doc:\/\/DiContainer\/documentation\/DiContainer\/ActorHopOptimization\/coreprinciples","doc:\/\/DiContainer\/documentation\/DiContainer\/ActorHopOptimization\/performanceGains"]}],"variants":[{"paths":["\/documentation\/dicontainer\/actorhopoptimization"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ActorHopOptimization","kind":"identifier"}]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"%F0%9F%8E%AF-Actor-Hop%EC%9D%B4%EB%9E%80","text":"🎯 Actor Hop이란?"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Actor Hop","type":"text"}]},{"text":"은 Swift Concurrency에서 한 Actor에서 다른 Actor로 실행 컨텍스트가 전환되는 과정입니다.","type":"text"},{"text":" ","type":"text"},{"text":"이 과정에서 발생하는 오버헤드는 성능에 직접적인 영향을 미칩니다.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Actor Hop 발생 예시","actor MyActor {","    var value: Int = 0","}","","let myActor = MyActor()","","\/\/ 💫 Actor Hop 발생: MainActor -> MyActor","await myActor.value = 42","print(\"Done\")  \/\/ 💫 Actor Hop 발생: MyActor -> MainActor"]},{"type":"heading","level":2,"anchor":"%E2%9A%A1-DiContainer%EC%9D%98-Actor-Hop-%EC%B5%9C%EC%A0%81%ED%99%94","text":"⚡ DiContainer의 Actor Hop 최적화"},{"type":"heading","level":3,"anchor":"1-%EB%AC%B8%EC%A0%9C-%EA%B8%B0%EC%A1%B4-DI-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EC%9D%98-%EB%B9%84%ED%9A%A8%EC%9C%A8%EC%84%B1","text":"1. 문제: 기존 DI 라이브러리의 비효율성"},{"type":"codeListing","syntax":"swift","code":["\/\/ ❌ 비효율적인 패턴 (매번 Actor Hop 발생)","DI.register(UserService.self) { UserServiceImpl() }      \/\/ Hop 1","DI.register(NetworkService.self) { NetworkServiceImpl() } \/\/ Hop 2","DI.register(DatabaseService.self) { DatabaseServiceImpl() } \/\/ Hop 3","\/\/ 총 3번의 Actor Hop 발생!"]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"문제점:"}],"type":"strong"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"의존성 등록할 때마다 Actor 전환 발생"}]}]},{"content":[{"inlineContent":[{"text":"대량 등록 시 성능 저하 심화","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"예측할 수 없는 실행 순서","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","level":3,"anchor":"2-%ED%95%B4%EA%B2%B0%EC%B1%85-Bootstrap-%EB%B0%B0%EC%B9%98-%EC%B2%98%EB%A6%AC","text":"2. 해결책: Bootstrap 배치 처리"},{"type":"codeListing","syntax":"swift","code":["\/\/ ✅ 효율적인 패턴 (한 번의 Actor Hop)","await DependencyContainer.bootstrap { container in","    \/\/ 모든 등록이 동일한 Actor 컨텍스트에서 실행","    container.register(UserService.self) { UserServiceImpl() }","    container.register(NetworkService.self) { NetworkServiceImpl() }","    container.register(DatabaseService.self) { DatabaseServiceImpl() }","}","\/\/ 총 1번의 Actor Hop만 발생!"]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"개선점:"}]}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"모든 등록을 한 번에 배치 처리"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Actor 전환 횟수 최소화"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"예측 가능한 성능 특성"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","level":2,"anchor":"%F0%9F%8F%97%EF%B8%8F-Container-%EB%AA%A8%EB%93%88%EC%9D%98-Actor-Hop-%EC%B5%9C%EC%A0%81%ED%99%94","text":"🏗️ Container 모듈의 Actor Hop 최적화"},{"type":"heading","level":3,"anchor":"%EC%8A%A4%EB%83%85%EC%83%B7-%EA%B8%B0%EB%B0%98-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98","text":"스냅샷 기반 아키텍처"},{"type":"codeListing","syntax":"swift","code":["public actor Container {","    private var modules: [Module] = []","","    \/\/ 1. 모듈들을 내부 배열에 저장 (Actor 내부)","    public func register(_ module: Module) -> Self {","        modules.append(module)  \/\/ ❌ Actor Hop 없음","        return self","    }","","    \/\/ 2. 모든 모듈을 한 번에 병렬 처리","    public func build() async {","        let moduleSnapshot = modules  \/\/ 스냅샷 생성","","        await withTaskGroup(of: Void.self) { group in","            for module in moduleSnapshot {  \/\/ 병렬 처리","                group.addTask {","                    await module.register()  \/\/ ✅ 효율적 등록","                }","            }","        }","    }","}"]},{"type":"heading","level":3,"anchor":"%EB%B3%91%EB%A0%AC-%EC%B2%98%EB%A6%AC%EC%99%80-Actor-Hop-%EA%B4%80%EB%A6%AC","text":"병렬 처리와 Actor Hop 관리"},{"type":"codeListing","syntax":null,"code":["┌─────────────────────┐","│   Main Thread       │","│                     │","│ Container().register│ ──┐","│    .register        │   │ Single Actor Hop","│    .register        │   │","│    .build()         │ ──┘","└─────────────────────┘","          │","          ▼","┌─────────────────────┐","│  Container Actor    │","│                     │","│ modules.append()    │ ◄── No Actor Hop","│ modules.append()    │ ◄── No Actor Hop","│ modules.append()    │ ◄── No Actor Hop","│                     │","│ Parallel build()    │ ◄── Optimized processing","└─────────────────────┘"]},{"type":"heading","level":2,"anchor":"%F0%9F%93%8A-%EC%84%B1%EB%8A%A5-%EC%B8%A1%EC%A0%95-%EA%B2%B0%EA%B3%BC","text":"📊 성능 측정 결과"},{"type":"heading","level":3,"anchor":"%EC%8B%A4%EC%A0%9C-%EC%B8%A1%EC%A0%95-%EB%8D%B0%EC%9D%B4%ED%84%B0","text":"실제 측정 데이터"},{"type":"codeListing","syntax":"swift","code":["\/\/ 테스트 시나리오: 100개 의존성 등록","","\/\/ ❌ 개별 등록 방식","let startTime = CFAbsoluteTimeGetCurrent()","for i in 0..<100 {","    DI.register(\"Service\\(i)\", factory: { MockService() })","}","let individualTime = CFAbsoluteTimeGetCurrent() - startTime","\/\/ 결과: ~50ms (100번의 Actor Hop)","","\/\/ ✅ Bootstrap 배치 방식","let startTime2 = CFAbsoluteTimeGetCurrent()","await DependencyContainer.bootstrap { container in","    for i in 0..<100 {","        container.register(\"Service\\(i)\", factory: { MockService() })","    }","}","let batchTime = CFAbsoluteTimeGetCurrent() - startTime2","\/\/ 결과: ~5ms (1번의 Actor Hop)"]},{"type":"heading","level":3,"anchor":"%EC%84%B1%EB%8A%A5-%EA%B0%9C%EC%84%A0-%EB%B9%84%EA%B5%90%ED%91%9C","text":"성능 개선 비교표"},{"rows":[[[{"inlineContent":[{"type":"text","text":"등록 개수"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"개별 방식"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Bootstrap 방식"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"개선율"}],"type":"paragraph"}]],[[{"inlineContent":[{"text":"10개","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"5ms","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"0.5ms"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"10x"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"50개"}],"type":"paragraph"}],[{"inlineContent":[{"text":"25ms","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"2.5ms","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"10x"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"100개"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"50ms"}]}],[{"type":"paragraph","inlineContent":[{"text":"5ms","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"10x"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"500개","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"250ms"}]}],[{"type":"paragraph","inlineContent":[{"text":"25ms","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"10x","type":"text"}]}]]],"type":"table","header":"row"},{"anchor":"%F0%9F%94%A7-%EC%8B%A4%EC%A0%9C-%EA%B5%AC%ED%98%84%EC%97%90%EC%84%9C%EC%9D%98-%EC%B5%9C%EC%A0%81%ED%99%94-%EA%B8%B0%EB%B2%95","level":2,"text":"🔧 실제 구현에서의 최적화 기법","type":"heading"},{"anchor":"1-TaskGroup-%ED%99%9C%EC%9A%A9-%EB%B3%91%EB%A0%AC-%EC%B2%98%EB%A6%AC","level":3,"text":"1. TaskGroup 활용 병렬 처리","type":"heading"},{"code":["public func build() async {","    let moduleSnapshot = modules  \/\/ Actor 내부에서 스냅샷 생성","","    \/\/ 병렬 처리로 등록 시간 단축","    await withTaskGroup(of: Void.self) { group in","        for module in moduleSnapshot {","            group.addTask {","                await module.register()","            }","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"anchor":"2-%EC%B2%B4%EC%9D%B4%EB%8B%9D%EC%9D%84-%ED%86%B5%ED%95%9C-Fluent-API","level":3,"text":"2. 체이닝을 통한 Fluent API","type":"heading"},{"code":["\/\/ Actor Hop 없이 연속 호출 가능","let container = Container()","    .register(Module(UserService.self) { UserServiceImpl() })","    .register(Module(NetworkService.self) { NetworkServiceImpl() })","    .register(Module(DatabaseService.self) { DatabaseServiceImpl() })","","await container.build()  \/\/ 한 번의 Actor Hop으로 모든 등록 완료"],"type":"codeListing","syntax":"swift"},{"anchor":"3-%EC%A7%80%EC%97%B0-%EC%8B%A4%ED%96%89%EC%9D%84-%ED%86%B5%ED%95%9C-%EC%B5%9C%EC%A0%81%ED%99%94","level":3,"text":"3. 지연 실행을 통한 최적화","type":"heading"},{"code":["\/\/ 등록 시점에는 Actor Hop 없음","container.register(expensiveModule)  \/\/ ❌ 즉시 실행하지 않음","container.register(anotherModule)    \/\/ ❌ 누적만 함","","\/\/ build() 시점에 한 번에 실행","await container.build()  \/\/ ✅ 배치 처리로 최적화"],"type":"codeListing","syntax":"swift"},{"anchor":"%F0%9F%92%A1-Best-Practices","level":2,"text":"💡 Best Practices","type":"heading"},{"anchor":"%E2%9C%85-DO-%EA%B6%8C%EC%9E%A5-%ED%8C%A8%ED%84%B4","level":3,"text":"✅ DO - 권장 패턴","type":"heading"},{"anchor":"1-Bootstrap-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EB%B0%B0%EC%B9%98-%EB%93%B1%EB%A1%9D","level":4,"text":"1. Bootstrap 사용하여 배치 등록","type":"heading"},{"code":["await DependencyContainer.bootstrap { container in","    \/\/ 모든 의존성을 여기서 한 번에 등록","    AppDIContainer.setupAllDependencies(container)","}"],"type":"codeListing","syntax":"swift"},{"anchor":"2-Container-%EB%AA%A8%EB%93%88%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%EA%B7%B8%EB%A3%B9-%EB%93%B1%EB%A1%9D","level":4,"text":"2. Container 모듈을 사용한 그룹 등록","type":"heading"},{"code":["let container = Container()","    .register(userModule)","    .register(networkModule)","    .register(databaseModule)","","await container.build()  \/\/ 효율적인 배치 처리"],"type":"codeListing","syntax":"swift"},{"anchor":"3-%EB%AA%A8%EB%93%88-%ED%8C%A9%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4","level":4,"text":"3. 모듈 팩토리 패턴","type":"heading"},{"code":["struct NetworkModule {","    static func create() -> Module {","        return Module(NetworkService.self) {","            NetworkServiceImpl()","        }","    }","}","","\/\/ 사용 시","container.register(NetworkModule.create())  \/\/ Actor Hop 없음"],"type":"codeListing","syntax":"swift"},{"anchor":"%E2%9D%8C-DONT-%ED%94%BC%ED%95%B4%EC%95%BC-%ED%95%A0-%ED%8C%A8%ED%84%B4","level":3,"text":"❌ DON’T - 피해야 할 패턴","type":"heading"},{"anchor":"1-%EA%B0%9C%EB%B3%84%EC%A0%81%EC%9D%B8-DI-%EB%93%B1%EB%A1%9D","level":4,"text":"1. 개별적인 DI 등록","type":"heading"},{"code":["\/\/ ❌ 매번 Actor Hop 발생","DI.register(ServiceA.self) { ServiceAImpl() }","DI.register(ServiceB.self) { ServiceBImpl() }","DI.register(ServiceC.self) { ServiceCImpl() }"],"type":"codeListing","syntax":"swift"},{"anchor":"2-%EB%9F%B0%ED%83%80%EC%9E%84-%EC%A4%91-%EB%B9%88%EB%B2%88%ED%95%9C-%EB%93%B1%EB%A1%9D","level":4,"text":"2. 런타임 중 빈번한 등록","type":"heading"},{"code":["\/\/ ❌ 런타임에 계속 등록하면 성능 저하","func addNewService() {","    DI.register(NewService.self) { NewServiceImpl() }","}"],"type":"codeListing","syntax":"swift"},{"anchor":"3-%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC%EB%A1%9C-%EC%9D%B8%ED%95%9C-%EB%B8%94%EB%A1%9C%ED%82%B9","level":4,"text":"3. 동기 처리로 인한 블로킹","type":"heading"},{"code":["\/\/ ❌ 비동기 처리 없이 순차 등록","modules.forEach { module in","    module.register()  \/\/ 블로킹 발생","}"],"type":"codeListing","syntax":"swift"},{"anchor":"%F0%9F%8E%AF-%EA%B2%B0%EB%A1%A0","level":2,"text":"🎯 결론","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"DiContainer의 Actor Hop 최적화는 단순한 성능 개선이 아닙니다:"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"아키텍처적 이점","type":"text"}]},{"type":"text","text":": 배치 처리를 통한 시스템 설계 개선"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"사용자 경험","type":"text"}],"type":"strong"},{"text":": 앱 시작 시간 단축으로 사용자 만족도 향상","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"확장성","type":"text"}]},{"type":"text","text":": 대규모 의존성 그래프에서도 일정한 성능 보장"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"예측 가능성","type":"text"}],"type":"strong"},{"text":": 명확한 초기화 시점과 일관된 성능 특성","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"이러한 최적화를 통해 DiContainer는 Swift Concurrency 시대에 적합한","type":"text"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"고성능 의존성 주입 시스템"}]},{"text":"을 제공합니다.","type":"text"}]}]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/DiContainer\/documentation\/DiContainer\/ActorHopOptimization"},"metadata":{"navigatorTitle":[{"text":"ActorHopOptimization","kind":"identifier"}],"title":"ActorHopOptimization","modules":[{"name":"DiContainer"}],"roleHeading":"Enumeration","symbolKind":"enum","externalID":"s:11DiContainer20ActorHopOptimizationO","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ActorHopOptimization","kind":"identifier"}],"role":"symbol"},"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://DiContainer/documentation/DiContainer/ActorHopOptimization/coreprinciples":{"abstract":[{"text":"Actor Hop 최적화의 핵심 원칙들","type":"text"}],"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"coreprinciples"},{"kind":"text","text":": ["},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"kind":"text","text":"]"}],"role":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ActorHopOptimization\/coreprinciples","title":"coreprinciples","type":"topic","kind":"symbol","url":"\/documentation\/dicontainer\/actorhopoptimization\/coreprinciples"},"doc://DiContainer/documentation/DiContainer/ActorHopOptimization/performanceGains":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"performanceGains","kind":"identifier"},{"text":": [","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":"]","kind":"text"}],"abstract":[{"text":"성능 개선 효과","type":"text"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ActorHopOptimization\/performanceGains","title":"performanceGains","url":"\/documentation\/dicontainer\/actorhopoptimization\/performancegains","role":"symbol","kind":"symbol","type":"topic"},"doc://DiContainer/documentation/DiContainer/ActorHopOptimization":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ActorHopOptimization"}],"abstract":[],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ActorHopOptimization","title":"ActorHopOptimization","url":"\/documentation\/dicontainer\/actorhopoptimization","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ActorHopOptimization"}],"kind":"symbol","type":"topic"},"doc://DiContainer/documentation/DiContainer/ActorHopOptimization/benchmarkResults":{"abstract":[{"text":"실제 측정된 성능 지표","type":"text"}],"url":"\/documentation\/dicontainer\/actorhopoptimization\/benchmarkresults","kind":"symbol","title":"benchmarkResults","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"benchmarkResults"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"]"}],"type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ActorHopOptimization\/benchmarkResults","role":"symbol"},"doc://DiContainer/documentation/DiContainer":{"kind":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","type":"topic","abstract":[],"url":"\/documentation\/dicontainer","title":"DiContainer","role":"collection"}}}