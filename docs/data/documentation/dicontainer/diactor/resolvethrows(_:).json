{"metadata":{"title":"resolveThrows(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolveThrows","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"symbolKind":"method","modules":[{"name":"DiContainer"}],"roleHeading":"Instance Method","externalID":"s:11DiContainer7DIActorC13resolveThrowsyxxmKs8SendableRzlF"},"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer","doc:\/\/DiContainer\/documentation\/DiContainer\/DIActor"]]},"variants":[{"paths":["\/documentation\/dicontainer\/diactor\/resolvethrows(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/DiContainer\/documentation\/DiContainer\/DIActor\/resolveThrows(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"throwing 방식으로 타입을 해결합니다."}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolveThrows","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"type","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":" ","kind":"text"},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP","text":"Sendable"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"parameters":[{"name":"type","content":[{"type":"paragraph","inlineContent":[{"text":"해결할 타입","type":"text"}]}]}],"kind":"parameters"},{"content":[{"level":2,"type":"heading","text":"Return Value","anchor":"return-value"},{"inlineContent":[{"type":"text","text":"해결된 인스턴스"}],"type":"paragraph"}],"kind":"content"},{"content":[{"anchor":"discussion","level":2,"text":"Discussion","type":"heading"},{"name":"Throws","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"DIError.dependencyNotFound","type":"text"}]}],"type":"aside"}],"kind":"content"}],"sections":[],"kind":"symbol","schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://DiContainer/documentation/DiContainer/DIActor/resolveThrows(_:)":{"kind":"symbol","url":"\/documentation\/dicontainer\/diactor\/resolvethrows(_:)","title":"resolveThrows(_:)","abstract":[{"type":"text","text":"throwing 방식으로 타입을 해결합니다."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolveThrows","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/DIActor\/resolveThrows(_:)","role":"symbol"},"doc://DiContainer/documentation/DiContainer/DIActor":{"kind":"symbol","title":"DIActor","url":"\/documentation\/dicontainer\/diactor","abstract":[{"type":"text","text":"Thread-safe DI operations을 위한 Actor 기반 구현"}],"role":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/DIActor","navigatorTitle":[{"kind":"identifier","text":"DIActor"}],"fragments":[{"text":"actor","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DIActor"}],"type":"topic"},"doc://DiContainer/documentation/DiContainer":{"type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","kind":"symbol","title":"DiContainer","url":"\/documentation\/dicontainer","role":"collection","abstract":[{"type":"text","text":"현대적인 Swift Concurrency와 Actor 모델을 위해 설계된 고성능 의존성 주입 프레임워크"}]}}}