{"topicSections":[{"anchor":"Initializers","title":"Initializers","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerRegister\/init(_:)","doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerRegister\/init(_:defaultFactory:)"],"generated":true},{"anchor":"Instance-Properties","title":"Instance Properties","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerRegister\/wrappedValue"],"generated":true}],"metadata":{"symbolKind":"struct","modules":[{"name":"DiContainer"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ContainerRegister","kind":"identifier"}],"title":"ContainerRegister","roleHeading":"Structure","role":"symbol","externalID":"s:11DiContainer0B8RegisterV","navigatorTitle":[{"text":"ContainerRegister","kind":"identifier"}]},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"attribute","text":"@propertyWrapper"},{"kind":"text","text":" "},{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ContainerRegister"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"T"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"Sendable","preciseIdentifier":"s:s8SendableP"}],"platforms":["macOS"]}]},{"content":[{"type":"heading","text":"개요","anchor":"%EA%B0%9C%EC%9A%94","level":2},{"type":"paragraph","inlineContent":[{"code":"ContainerRegister","type":"codeVoice"},{"type":"text","text":"는 Swift의 프로퍼티 래퍼(Property Wrapper) 기능을 활용하여"},{"type":"text","text":" "},{"type":"text","text":"의존성 주입을 선언적이고 타입 안전하게 수행할 수 있도록 하는 핵심 컴포넌트입니다."}]},{"type":"paragraph","inlineContent":[{"text":"이 프로퍼티 래퍼는 전역 ","type":"text"},{"code":"DependencyContainer.live","type":"codeVoice"},{"text":"와 KeyPath를 사용하여","type":"text"},{"text":" ","type":"text"},{"text":"컴파일 타임 타입 체크와 런타임 안전성을 모두 보장합니다.","type":"text"}]},{"type":"heading","text":"핵심 특징","anchor":"%ED%95%B5%EC%8B%AC-%ED%8A%B9%EC%A7%95","level":2},{"type":"heading","text":"🎯 선언적 의존성 주입","anchor":"%F0%9F%8E%AF-%EC%84%A0%EC%96%B8%EC%A0%81-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85","level":3},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"간결한 구문","type":"text"}],"type":"strong"},{"type":"text","text":": "},{"code":"@ContainerRegister(\\.service)","type":"codeVoice"},{"type":"text","text":" 한 줄로 의존성 주입 완료"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"타입 안전"}]},{"type":"text","text":": 컴파일 타임에 타입 불일치 검출"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"KeyPath 기반"}]},{"type":"text","text":": 문자열이 아닌 타입 안전한 키 사용"}],"type":"paragraph"}]}]},{"type":"heading","text":"🔒 안전한 폴백 메커니즘","anchor":"%F0%9F%94%92-%EC%95%88%EC%A0%84%ED%95%9C-%ED%8F%B4%EB%B0%B1-%EB%A9%94%EC%BB%A4%EB%8B%88%EC%A6%98","level":3},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"기본 팩토리","type":"text"}],"type":"strong"},{"text":": 의존성 누락 시 자동으로 기본 구현체 등록","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"조기 오류 검출"}],"type":"strong"},{"text":": 설정 문제를 런타임 초기에 발견","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"명확한 오류 메시지"}],"type":"strong"},{"text":": 문제 해결을 위한 상세한 가이드 제공","type":"text"}]}]}]},{"type":"heading","text":"⚡ 성능 최적화","anchor":"%E2%9A%A1-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94","level":3},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"지연 초기화","type":"text"}],"type":"strong"},{"type":"text","text":": 실제 사용 시점에만 의존성 해결"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"스레드 안전"}]},{"type":"text","text":": 동시성 환경에서 안전한 접근"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"메모리 효율"}],"type":"strong"},{"text":": 불필요한 인스턴스 생성 방지","type":"text"}]}]}]},{"type":"heading","text":"기본 사용 패턴","anchor":"%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9-%ED%8C%A8%ED%84%B4","level":2},{"type":"heading","text":"1단계: DependencyContainer 확장 정의","anchor":"1%EB%8B%A8%EA%B3%84-DependencyContainer-%ED%99%95%EC%9E%A5-%EC%A0%95%EC%9D%98","level":3},{"syntax":"swift","type":"codeListing","code":["extension DependencyContainer {","    \/\/\/ 사용자 서비스 의존성","    var userService: UserServiceProtocol? {","        resolve(UserServiceProtocol.self)","    }","    ","    \/\/\/ 네트워크 서비스 의존성  ","    var networkService: NetworkServiceProtocol? {","        resolve(NetworkServiceProtocol.self)","    }","    ","    \/\/\/ 로거 의존성","    var logger: LoggerProtocol? {","        resolve(LoggerProtocol.self)","    }","}"]},{"type":"heading","text":"2단계: 의존성 등록 (부트스트랩 시)","anchor":"2%EB%8B%A8%EA%B3%84-%EC%9D%98%EC%A1%B4%EC%84%B1-%EB%93%B1%EB%A1%9D-%EB%B6%80%ED%8A%B8%EC%8A%A4%ED%8A%B8%EB%9E%A9-%EC%8B%9C","level":3},{"syntax":"swift","type":"codeListing","code":["await DependencyContainer.bootstrap { container in","    container.register(UserServiceProtocol.self) {","        UserService()","    }","    ","    container.register(NetworkServiceProtocol.self) {","        NetworkService(baseURL: URL(string: \"https:\/\/api.example.com\")!)","    }","    ","    container.register(LoggerProtocol.self) {","        ConsoleLogger()","    }","}"]},{"type":"heading","text":"3단계: 프로퍼티 래퍼를 통한 의존성 주입","anchor":"3%EB%8B%A8%EA%B3%84-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EB%9E%98%ED%8D%BC%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85","level":3},{"syntax":"swift","type":"codeListing","code":["class UserViewModel: ObservableObject {","    @ContainerRegister(\\.userService)","    private var userService: UserServiceProtocol","    ","    @ContainerRegister(\\.networkService)  ","    private var networkService: NetworkServiceProtocol","    ","    @ContainerRegister(\\.logger)","    private var logger: LoggerProtocol","    ","    func loadUser(id: String) async {","        logger.info(\"사용자 로딩 시작: \\(id)\")","        ","        do {","            let user = try await userService.getUser(id: id)","            logger.info(\"사용자 로딩 성공: \\(user.name)\")","            \/\/ UI 업데이트...","        } catch {","            logger.error(\"사용자 로딩 실패: \\(error)\")","        }","    }","}"]},{"type":"heading","text":"고급 사용 패턴","anchor":"%EA%B3%A0%EA%B8%89-%EC%82%AC%EC%9A%A9-%ED%8C%A8%ED%84%B4","level":2},{"type":"heading","text":"기본 팩토리를 활용한 안전한 주입","anchor":"%EA%B8%B0%EB%B3%B8-%ED%8C%A9%ED%86%A0%EB%A6%AC%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%95%88%EC%A0%84%ED%95%9C-%EC%A3%BC%EC%9E%85","level":3},{"syntax":"swift","type":"codeListing","code":["class WeatherService {","    \/\/ 프로덕션 환경에서는 실제 서비스, 개발\/테스트에서는 Mock 사용","    @ContainerRegister(\\.locationService, defaultFactory: { ","        MockLocationService() ","    })","    private var locationService: LocationServiceProtocol","    ","    \/\/ 네트워크 실패 시 로컬 캐시 사용","    @ContainerRegister(\\.weatherDataSource, defaultFactory: { ","        LocalWeatherDataSource() ","    })","    private var weatherDataSource: WeatherDataSourceProtocol","    ","    func getCurrentWeather() async throws -> Weather {","        let location = try await locationService.getCurrentLocation()","        return try await weatherDataSource.getWeather(for: location)","    }","}"]},{"type":"heading","text":"테스트에서의 활용","anchor":"%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%97%90%EC%84%9C%EC%9D%98-%ED%99%9C%EC%9A%A9","level":3},{"syntax":"swift","type":"codeListing","code":["class UserViewModelTests: XCTestCase {","    ","    override func setUp() async throws {","        await super.setUp()","        ","        \/\/ 테스트용 의존성 등록","        await DependencyContainer.resetForTesting()","        await DependencyContainer.bootstrap { container in","            container.register(UserServiceProtocol.self) {","                MockUserService(shouldFail: false)","            }","            container.register(LoggerProtocol.self) {","                MockLogger()","            }","        }","    }","    ","    func testLoadUserSuccess() async throws {","        let viewModel = UserViewModel()","        ","        await viewModel.loadUser(id: \"123\")","        ","        \/\/ 검증 로직...","    }","    ","    func testLoadUserFailure() async throws {","        \/\/ 실패 시나리오를 위한 Mock 교체","        await DependencyContainer.update { container in","            container.register(UserServiceProtocol.self) {","                MockUserService(shouldFail: true)","            }","        }","        ","        let viewModel = UserViewModel()","        await viewModel.loadUser(id: \"123\")","        ","        \/\/ 에러 처리 검증...","    }","}"]},{"type":"heading","text":"조건부 의존성 주입","anchor":"%EC%A1%B0%EA%B1%B4%EB%B6%80-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85","level":3},{"syntax":"swift","type":"codeListing","code":["class AnalyticsManager {","    @ContainerRegister(\\.analyticsService, defaultFactory: {","        #if DEBUG","        return MockAnalyticsService()","        #else","        return FirebaseAnalyticsService()","        #endif","    })","    private var analyticsService: AnalyticsServiceProtocol","    ","    func trackEvent(_ event: String, parameters: [String: Any] = [:]) {","        analyticsService.track(event, parameters: parameters)","    }","}"]},{"type":"heading","text":"동작 원리","anchor":"%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC","level":2},{"type":"heading","text":"의존성 해결 순서","anchor":"%EC%9D%98%EC%A1%B4%EC%84%B1-%ED%95%B4%EA%B2%B0-%EC%88%9C%EC%84%9C","level":3},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"KeyPath 조회"}]},{"text":": 지정된 KeyPath로 ","type":"text"},{"code":"DependencyContainer.live","type":"codeVoice"},{"text":"에서 조회","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"등록된 의존성 확인","type":"text"}]},{"type":"text","text":": 타입이 이미 등록되어 있는지 확인"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"기본 팩토리 실행","type":"text"}]},{"type":"text","text":": 미등록 상태이고 "},{"type":"codeVoice","code":"defaultFactory"},{"type":"text","text":"가 제공된 경우 실행"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"자동 등록","type":"text"}],"type":"strong"},{"text":": 기본 팩토리로 생성된 인스턴스를 컨테이너에 등록","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"인스턴스 반환"}]},{"type":"text","text":": 해결된 의존성 인스턴스 반환"}]}]}]},{"type":"heading","text":"오류 처리 메커니즘","anchor":"%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC-%EB%A9%94%EC%BB%A4%EB%8B%88%EC%A6%98","level":3},{"syntax":"swift","type":"codeListing","code":["\/\/ 등록되지 않았고 기본 팩토리도 없는 경우","@ContainerRegister(\\.missingService)","private var missingService: MissingServiceProtocol","\/\/ ↓ 접근 시 fatalError 발생","\/\/ \"MissingServiceProtocol 타입의 등록된 의존성을 찾을 수 없으며, 기본 팩토리도 제공되지 않았습니다.\""]},{"type":"heading","text":"스레드 안전성 보장","anchor":"%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%95%88%EC%A0%84%EC%84%B1-%EB%B3%B4%EC%9E%A5","level":3},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"DependencyContainer"},{"type":"text","text":"의 동시성 안전 큐를 통한 스레드 안전 접근"}]}]},{"content":[{"inlineContent":[{"text":"여러 스레드에서 동시에 같은 의존성에 접근해도 안전","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"기본 팩토리 실행 중 다른 스레드의 접근을 적절히 직렬화","type":"text"}]}]}]},{"type":"heading","text":"베스트 프랙티스","anchor":"%EB%B2%A0%EC%8A%A4%ED%8A%B8-%ED%94%84%EB%9E%99%ED%8B%B0%EC%8A%A4","level":2},{"type":"heading","text":"✅ 권장 사용법","anchor":"%E2%9C%85-%EA%B6%8C%EC%9E%A5-%EC%82%AC%EC%9A%A9%EB%B2%95","level":3},{"syntax":"swift","type":"codeListing","code":["class GoodService {","    \/\/ 프로토콜 타입으로 의존성 선언","    @ContainerRegister(\\.userRepository)","    private var userRepository: UserRepositoryProtocol","    ","    \/\/ 기본 구현체 제공으로 안전성 확보","    @ContainerRegister(\\.logger, defaultFactory: { ConsoleLogger() })","    private var logger: LoggerProtocol","    ","    \/\/ private 접근 제어로 캡슐화","    private init() {}","}"]},{"type":"heading","text":"❌ 피해야 할 패턴","anchor":"%E2%9D%8C-%ED%94%BC%ED%95%B4%EC%95%BC-%ED%95%A0-%ED%8C%A8%ED%84%B4","level":3},{"syntax":"swift","type":"codeListing","code":["class BadService {","    \/\/ 구체 타입에 직접 의존 - 테스트 어려움","    @ContainerRegister(\\.userRepository)","    private var userRepository: ConcreteUserRepository","    ","    \/\/ public으로 노출 - 캡슐화 위반","    @ContainerRegister(\\.logger)","    public var logger: LoggerProtocol","    ","    \/\/ 기본 팩토리 없이 사용 - 런타임 크래시 위험","    @ContainerRegister(\\.optionalService)","    private var optionalService: OptionalServiceProtocol","}"]},{"type":"heading","text":"성능 고려사항","anchor":"%EC%84%B1%EB%8A%A5-%EA%B3%A0%EB%A0%A4%EC%82%AC%ED%95%AD","level":2},{"type":"heading","text":"메모리 사용량","anchor":"%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%82%AC%EC%9A%A9%EB%9F%89","level":3},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"프로퍼티 래퍼 오버헤드","type":"text"}]},{"type":"text","text":": 거의 없음 (KeyPath와 옵셔널 클로저만 저장)"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"지연 해결","type":"text"}]},{"type":"text","text":": 실제 사용 시점까지 인스턴스 생성 지연"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"인스턴스 재사용"}]},{"type":"text","text":": 등록된 의존성은 컨테이너에서 관리"}]}]}]},{"type":"heading","text":"성능 최적화 팁","anchor":"%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-%ED%8C%81","level":3},{"syntax":"swift","type":"codeListing","code":["class OptimizedService {","    \/\/ 자주 사용되는 의존성은 생성자에서 해결","    private let criticalService: CriticalServiceProtocol","    ","    \/\/ 가끔 사용되는 의존성은 프로퍼티 래퍼로 지연 해결","    @ContainerRegister(\\.optionalService, defaultFactory: { DefaultOptionalService() })","    private var optionalService: OptionalServiceProtocol","    ","    init() {","        self.criticalService = DependencyContainer.live.resolve(CriticalServiceProtocol.self)!","    }","}"]},{"type":"heading","text":"문제 해결 가이드","anchor":"%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EA%B0%80%EC%9D%B4%EB%93%9C","level":2},{"type":"heading","text":"일반적인 오류와 해결방법","anchor":"%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-%EC%98%A4%EB%A5%98%EC%99%80-%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95","level":3},{"type":"heading","text":"1. 키패스 타입 불일치","anchor":"1-%ED%82%A4%ED%8C%A8%EC%8A%A4-%ED%83%80%EC%9E%85-%EB%B6%88%EC%9D%BC%EC%B9%98","level":4},{"syntax":"swift","type":"codeListing","code":["\/\/ ❌ 오류: 타입 불일치","extension DependencyContainer {","    var userService: UserServiceProtocol? {","        resolve(AnotherServiceProtocol.self) \/\/ 잘못된 타입","    }","}","","\/\/ ✅ 해결: 일치하는 타입 사용","extension DependencyContainer {","    var userService: UserServiceProtocol? {","        resolve(UserServiceProtocol.self) \/\/ 올바른 타입","    }","}"]},{"type":"heading","text":"2. 순환 의존성 문제","anchor":"2-%EC%88%9C%ED%99%98-%EC%9D%98%EC%A1%B4%EC%84%B1-%EB%AC%B8%EC%A0%9C","level":4},{"type":"codeListing","syntax":"swift","code":["\/\/ ❌ 문제: 순환 참조","class ServiceA {","    @ContainerRegister(\\.serviceB)","    private var serviceB: ServiceBProtocol","}","","class ServiceB {","    @ContainerRegister(\\.serviceA) ","    private var serviceA: ServiceAProtocol","}","","\/\/ ✅ 해결: 인터페이스 분리","protocol ServiceADelegate: AnyObject {","    func handleEvent()","}","","class ServiceA: ServiceADelegate {","    @ContainerRegister(\\.serviceB)","    private var serviceB: ServiceBProtocol","    ","    func handleEvent() {","        \/\/ 처리 로직","    }","}","","class ServiceB {","    weak var delegate: ServiceADelegate?","}"]},{"anchor":"%EA%B4%80%EB%A0%A8-API","type":"heading","text":"관련 API","level":2},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/DependencyContainer"},{"type":"text","text":": 의존성 컨테이너 본체"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/RegisterModule"},{"text":": 모듈 기반 의존성 등록","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Container","isActive":true},{"type":"text","text":": 배치 등록용 컨테이너"}],"type":"paragraph"}]}]},{"text":"사용법","anchor":"%EC%82%AC%EC%9A%A9%EB%B2%95","level":2,"type":"heading"},{"text":"기본 의존성 주입","anchor":"%EA%B8%B0%EB%B3%B8-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85","level":3,"type":"heading"},{"inlineContent":[{"text":"먼저 ","type":"text"},{"code":"DependencyContainer","type":"codeVoice"},{"text":"를 확장하여 의존성에 대한 계산 프로퍼티를 제공합니다:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension DependencyContainer {","    var networkService: NetworkServiceProtocol? {","        resolve(NetworkServiceProtocol.self)","    }","","    var authRepository: AuthRepositoryProtocol? {","        resolve(AuthRepositoryProtocol.self)","    }","}"]},{"inlineContent":[{"type":"text","text":"앱 초기화 중에 의존성을 등록합니다:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ 앱의 부트스트랩\/설정 단계에서","DependencyContainer.live.register(NetworkServiceProtocol.self) {","    DefaultNetworkService()","}","","DependencyContainer.live.register(AuthRepositoryProtocol.self) {","    DefaultAuthRepository()","}"]},{"inlineContent":[{"type":"text","text":"마지막으로 타입에서 의존성을 주입합니다:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["final class APIClient {","    @ContainerRegister(\\.networkService)","    private var networkService: NetworkServiceProtocol","","    @ContainerRegister(\\.authRepository)","    private var authRepository: AuthRepositoryProtocol","","    func performAuthenticatedRequest() async throws -> Data {","        let token = try await authRepository.getAccessToken()","        return try await networkService.request(\"\/api\/data\", headers: [\"Authorization\": \"Bearer \\(token)\"])","    }","}"]},{"text":"기본 팩토리를 이용한 자동 등록","anchor":"%EA%B8%B0%EB%B3%B8-%ED%8C%A9%ED%86%A0%EB%A6%AC%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%9E%90%EB%8F%99-%EB%93%B1%EB%A1%9D","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"테스트나 개발 환경에서는 기본 구현체를 제공할 수 있습니다:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["final class TestableService {","    @ContainerRegister(\\.networkService, defaultFactory: { MockNetworkService() })","    private var networkService: NetworkServiceProtocol","","    \/\/ 실제 구현체가 등록되지 않은 경우 MockNetworkService를 사용합니다","}"]},{"text":"주제","anchor":"%EC%A3%BC%EC%A0%9C","level":2,"type":"heading"},{"text":"초기화자","anchor":"%EC%B4%88%EA%B8%B0%ED%99%94%EC%9E%90","level":3,"type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerRegister\/init(_:)","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerRegister\/init(_:defaultFactory:)"}]}]}],"type":"unorderedList"},{"text":"프로퍼티","anchor":"%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0","level":3,"type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerRegister\/wrappedValue","type":"reference","isActive":true}]}]}],"type":"unorderedList"}],"kind":"content"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/dicontainer\/containerregister"]}],"sections":[],"identifier":{"url":"doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerRegister","interfaceLanguage":"swift"},"references":{"doc://DiContainer/documentation/DiContainer/Container":{"type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Container","navigatorTitle":[{"kind":"identifier","text":"Container"}],"fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"Container"}],"role":"symbol","title":"Container","abstract":[],"kind":"symbol","url":"\/documentation\/dicontainer\/container"},"doc://DiContainer/documentation/DiContainer/ContainerRegister":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ContainerRegister"}],"url":"\/documentation\/dicontainer\/containerregister","title":"ContainerRegister","role":"symbol","type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerRegister","abstract":[],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ContainerRegister"}]},"doc://DiContainer/documentation/DiContainer/DependencyContainer":{"role":"symbol","url":"\/documentation\/dicontainer\/dependencycontainer","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DependencyContainer","kind":"identifier"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/DependencyContainer","kind":"symbol","type":"topic","abstract":[],"navigatorTitle":[{"text":"DependencyContainer","kind":"identifier"}],"title":"DependencyContainer"},"doc://DiContainer/documentation/DiContainer/RegisterModule":{"kind":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/RegisterModule","abstract":[],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RegisterModule"}],"navigatorTitle":[{"kind":"identifier","text":"RegisterModule"}],"url":"\/documentation\/dicontainer\/registermodule","title":"RegisterModule"},"doc://DiContainer/documentation/DiContainer/ContainerRegister/init(_:)":{"abstract":[{"text":"KeyPath를 사용하여 의존성 주입 프로퍼티 래퍼를 생성합니다.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/dicontainer\/containerregister\/init(_:)","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerRegister\/init(_:)","title":"init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:s7KeyPathC","text":"KeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:11DiContainer010DependencyB0C","text":"DependencyContainer","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?>)","kind":"text"}]},"doc://DiContainer/documentation/DiContainer/ContainerRegister/wrappedValue":{"title":"wrappedValue","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"wrappedValue","kind":"identifier"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"주입된 의존성 인스턴스입니다."}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerRegister\/wrappedValue","url":"\/documentation\/dicontainer\/containerregister\/wrappedvalue"},"doc://DiContainer/documentation/DiContainer/ContainerRegister/init(_:defaultFactory:)":{"abstract":[{"type":"text","text":"자동 등록 폴백 기능을 가진 의존성 주입 프로퍼티 래퍼를 생성합니다."}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerRegister\/init(_:defaultFactory:)","type":"topic","title":"init(_:defaultFactory:)","role":"symbol","url":"\/documentation\/dicontainer\/containerregister\/init(_:defaultfactory:)","kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DependencyContainer","preciseIdentifier":"s:11DiContainer010DependencyB0C"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?>, "},{"kind":"externalParam","text":"defaultFactory"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}]},"doc://DiContainer/documentation/DiContainer":{"abstract":[],"url":"\/documentation\/dicontainer","kind":"symbol","type":"topic","title":"DiContainer","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","role":"collection"}}}