{"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"identifier":{"url":"doc:\/\/DiContainer\/documentation\/DiContainer\/BootstrapSystem","interfaceLanguage":"swift"},"metadata":{"modules":[{"name":"DiContainer"}],"roleHeading":"Article","role":"article","title":"DiContainer Bootstrap 시스템 - 설계 근거 및 사용법"},"primaryContentSections":[{"content":[{"text":"🎯 왜 Bootstrap이 필요한가?","type":"heading","anchor":"%F0%9F%8E%AF-%EC%99%9C-Bootstrap%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%9C%EA%B0%80","level":2},{"text":"1. 앱 생명주기와의 일치","type":"heading","anchor":"1-%EC%95%B1-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0%EC%99%80%EC%9D%98-%EC%9D%BC%EC%B9%98","level":3},{"type":"codeListing","code":["\/\/ ❌ 잘못된 접근: 언제 초기화되는지 불분명","DI.register(UserService.self) { UserServiceImpl() }  \/\/ 언제 호출되는지?","","\/\/ ✅ 올바른 접근: 명확한 초기화 시점","await DependencyContainer.bootstrap { container in","    container.register(UserService.self) { UserServiceImpl() }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Bootstrap은 앱이 시작될 때 ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"한 번만"}]},{"text":" 실행되어 모든 의존성을 초기화합니다.","type":"text"},{"text":" ","type":"text"},{"text":"이는 앱의 생명주기와 정확히 일치하여 예측 가능한 동작을 보장합니다.","type":"text"}]},{"text":"2. Swift Concurrency와의 완벽한 통합","type":"heading","anchor":"2-Swift-Concurrency%EC%99%80%EC%9D%98-%EC%99%84%EB%B2%BD%ED%95%9C-%ED%86%B5%ED%95%A9","level":3},{"type":"codeListing","code":["\/\/ Modern Swift Concurrency 패턴","@main","struct MyApp: App {","    init() {","        Task {","            await DependencyContainer.bootstrap { container in","                \/\/ 동기 의존성들","                container.register(UserService.self) { UserServiceImpl() }","                container.register(DatabaseService.self) { DatabaseServiceImpl() }","            }","        }","    }","}"],"syntax":"swift"},{"text":"3. Actor Hop 최적화","type":"heading","anchor":"3-Actor-Hop-%EC%B5%9C%EC%A0%81%ED%99%94","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Bootstrap 시스템은 Actor 간 전환을 최소화하여 성능을 극대화합니다:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"배치 처리"}],"type":"strong"},{"type":"text","text":": 모든 등록을 한 번에 처리하여 actor hop 횟수 감소"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"스냅샷 기반"}],"type":"strong"},{"text":": 내부 컨테이너를 한 번에 생성하고 ","type":"text"},{"code":"live","type":"codeVoice"},{"text":"로 복사","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"비동기 안전"}]},{"type":"text","text":": Actor 경계를 명확히 하여 데이터 경쟁 방지"}],"type":"paragraph"}]}]},{"text":"🏗️ Bootstrap 아키텍처","type":"heading","anchor":"%F0%9F%8F%97%EF%B8%8F-Bootstrap-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98","level":2},{"text":"Core Components","type":"heading","anchor":"Core-Components","level":3},{"syntax":null,"code":["┌─────────────────────────────────────────┐","│             Bootstrap Actor             │","├─────────────────────────────────────────┤","│ • 상태 관리 (didBootstrap)              │","│ • 컨테이너 생성\/교체                    │","│ • 중복 방지 (이미 bootstrap된 경우)     │","│ • 에러 처리 및 복구                     │","└─────────────────────────────────────────┘","                   ↓","┌─────────────────────────────────────────┐","│           Live Container                │","├─────────────────────────────────────────┤","│ • 실제 사용되는 컨테이너                │","│ • 메인 스레드에서 접근 가능             │","│ • Bootstrap 완료 후 교체                │","└─────────────────────────────────────────┘"],"type":"codeListing"},{"anchor":"3%EA%B0%80%EC%A7%80-Bootstrap-%EB%B0%A9%EC%8B%9D","level":3,"text":"3가지 Bootstrap 방식","type":"heading"},{"anchor":"1-%EB%8F%99%EA%B8%B0-Bootstrap-%EA%B6%8C%EC%9E%A5","level":4,"text":"1. 동기 Bootstrap (권장)","type":"heading"},{"syntax":"swift","code":["await DependencyContainer.bootstrap { container in","    container.register(UserService.self) { UserServiceImpl() }","    container.register(NetworkService.self) { NetworkServiceImpl() }","}"],"type":"codeListing"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"대부분의 경우에 적합","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"빠른 실행 속도"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"간단한 설정","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"2-%EB%B9%84%EB%8F%99%EA%B8%B0-Bootstrap-%EB%AC%B4%EA%B1%B0%EC%9A%B4-%EC%B4%88%EA%B8%B0%ED%99%94","level":4,"text":"2. 비동기 Bootstrap (무거운 초기화)","type":"heading"},{"syntax":"swift","code":["let success = await DependencyContainer.bootstrapAsync { container in","    \/\/ 비동기 초기화가 필요한 경우","    let dbService = try await DatabaseService.initialize()","    container.register(DatabaseService.self) { dbService }","}"],"type":"codeListing"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"네트워크 요청이 필요한 경우"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"파일 시스템 초기화","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"외부 SDK 초기화"}]}]}],"type":"unorderedList"},{"anchor":"3-%ED%98%BC%ED%95%A9-Bootstrap-%EC%B5%9C%EC%A0%81%ED%99%94","level":4,"text":"3. 혼합 Bootstrap (최적화)","type":"heading"},{"syntax":"swift","code":["await DependencyContainer.bootstrapMixed(","    sync: { container in","        \/\/ 빠른 동기 의존성들","        container.register(UserService.self) { UserServiceImpl() }","    },","    async: { container in","        \/\/ 느린 비동기 의존성들","        let apiClient = try await APIClient.configure()","        container.register(APIClient.self) { apiClient }","    }",")"],"type":"codeListing"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"성능 최적화가 중요한 경우"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"동기\/비동기 의존성 분리"}]}]},{"content":[{"inlineContent":[{"text":"단계별 초기화","type":"text"}],"type":"paragraph"}]}]},{"type":"heading","level":2,"anchor":"%F0%9F%92%A1-Best-Practices","text":"💡 Best Practices"},{"type":"heading","level":3,"anchor":"%E2%9C%85-DO-%EA%B6%8C%EC%9E%A5-%EC%82%AC%ED%95%AD","text":"✅ DO - 권장 사항"},{"type":"heading","level":4,"anchor":"1-%EC%95%B1-%EC%8B%9C%EC%9E%91-%EC%8B%9C-%ED%95%9C-%EB%B2%88%EB%A7%8C-Bootstrap","text":"1. 앱 시작 시 한 번만 Bootstrap"},{"type":"codeListing","code":["@main","struct MyApp: App {","    init() {","        Task {","            await setupDependencies()","        }","    }","","    private func setupDependencies() async {","        await DependencyContainer.bootstrap { container in","            \/\/ 모든 의존성을 여기서 등록","            AppDIContainer.registerAll(to: container)","        }","    }","}"],"syntax":"swift"},{"type":"heading","level":4,"anchor":"2-%EC%9D%98%EC%A1%B4%EC%84%B1-%EA%B7%B8%EB%A3%B9%EB%B3%84-%EB%AA%A8%EB%93%88%ED%99%94","text":"2. 의존성 그룹별 모듈화"},{"type":"codeListing","code":["enum AppModules {","    static func registerNetworking(to container: DependencyContainer) {","        container.register(APIClient.self) { APIClientImpl() }","        container.register(NetworkService.self) { NetworkServiceImpl() }","    }","","    static func registerDatabase(to container: DependencyContainer) {","        container.register(DatabaseService.self) { DatabaseServiceImpl() }","        container.register(CacheService.self) { CacheServiceImpl() }","    }","}","","\/\/ Bootstrap에서 사용","await DependencyContainer.bootstrap { container in","    AppModules.registerNetworking(to: container)","    AppModules.registerDatabase(to: container)","}"],"syntax":"swift"},{"type":"heading","level":4,"anchor":"3-%ED%99%98%EA%B2%BD%EB%B3%84-%EC%A1%B0%EA%B1%B4%EB%B6%80-%EB%93%B1%EB%A1%9D","text":"3. 환경별 조건부 등록"},{"type":"codeListing","code":["await DependencyContainer.bootstrap { container in","    #if DEBUG","    container.register(APIClient.self) { MockAPIClient() }","    #else","    container.register(APIClient.self) { ProductionAPIClient() }","    #endif","}"],"syntax":"swift"},{"type":"heading","level":3,"anchor":"%E2%9D%8C-DONT-%ED%94%BC%ED%95%B4%EC%95%BC-%ED%95%A0-%ED%8C%A8%ED%84%B4","text":"❌ DON’T - 피해야 할 패턴"},{"type":"heading","level":4,"anchor":"1-%EC%97%AC%EB%9F%AC-%EB%B2%88-Bootstrap-%ED%98%B8%EC%B6%9C","text":"1. 여러 번 Bootstrap 호출"},{"type":"codeListing","code":["\/\/ ❌ 잘못된 패턴","await DependencyContainer.bootstrap { container in","    container.register(UserService.self) { UserServiceImpl() }","}","","\/\/ 나중에 또 호출... (무시됨)","await DependencyContainer.bootstrap { container in","    container.register(NetworkService.self) { NetworkServiceImpl() }","}"],"syntax":"swift"},{"type":"heading","level":4,"anchor":"2-Bootstrap-%EC%97%86%EC%9D%B4-DI-%EC%82%AC%EC%9A%A9","text":"2. Bootstrap 없이 DI 사용"},{"type":"codeListing","code":["\/\/ ❌ Bootstrap 전에 접근하면 에러!","let userService: UserService = DI.requireResolve(UserService.self)"],"syntax":"swift"},{"type":"heading","level":4,"anchor":"3-%EB%9F%B0%ED%83%80%EC%9E%84%EC%97%90-%EC%83%88%EB%A1%9C%EC%9A%B4-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%B6%94%EA%B0%80","text":"3. 런타임에 새로운 의존성 추가"},{"type":"codeListing","code":["\/\/ ❌ Bootstrap 이후 추가 등록은 권장하지 않음","DI.register(NewService.self) { NewServiceImpl() }"],"syntax":"swift"},{"type":"heading","level":2,"anchor":"%F0%9F%94%A7-%EA%B3%A0%EA%B8%89-%EA%B8%B0%EB%8A%A5","text":"🔧 고급 기능"},{"type":"heading","level":3,"anchor":"1-Bootstrap-%EC%83%81%ED%83%9C-%ED%99%95%EC%9D%B8","text":"1. Bootstrap 상태 확인"},{"code":["let isReady = await DependencyContainer.isBootstrapped","if isReady {","    \/\/ 안전하게 DI 사용 가능","    let service = DI.resolve(UserService.self)","}"],"syntax":"swift","type":"codeListing"},{"anchor":"2-Bootstrap-%EC%8B%A4%ED%8C%A8-%EC%B2%98%EB%A6%AC","text":"2. Bootstrap 실패 처리","level":3,"type":"heading"},{"code":["do {","    let success = await DependencyContainer.bootstrapAsync { container in","        let service = try await ExternalService.initialize()","        container.register(ExternalService.self) { service }","    }","","    if !success {","        \/\/ Fallback 처리","        print(\"Bootstrap failed, using fallback configuration\")","    }","} catch {","    fatalError(\"Critical bootstrap error: \\(error)\")","}"],"syntax":"swift","type":"codeListing"},{"anchor":"3-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%97%90%EC%84%9C-Bootstrap-%EC%9E%AC%EC%84%A4%EC%A0%95","text":"3. 테스트에서 Bootstrap 재설정","level":3,"type":"heading"},{"code":["class DITests: XCTestCase {","    override func setUp() async throws {","        await DependencyContainer.releaseAll()  \/\/ 기존 상태 정리","","        await DependencyContainer.bootstrap { container in","            \/\/ 테스트용 Mock 등록","            container.register(UserService.self) { MockUserService() }","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"anchor":"%F0%9F%93%8A-%EC%84%B1%EB%8A%A5-%ED%8A%B9%EC%A7%95","text":"📊 성능 특징","level":2,"type":"heading"},{"anchor":"Bootstrap-%EC%84%B1%EB%8A%A5-%EC%B8%A1%EC%A0%95-%EA%B2%B0%EA%B3%BC","text":"Bootstrap 성능 측정 결과","level":3,"type":"heading"},{"rows":[[[{"type":"paragraph","inlineContent":[{"text":"의존성 개수","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"동기 Bootstrap"}]}],[{"type":"paragraph","inlineContent":[{"text":"비동기 Bootstrap","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"혼합 Bootstrap","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"10개","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"~1ms"}]}],[{"type":"paragraph","inlineContent":[{"text":"~3ms","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"~2ms"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"50개"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"~5ms"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"~15ms"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"~8ms"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"100개"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"~10ms"}]}],[{"type":"paragraph","inlineContent":[{"text":"~25ms","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"~15ms"}]}]]],"header":"row","type":"table"},{"anchor":"Actor-Hop-%EC%B5%9C%EC%A0%81%ED%99%94","text":"Actor Hop 최적화","level":3,"type":"heading"},{"code":["기존 방식: 등록마다 Actor Hop 발생","Register1 -> Actor Hop -> Register2 -> Actor Hop -> Register3...","","Bootstrap 방식: 배치 처리로 Actor Hop 최소화","[Register1, Register2, Register3...] -> Single Actor Hop -> Complete"],"syntax":null,"type":"codeListing"},{"anchor":"%F0%9F%8E%AF-%EA%B2%B0%EB%A1%A0","text":"🎯 결론","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"Bootstrap 시스템은 DiContainer의 핵심 설계 철학을 반영합니다:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"예측 가능성","type":"text"}]},{"text":": 앱 시작 시 한 번의 명확한 초기화","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"성능 최적화"}]},{"text":": Actor Hop 최소화와 배치 처리","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Swift Concurrency 통합"}],"type":"strong"},{"text":": Modern Swift 패턴과의 완벽한 호환","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"안전성"}],"type":"strong"},{"text":": 중복 방지와 에러 처리","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"확장성"}]},{"type":"text","text":": 다양한 초기화 패턴 지원"}],"type":"paragraph"}]}],"type":"orderedList"},{"inlineContent":[{"type":"text","text":"이러한 이유로 Bootstrap은 단순한 편의 기능이 아닌, "},{"type":"strong","inlineContent":[{"type":"text","text":"DiContainer 아키텍처의 필수 구성 요소"}]},{"type":"text","text":"입니다."}],"type":"paragraph"},{"anchor":"%ED%95%B5%EC%8B%AC-%EC%9D%B4%EC%A0%90","text":"핵심 이점","level":2,"type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"앱 생명주기와의 완벽한 일치"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift Concurrency 패턴 준수","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Actor Hop 최적화를 통한 성능 향상"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"예측 가능한 초기화 시점"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"중복 방지 및 안전한 상태 관리","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"동기\/비동기 의존성 지원"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"테스트 환경에서의 유연한 재설정"}]}]}],"type":"unorderedList"},{"level":2,"type":"heading","text":"일반적인 안티패턴","anchor":"%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-%EC%95%88%ED%8B%B0%ED%8C%A8%ED%84%B4"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Bootstrap 없이 DI 사용 시도"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"여러 번의 Bootstrap 호출","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Bootstrap 이후 런타임 의존성 추가","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Bootstrap 완료 확인 없이 의존성 접근","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"테스트에서 Bootstrap 상태 정리 누락"}]}]}],"type":"unorderedList"},{"level":2,"type":"heading","text":"권장 설정 패턴","anchor":"%EA%B6%8C%EC%9E%A5-%EC%84%A4%EC%A0%95-%ED%8C%A8%ED%84%B4"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"앱 시작 시점에서 단일 Bootstrap 호출"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"모듈별 의존성 그룹화 및 등록"}]}]},{"content":[{"inlineContent":[{"text":"환경별 조건부 의존성 등록","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Bootstrap 상태 확인 후 DI 사용","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"테스트에서 깨끗한 상태로 재설정"}],"type":"paragraph"}]}],"type":"unorderedList"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/dicontainer\/bootstrapsystem"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"article","sections":[],"references":{"doc://DiContainer/documentation/DiContainer":{"type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","kind":"symbol","title":"DiContainer","url":"\/documentation\/dicontainer","role":"collection","abstract":[{"type":"text","text":"현대적인 Swift Concurrency와 Actor 모델을 위해 설계된 고성능 의존성 주입 프레임워크"}]}}}