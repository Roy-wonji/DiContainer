{"kind":"article","hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/dicontainer\/modulefactory"]}],"metadata":{"title":"Module Factory","role":"article","modules":[{"name":"DiContainer"}],"roleHeading":"Article"},"identifier":{"url":"doc:\/\/DiContainer\/documentation\/DiContainer\/ModuleFactory","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"content":[{"text":"기본","anchor":"%EA%B8%B0%EB%B3%B8","type":"heading","level":2},{"code":["let factory = RepositoryModuleFactory()","await factory.makeAllModules().asyncForEach { await container.register($0) }","await container.build()"],"type":"codeListing","syntax":"swift"},{"text":"UseCase Factory 연동","anchor":"UseCase-Factory-%EC%97%B0%EB%8F%99","type":"heading","level":2},{"code":["let useCaseFactory = UseCaseModuleFactory()","await useCaseFactory.makeAllModules().asyncForEach { await container.register($0) }"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"abstract":[{"text":"팩토리로 모듈을 체계적으로 생성하고 Container에 등록합니다.","type":"text"}],"seeAlsoSections":[{"title":"고급 기능","generated":true,"anchor":"고급-기능","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/AutoResolution","doc:\/\/DiContainer\/documentation\/DiContainer\/AutoDependencyResolver","doc:\/\/DiContainer\/documentation\/DiContainer\/PluginSystem","doc:\/\/DiContainer\/documentation\/DiContainer\/BasePlugin","doc:\/\/DiContainer\/documentation\/DiContainer\/RepositoryModuleFactory","doc:\/\/DiContainer\/documentation\/DiContainer\/UseCaseModuleFactory","doc:\/\/DiContainer\/documentation\/DiContainer\/ScopeModuleFactory"]}],"sections":[],"references":{"doc://DiContainer/documentation/DiContainer/RepositoryModuleFactory":{"title":"RepositoryModuleFactory","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/RepositoryModuleFactory","url":"\/documentation\/dicontainer\/repositorymodulefactory","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RepositoryModuleFactory","kind":"identifier"}],"navigatorTitle":[{"text":"RepositoryModuleFactory","kind":"identifier"}],"abstract":[{"type":"text","text":"Repository 계층 모듈 팩토리"}],"kind":"symbol","role":"symbol"},"doc://DiContainer/documentation/DiContainer/UseCaseModuleFactory":{"url":"\/documentation\/dicontainer\/usecasemodulefactory","kind":"symbol","type":"topic","navigatorTitle":[{"text":"UseCaseModuleFactory","kind":"identifier"}],"title":"UseCaseModuleFactory","role":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/UseCaseModuleFactory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"UseCaseModuleFactory"}],"abstract":[{"text":"UseCase 계층 모듈 팩토리","type":"text"}]},"doc://DiContainer/documentation/DiContainer/AutoDependencyResolver":{"title":"AutoDependencyResolver","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AutoDependencyResolver","url":"\/documentation\/dicontainer\/autodependencyresolver","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AutoDependencyResolver","kind":"identifier"}],"navigatorTitle":[{"text":"AutoDependencyResolver","kind":"identifier"}],"abstract":[{"type":"text","text":"자동 의존성 해결을 수행하는 핵심 클래스 (메인 액터 격리)"}],"kind":"symbol","role":"symbol"},"doc://DiContainer/documentation/DiContainer/BasePlugin":{"title":"BasePlugin","url":"\/documentation\/dicontainer\/baseplugin","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/BasePlugin","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"BasePlugin"}],"navigatorTitle":[{"kind":"identifier","text":"BasePlugin"}],"abstract":[{"type":"text","text":"기본 플러그인 구현을 위한 베이스 클래스"}],"kind":"symbol","role":"symbol"},"doc://DiContainer/documentation/DiContainer/ScopeModuleFactory":{"title":"ScopeModuleFactory","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ScopeModuleFactory","url":"\/documentation\/dicontainer\/scopemodulefactory","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ScopeModuleFactory","kind":"identifier"}],"navigatorTitle":[{"text":"ScopeModuleFactory","kind":"identifier"}],"abstract":[{"type":"text","text":"Scope 계층 모듈 팩토리"}],"kind":"symbol","role":"symbol"},"doc://DiContainer/documentation/DiContainer":{"url":"\/documentation\/dicontainer","role":"collection","type":"topic","abstract":[{"text":"현대적인 Swift Concurrency와 Actor 모델을 위해 설계된 고성능 의존성 주입 프레임워크","type":"text"}],"title":"DiContainer","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","kind":"symbol"},"doc://DiContainer/documentation/DiContainer/AutoResolution":{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AutoResolution","url":"\/documentation\/dicontainer\/autoresolution","title":"자동 의존성 해결","type":"topic","abstract":[{"text":"DiContainer의 강력한 자동 의존성 해결 시스템을 활용하여 리플렉션 기반의 자동 주입을 구현하는 방법","type":"text"}],"kind":"article","role":"article"},"doc://DiContainer/documentation/DiContainer/PluginSystem":{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/PluginSystem","url":"\/documentation\/dicontainer\/pluginsystem","title":"플러그인 시스템","type":"topic","abstract":[{"text":"DiContainer의 강력한 플러그인 아키텍처를 사용하여 의존성 주입 과정을 커스터마이징하고 확장하는 방법","type":"text"}],"kind":"article","role":"article"}}}