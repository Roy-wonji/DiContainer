{"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"kind":"content","content":[{"anchor":"%EA%B8%B0%EB%B3%B8","text":"기본","type":"heading","level":2},{"syntax":"swift","type":"codeListing","code":["let factory = RepositoryModuleFactory()","await factory.makeAllModules().asyncForEach { await container.register($0) }","await container.build()"]},{"text":"UseCase Factory 연동","anchor":"UseCase-Factory-%EC%97%B0%EB%8F%99","level":2,"type":"heading"},{"syntax":"swift","type":"codeListing","code":["let useCaseFactory = UseCaseModuleFactory()","await useCaseFactory.makeAllModules().asyncForEach { await container.register($0) }"]}]}],"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/AutoResolution","doc:\/\/DiContainer\/documentation\/DiContainer\/AutoDependencyResolver","doc:\/\/DiContainer\/documentation\/DiContainer\/PluginSystem","doc:\/\/DiContainer\/documentation\/DiContainer\/BasePlugin","doc:\/\/DiContainer\/documentation\/DiContainer\/RepositoryModuleFactory","doc:\/\/DiContainer\/documentation\/DiContainer\/UseCaseModuleFactory","doc:\/\/DiContainer\/documentation\/DiContainer\/ScopeModuleFactory"],"generated":true,"anchor":"고급-기능","title":"고급 기능"}],"sections":[],"variants":[{"paths":["\/documentation\/dicontainer\/modulefactory"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"modules":[{"name":"DiContainer"}],"roleHeading":"Article","role":"article","title":"Module Factory"},"kind":"article","identifier":{"url":"doc:\/\/DiContainer\/documentation\/DiContainer\/ModuleFactory","interfaceLanguage":"swift"},"abstract":[{"text":"팩토리로 모듈을 체계적으로 생성하고 Container에 등록합니다.","type":"text"}],"references":{"doc://DiContainer/documentation/DiContainer/UseCaseModuleFactory":{"url":"\/documentation\/dicontainer\/usecasemodulefactory","title":"UseCaseModuleFactory","abstract":[{"text":"UseCase 계층 모듈 팩토리","type":"text"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/UseCaseModuleFactory","kind":"symbol","navigatorTitle":[{"text":"UseCaseModuleFactory","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UseCaseModuleFactory","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://DiContainer/documentation/DiContainer/RepositoryModuleFactory":{"kind":"symbol","abstract":[{"text":"Repository 계층 모듈 팩토리","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RepositoryModuleFactory"}],"navigatorTitle":[{"kind":"identifier","text":"RepositoryModuleFactory"}],"type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/RepositoryModuleFactory","title":"RepositoryModuleFactory","url":"\/documentation\/dicontainer\/repositorymodulefactory"},"doc://DiContainer/documentation/DiContainer/PluginSystem":{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/PluginSystem","type":"topic","role":"article","title":"플러그인 시스템","url":"\/documentation\/dicontainer\/pluginsystem","kind":"article","abstract":[{"text":"DiContainer의 강력한 플러그인 아키텍처를 사용하여 의존성 주입 과정을 커스터마이징하고 확장하는 방법","type":"text"}]},"doc://DiContainer/documentation/DiContainer/ScopeModuleFactory":{"navigatorTitle":[{"text":"ScopeModuleFactory","kind":"identifier"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ScopeModuleFactory","type":"topic","role":"symbol","title":"ScopeModuleFactory","url":"\/documentation\/dicontainer\/scopemodulefactory","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ScopeModuleFactory","kind":"identifier"}],"abstract":[{"type":"text","text":"Scope 계층 모듈 팩토리"}]},"doc://DiContainer/documentation/DiContainer":{"abstract":[{"type":"text","text":"현대적인 Swift Concurrency와 Actor 모델을 위해 설계된 고성능 의존성 주입 프레임워크"}],"kind":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","role":"collection","title":"DiContainer","type":"topic","url":"\/documentation\/dicontainer"},"doc://DiContainer/documentation/DiContainer/BasePlugin":{"navigatorTitle":[{"text":"BasePlugin","kind":"identifier"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/BasePlugin","type":"topic","role":"symbol","title":"BasePlugin","url":"\/documentation\/dicontainer\/baseplugin","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"BasePlugin"}],"abstract":[{"text":"기본 플러그인 구현을 위한 베이스 클래스","type":"text"}]},"doc://DiContainer/documentation/DiContainer/AutoResolution":{"url":"\/documentation\/dicontainer\/autoresolution","title":"자동 의존성 해결","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AutoResolution","abstract":[{"text":"DiContainer의 강력한 자동 의존성 해결 시스템을 활용하여 리플렉션 기반의 자동 주입을 구현하는 방법","type":"text"}],"kind":"article","type":"topic","role":"article"},"doc://DiContainer/documentation/DiContainer/AutoDependencyResolver":{"url":"\/documentation\/dicontainer\/autodependencyresolver","title":"AutoDependencyResolver","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AutoDependencyResolver","kind":"identifier"}],"kind":"symbol","type":"topic","role":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AutoDependencyResolver","abstract":[{"text":"자동 의존성 해결을 수행하는 핵심 클래스 (메인 액터 격리)","type":"text"}],"navigatorTitle":[{"text":"AutoDependencyResolver","kind":"identifier"}]}}}