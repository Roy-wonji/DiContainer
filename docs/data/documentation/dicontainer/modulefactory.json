{"sections":[],"variants":[{"paths":["\/documentation\/dicontainer\/modulefactory"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"팩토리로 모듈을 체계적으로 생성하고 Container에 등록합니다."}],"seeAlsoSections":[{"anchor":"고급-기능","generated":true,"title":"고급 기능","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/AutoResolution","doc:\/\/DiContainer\/documentation\/DiContainer\/AutoDependencyResolver","doc:\/\/DiContainer\/documentation\/DiContainer\/PluginSystem","doc:\/\/DiContainer\/documentation\/DiContainer\/BasePlugin","doc:\/\/DiContainer\/documentation\/DiContainer\/RepositoryModuleFactory","doc:\/\/DiContainer\/documentation\/DiContainer\/UseCaseModuleFactory","doc:\/\/DiContainer\/documentation\/DiContainer\/ScopeModuleFactory"]}],"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/DiContainer\/documentation\/DiContainer\/ModuleFactory"},"primaryContentSections":[{"kind":"content","content":[{"anchor":"%EA%B8%B0%EB%B3%B8","type":"heading","text":"기본","level":2},{"code":["let factory = RepositoryModuleFactory()","await factory.makeAllModules().asyncForEach { await container.register($0) }","await container.build()"],"type":"codeListing","syntax":"swift"},{"anchor":"UseCase-Factory-%EC%97%B0%EB%8F%99","type":"heading","text":"UseCase Factory 연동","level":2},{"code":["let useCaseFactory = UseCaseModuleFactory()","await useCaseFactory.makeAllModules().asyncForEach { await container.register($0) }"],"type":"codeListing","syntax":"swift"}]}],"metadata":{"modules":[{"name":"DiContainer"}],"role":"article","title":"Module Factory","roleHeading":"Article"},"references":{"doc://DiContainer/documentation/DiContainer":{"title":"DiContainer","url":"\/documentation\/dicontainer","kind":"symbol","abstract":[{"type":"text","text":"현대적인 Swift Concurrency와 Actor 모델을 위해 설계된 고성능 의존성 주입 프레임워크"}],"type":"topic","role":"collection","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer"},"doc://DiContainer/documentation/DiContainer/BasePlugin":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BasePlugin","kind":"identifier"}],"title":"BasePlugin","role":"symbol","kind":"symbol","url":"\/documentation\/dicontainer\/baseplugin","abstract":[{"text":"기본 플러그인 구현을 위한 베이스 클래스","type":"text"}],"type":"topic","navigatorTitle":[{"text":"BasePlugin","kind":"identifier"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/BasePlugin"},"doc://DiContainer/documentation/DiContainer/ScopeModuleFactory":{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ScopeModuleFactory","navigatorTitle":[{"kind":"identifier","text":"ScopeModuleFactory"}],"kind":"symbol","abstract":[{"text":"Scope 계층 모듈 팩토리","type":"text"}],"role":"symbol","title":"ScopeModuleFactory","url":"\/documentation\/dicontainer\/scopemodulefactory","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ScopeModuleFactory"}]},"doc://DiContainer/documentation/DiContainer/UseCaseModuleFactory":{"type":"topic","abstract":[{"text":"UseCase 계층 모듈 팩토리","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"UseCaseModuleFactory"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"UseCaseModuleFactory"}],"title":"UseCaseModuleFactory","kind":"symbol","role":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/UseCaseModuleFactory","url":"\/documentation\/dicontainer\/usecasemodulefactory"},"doc://DiContainer/documentation/DiContainer/PluginSystem":{"role":"article","abstract":[{"text":"DiContainer의 강력한 플러그인 아키텍처를 사용하여 의존성 주입 과정을 커스터마이징하고 확장하는 방법","type":"text"}],"title":"플러그인 시스템","url":"\/documentation\/dicontainer\/pluginsystem","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/PluginSystem","type":"topic","kind":"article"},"doc://DiContainer/documentation/DiContainer/AutoResolution":{"role":"article","abstract":[{"type":"text","text":"DiContainer의 강력한 자동 의존성 해결 시스템을 활용하여 리플렉션 기반의 자동 주입을 구현하는 방법"}],"title":"자동 의존성 해결","url":"\/documentation\/dicontainer\/autoresolution","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AutoResolution","type":"topic","kind":"article"},"doc://DiContainer/documentation/DiContainer/AutoDependencyResolver":{"abstract":[{"type":"text","text":"자동 의존성 해결을 수행하는 핵심 클래스 (메인 액터 격리)"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AutoDependencyResolver"}],"navigatorTitle":[{"kind":"identifier","text":"AutoDependencyResolver"}],"url":"\/documentation\/dicontainer\/autodependencyresolver","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AutoDependencyResolver","title":"AutoDependencyResolver","type":"topic"},"doc://DiContainer/documentation/DiContainer/RepositoryModuleFactory":{"url":"\/documentation\/dicontainer\/repositorymodulefactory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RepositoryModuleFactory"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/RepositoryModuleFactory","abstract":[{"type":"text","text":"Repository 계층 모듈 팩토리"}],"navigatorTitle":[{"text":"RepositoryModuleFactory","kind":"identifier"}],"type":"topic","title":"RepositoryModuleFactory","role":"symbol","kind":"symbol"}}}