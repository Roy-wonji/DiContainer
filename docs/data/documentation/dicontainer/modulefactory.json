{"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"identifier":{"url":"doc:\/\/DiContainer\/documentation\/DiContainer\/ModuleFactory","interfaceLanguage":"swift"},"kind":"article","metadata":{"roleHeading":"Article","title":"Module Factory","role":"article","modules":[{"name":"DiContainer"}]},"sections":[],"primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"기본","anchor":"%EA%B8%B0%EB%B3%B8"},{"type":"codeListing","code":["let factory = RepositoryModuleFactory()","await factory.makeAllModules().asyncForEach { await container.register($0) }","await container.build()"],"syntax":"swift"},{"level":2,"type":"heading","text":"UseCase Factory 연동","anchor":"UseCase-Factory-%EC%97%B0%EB%8F%99"},{"type":"codeListing","code":["let useCaseFactory = UseCaseModuleFactory()","await useCaseFactory.makeAllModules().asyncForEach { await container.register($0) }"],"syntax":"swift"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/dicontainer\/modulefactory"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"type":"text","text":"팩토리로 모듈을 체계적으로 생성하고 Container에 등록합니다."}],"seeAlsoSections":[{"title":"고급 기능","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/AutoResolution","doc:\/\/DiContainer\/documentation\/DiContainer\/AutoDependencyResolver","doc:\/\/DiContainer\/documentation\/DiContainer\/PluginSystem","doc:\/\/DiContainer\/documentation\/DiContainer\/BasePlugin","doc:\/\/DiContainer\/documentation\/DiContainer\/RepositoryModuleFactory","doc:\/\/DiContainer\/documentation\/DiContainer\/UseCaseModuleFactory","doc:\/\/DiContainer\/documentation\/DiContainer\/ScopeModuleFactory"],"generated":true,"anchor":"고급-기능"}],"references":{"doc://DiContainer/documentation/DiContainer/UseCaseModuleFactory":{"type":"topic","abstract":[{"type":"text","text":"UseCase 계층 모듈 팩토리"}],"kind":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/UseCaseModuleFactory","navigatorTitle":[{"text":"UseCaseModuleFactory","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UseCaseModuleFactory","kind":"identifier"}],"url":"\/documentation\/dicontainer\/usecasemodulefactory","role":"symbol","title":"UseCaseModuleFactory"},"doc://DiContainer/documentation/DiContainer":{"url":"\/documentation\/dicontainer","abstract":[{"text":"현대적인 Swift Concurrency와 Actor 모델을 위해 설계된 고성능 의존성 주입 프레임워크","type":"text"}],"type":"topic","role":"collection","kind":"symbol","title":"DiContainer","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer"},"doc://DiContainer/documentation/DiContainer/AutoDependencyResolver":{"role":"symbol","kind":"symbol","title":"AutoDependencyResolver","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"AutoDependencyResolver","kind":"identifier"}],"navigatorTitle":[{"text":"AutoDependencyResolver","kind":"identifier"}],"url":"\/documentation\/dicontainer\/autodependencyresolver","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AutoDependencyResolver","abstract":[{"type":"text","text":"자동 의존성 해결을 수행하는 핵심 클래스 (메인 액터 격리)"}]},"doc://DiContainer/documentation/DiContainer/PluginSystem":{"abstract":[{"text":"DiContainer의 강력한 플러그인 아키텍처를 사용하여 의존성 주입 과정을 커스터마이징하고 확장하는 방법","type":"text"}],"url":"\/documentation\/dicontainer\/pluginsystem","type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/PluginSystem","kind":"article","role":"article","title":"플러그인 시스템"},"doc://DiContainer/documentation/DiContainer/RepositoryModuleFactory":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RepositoryModuleFactory"}],"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Repository 계층 모듈 팩토리"}],"title":"RepositoryModuleFactory","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RepositoryModuleFactory"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/RepositoryModuleFactory","url":"\/documentation\/dicontainer\/repositorymodulefactory"},"doc://DiContainer/documentation/DiContainer/BasePlugin":{"role":"symbol","navigatorTitle":[{"text":"BasePlugin","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BasePlugin","kind":"identifier"}],"title":"BasePlugin","abstract":[{"type":"text","text":"기본 플러그인 구현을 위한 베이스 클래스"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/BasePlugin","url":"\/documentation\/dicontainer\/baseplugin","kind":"symbol","type":"topic"},"doc://DiContainer/documentation/DiContainer/ScopeModuleFactory":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ScopeModuleFactory"}],"title":"ScopeModuleFactory","url":"\/documentation\/dicontainer\/scopemodulefactory","kind":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ScopeModuleFactory","navigatorTitle":[{"kind":"identifier","text":"ScopeModuleFactory"}],"abstract":[{"text":"Scope 계층 모듈 팩토리","type":"text"}],"role":"symbol"},"doc://DiContainer/documentation/DiContainer/AutoResolution":{"abstract":[{"type":"text","text":"DiContainer의 강력한 자동 의존성 해결 시스템을 활용하여 리플렉션 기반의 자동 주입을 구현하는 방법"}],"url":"\/documentation\/dicontainer\/autoresolution","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AutoResolution","role":"article","title":"자동 의존성 해결","type":"topic","kind":"article"}}}