{"metadata":{"title":"Module Factory","modules":[{"name":"DiContainer"}],"role":"article","roleHeading":"Article"},"sections":[],"identifier":{"url":"doc:\/\/DiContainer\/documentation\/DiContainer\/ModuleFactory","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"type":"text","text":"팩토리로 모듈을 체계적으로 생성하고 Container에 등록합니다."}],"seeAlsoSections":[{"title":"고급 기능","anchor":"고급-기능","generated":true,"identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/AutoResolution","doc:\/\/DiContainer\/documentation\/DiContainer\/AutoDependencyResolver","doc:\/\/DiContainer\/documentation\/DiContainer\/PluginSystem","doc:\/\/DiContainer\/documentation\/DiContainer\/BasePlugin","doc:\/\/DiContainer\/documentation\/DiContainer\/RepositoryModuleFactory","doc:\/\/DiContainer\/documentation\/DiContainer\/UseCaseModuleFactory","doc:\/\/DiContainer\/documentation\/DiContainer\/ScopeModuleFactory"]}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"%EA%B8%B0%EB%B3%B8","text":"기본","level":2,"type":"heading"},{"code":["let factory = RepositoryModuleFactory()","await factory.makeAllModules().asyncForEach { await container.register($0) }","await container.build()"],"syntax":"swift","type":"codeListing"},{"anchor":"UseCase-Factory-%EC%97%B0%EB%8F%99","text":"UseCase Factory 연동","level":2,"type":"heading"},{"code":["let useCaseFactory = UseCaseModuleFactory()","await useCaseFactory.makeAllModules().asyncForEach { await container.register($0) }"],"syntax":"swift","type":"codeListing"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/dicontainer\/modulefactory"]}],"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"kind":"article","references":{"doc://DiContainer/documentation/DiContainer/BasePlugin":{"title":"BasePlugin","role":"symbol","url":"\/documentation\/dicontainer\/baseplugin","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BasePlugin","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/BasePlugin","abstract":[{"text":"기본 플러그인 구현을 위한 베이스 클래스","type":"text"}],"navigatorTitle":[{"text":"BasePlugin","kind":"identifier"}]},"doc://DiContainer/documentation/DiContainer/PluginSystem":{"url":"\/documentation\/dicontainer\/pluginsystem","kind":"article","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/PluginSystem","role":"article","abstract":[{"text":"DiContainer의 강력한 플러그인 아키텍처를 사용하여 의존성 주입 과정을 커스터마이징하고 확장하는 방법","type":"text"}],"title":"플러그인 시스템","type":"topic"},"doc://DiContainer/documentation/DiContainer/AutoDependencyResolver":{"kind":"symbol","abstract":[{"type":"text","text":"자동 의존성 해결을 수행하는 핵심 클래스 (메인 액터 격리)"}],"navigatorTitle":[{"text":"AutoDependencyResolver","kind":"identifier"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AutoDependencyResolver","title":"AutoDependencyResolver","type":"topic","url":"\/documentation\/dicontainer\/autodependencyresolver","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AutoDependencyResolver","kind":"identifier"}]},"doc://DiContainer/documentation/DiContainer/ScopeModuleFactory":{"abstract":[{"text":"Scope 계층 모듈 팩토리","type":"text"}],"title":"ScopeModuleFactory","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ScopeModuleFactory","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ScopeModuleFactory","navigatorTitle":[{"text":"ScopeModuleFactory","kind":"identifier"}],"role":"symbol","kind":"symbol","url":"\/documentation\/dicontainer\/scopemodulefactory"},"doc://DiContainer/documentation/DiContainer/UseCaseModuleFactory":{"type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/UseCaseModuleFactory","title":"UseCaseModuleFactory","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UseCaseModuleFactory","kind":"identifier"}],"abstract":[{"type":"text","text":"UseCase 계층 모듈 팩토리"}],"navigatorTitle":[{"text":"UseCaseModuleFactory","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/dicontainer\/usecasemodulefactory","role":"symbol"},"doc://DiContainer/documentation/DiContainer":{"role":"collection","type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","url":"\/documentation\/dicontainer","abstract":[{"text":"현대적인 Swift Concurrency와 Actor 모델을 위해 설계된 고성능 의존성 주입 프레임워크","type":"text"}],"title":"DiContainer","kind":"symbol"},"doc://DiContainer/documentation/DiContainer/RepositoryModuleFactory":{"navigatorTitle":[{"text":"RepositoryModuleFactory","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Repository 계층 모듈 팩토리"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RepositoryModuleFactory","kind":"identifier"}],"type":"topic","title":"RepositoryModuleFactory","role":"symbol","url":"\/documentation\/dicontainer\/repositorymodulefactory","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/RepositoryModuleFactory"},"doc://DiContainer/documentation/DiContainer/AutoResolution":{"title":"자동 의존성 해결","type":"topic","url":"\/documentation\/dicontainer\/autoresolution","role":"article","kind":"article","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AutoResolution","abstract":[{"text":"DiContainer의 강력한 자동 의존성 해결 시스템을 활용하여 리플렉션 기반의 자동 주입을 구현하는 방법","type":"text"}]}}}