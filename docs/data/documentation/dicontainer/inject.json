{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/DiContainer\/documentation\/DiContainer\/Inject"},"variants":[{"paths":["\/documentation\/dicontainer\/inject"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"sections":[],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@propertyWrapper"},{"kind":"text","text":" "},{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Inject"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"text":"개요","level":2,"type":"heading","anchor":"%EA%B0%9C%EC%9A%94"},{"inlineContent":[{"type":"codeVoice","code":"@Inject"},{"text":"는 UnifiedDI 시스템과 통합되어 의존성을 자동으로 해결하고 주입합니다.","type":"text"},{"text":" ","type":"text"},{"text":"타입 기반과 KeyPath 기반 주입을 모두 지원하며, 옵셔널과 필수 주입을 구분합니다.","type":"text"}],"type":"paragraph"},{"level":2,"type":"heading","text":"핵심 특징","anchor":"%ED%95%B5%EC%8B%AC-%ED%8A%B9%EC%A7%95"},{"level":3,"type":"heading","text":"🎯 자동 해결","anchor":"%F0%9F%8E%AF-%EC%9E%90%EB%8F%99-%ED%95%B4%EA%B2%B0"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"타입 기반","type":"text"}],"type":"strong"},{"text":": 타입만으로 자동 해결","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"KeyPath 기반","type":"text"}]},{"type":"text","text":": DependencyContainer KeyPath 사용"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"지연 주입","type":"text"}],"type":"strong"},{"text":": 실제 접근 시점까지 해결 지연","type":"text"}],"type":"paragraph"}]}]},{"level":3,"type":"heading","text":"🔒 안전성","anchor":"%F0%9F%94%92-%EC%95%88%EC%A0%84%EC%84%B1"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"옵셔널 주입","type":"text"}]},{"type":"text","text":": 실패해도 안전하게 처리"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"필수 주입","type":"text"}]},{"type":"text","text":": 실패 시 명확한 에러 메시지"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"타입 안전성"}]},{"type":"text","text":": 컴파일 타임 타입 검증"}]}]}]},{"level":3,"type":"heading","text":"⚡ 성능 최적화","anchor":"%E2%9A%A1-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"inlineContent":[{"text":"캐싱","type":"text"}],"type":"strong"},{"text":": 한 번 해결된 인스턴스 재사용","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"성능 추적","type":"text"}],"type":"strong"},{"type":"text","text":": 해결 성능 자동 측정 (디버그 빌드)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"메모리 효율","type":"text"}]},{"type":"text","text":": 약한 참조로 메모리 누수 방지"}],"type":"paragraph"}]}]},{"level":2,"type":"heading","text":"사용 예시","anchor":"%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C"},{"level":3,"type":"heading","text":"기본 사용법","anchor":"%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9%EB%B2%95"},{"type":"codeListing","code":["class UserViewModel {","    @Inject var userService: UserService?              \/\/ 옵셔널 주입","    @Inject var networkService: NetworkService!        \/\/ 필수 주입 (강제 언랩핑)","    @Inject(\\.databaseService) var database: DatabaseService?  \/\/ KeyPath 기반","","    func loadUser() {","        userService?.fetchUser { user in","            \/\/ 사용자 처리","        }","    }","}"],"syntax":"swift"},{"level":3,"type":"heading","text":"고급 사용법","anchor":"%EA%B3%A0%EA%B8%89-%EC%82%AC%EC%9A%A9%EB%B2%95"},{"type":"codeListing","code":["class AdvancedService {","    @Inject(fallback: { MockAnalytics() })","    var analytics: AnalyticsService                      \/\/ 폴백 제공","","    @Inject(cached: true)","    var expensiveService: ExpensiveService              \/\/ 캐싱 활성화","","    @Inject(tracking: true)","    var monitoredService: MonitoredService              \/\/ 성능 추적","}"],"syntax":"swift"},{"level":2,"type":"heading","text":"성능 고려사항","anchor":"%EC%84%B1%EB%8A%A5-%EA%B3%A0%EB%A0%A4%EC%82%AC%ED%95%AD"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"첫 번째 접근 시에만 해결 비용 발생"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"캐싱 활성화 시 메모리 사용량 증가"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"디버그 빌드에서 성능 추적 오버헤드 존재"}],"type":"paragraph"}]}]},{"level":2,"type":"heading","text":"마이그레이션","anchor":"%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98"},{"level":3,"type":"heading","text":"기존 DI 시스템에서","anchor":"%EA%B8%B0%EC%A1%B4-DI-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%97%90%EC%84%9C"},{"type":"codeListing","code":["\/\/ Before","let userService = DI.resolve(\\.userService)","","\/\/ After","@Inject(\\.userService) var userService: UserService?"],"syntax":"swift"}]}],"abstract":[{"type":"text","text":"의존성을 자동으로 해결하여 주입하는 프로퍼티 래퍼입니다."}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/Inject\/init(_:fallback:cached:tracking:)-8adkq","doc:\/\/DiContainer\/documentation\/DiContainer\/Inject\/init(_:fallback:cached:tracking:)-qxq1"],"anchor":"Initializers","generated":true},{"title":"Instance Properties","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/Inject\/wrappedValue"],"anchor":"Instance-Properties","generated":true}],"seeAlsoSections":[{"title":"핵심 컴포넌트","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/UnifiedDI","doc:\/\/DiContainer\/documentation\/DiContainer\/DI","doc:\/\/DiContainer\/documentation\/DiContainer\/DependencyContainer","doc:\/\/DiContainer\/documentation\/DiContainer\/GlobalUnifiedRegistry","doc:\/\/DiContainer\/documentation\/DiContainer\/RequiredInject","doc:\/\/DiContainer\/documentation\/DiContainer\/Factory","doc:\/\/DiContainer\/documentation\/DiContainer\/FactoryValues","doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerUsage","doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerPerformance","doc:\/\/DiContainer\/documentation\/DiContainer\/Container","doc:\/\/DiContainer\/documentation\/DiContainer\/Module","doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer"],"anchor":"핵심-컴포넌트","generated":true}],"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"modules":[{"name":"DiContainer"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Inject"}],"title":"Inject","externalID":"s:11DiContainer6InjectV","roleHeading":"Structure","symbolKind":"struct","navigatorTitle":[{"kind":"identifier","text":"Inject"}]},"references":{"doc://DiContainer/documentation/DiContainer/Inject":{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Inject","kind":"symbol","navigatorTitle":[{"text":"Inject","kind":"identifier"}],"title":"Inject","role":"symbol","abstract":[{"type":"text","text":"의존성을 자동으로 해결하여 주입하는 프로퍼티 래퍼입니다."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Inject","kind":"identifier"}],"url":"\/documentation\/dicontainer\/inject","type":"topic"},"doc://DiContainer/documentation/DiContainer/AppDIContainer":{"url":"\/documentation\/dicontainer\/appdicontainer","abstract":[],"fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AppDIContainer","kind":"identifier"}],"navigatorTitle":[{"text":"AppDIContainer","kind":"identifier"}],"kind":"symbol","type":"topic","title":"AppDIContainer","role":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer"},"doc://DiContainer/documentation/DiContainer/Inject/wrappedValue":{"type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Inject\/wrappedValue","kind":"symbol","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"wrappedValue","kind":"identifier"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"abstract":[{"type":"text","text":"의존성을 해결하여 반환합니다"}],"title":"wrappedValue","url":"\/documentation\/dicontainer\/inject\/wrappedvalue"},"doc://DiContainer/documentation/DiContainer/Inject/init(_:fallback:cached:tracking:)-8adkq":{"role":"symbol","type":"topic","abstract":[{"text":"KeyPath 기반 의존성 주입을 위한 초기화","type":"text"}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier","text":"KeyPath"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:11DiContainer010DependencyB0C","kind":"typeIdentifier","text":"DependencyContainer"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?>, "},{"kind":"externalParam","text":"fallback"},{"kind":"text","text":": (() -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"cached"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":", "},{"kind":"externalParam","text":"tracking"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":")"}],"kind":"symbol","url":"\/documentation\/dicontainer\/inject\/init(_:fallback:cached:tracking:)-8adkq","title":"init(_:fallback:cached:tracking:)","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Inject\/init(_:fallback:cached:tracking:)-8adkq"},"doc://DiContainer/documentation/DiContainer/GlobalUnifiedRegistry":{"url":"\/documentation\/dicontainer\/globalunifiedregistry","role":"symbol","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"GlobalUnifiedRegistry"},{"kind":"text","text":": "},{"preciseIdentifier":"s:11DiContainer15UnifiedRegistryC","kind":"typeIdentifier","text":"UnifiedRegistry"}],"title":"GlobalUnifiedRegistry","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/GlobalUnifiedRegistry","abstract":[{"type":"text","text":"글로벌 통합 Registry 인스턴스"},{"type":"text","text":" "},{"type":"text","text":"DependencyContainer.live에서 내부적으로 사용"}],"type":"topic","kind":"symbol"},"doc://DiContainer/documentation/DiContainer/FactoryValues":{"type":"topic","title":"FactoryValues","kind":"symbol","abstract":[{"text":"A global container of factories used across the application.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryValues","kind":"identifier"}],"navigatorTitle":[{"text":"FactoryValues","kind":"identifier"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/FactoryValues","role":"symbol","url":"\/documentation\/dicontainer\/factoryvalues"},"doc://DiContainer/documentation/DiContainer/Factory":{"type":"topic","navigatorTitle":[{"text":"Factory","kind":"identifier"}],"abstract":[{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/FactoryValues","isActive":true,"type":"reference"},{"text":" 로부터 특정 팩토리 인스턴스를 주입받는 프로퍼티 래퍼입니다.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Factory","kind":"identifier"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Factory","url":"\/documentation\/dicontainer\/factory","title":"Factory","role":"symbol","kind":"symbol"},"doc://DiContainer/documentation/DiContainer/Container":{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Container","type":"topic","title":"Container","url":"\/documentation\/dicontainer\/container","role":"symbol","abstract":[],"fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"Container"}],"navigatorTitle":[{"kind":"identifier","text":"Container"}],"kind":"symbol"},"doc://DiContainer/documentation/DiContainer":{"url":"\/documentation\/dicontainer","kind":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","abstract":[{"type":"text","text":"현대적인 Swift Concurrency와 Actor 모델을 위해 설계된 고성능 의존성 주입 프레임워크"}],"title":"DiContainer","type":"topic","role":"collection"},"doc://DiContainer/documentation/DiContainer/Inject/init(_:fallback:cached:tracking:)-qxq1":{"url":"\/documentation\/dicontainer\/inject\/init(_:fallback:cached:tracking:)-qxq1","kind":"symbol","type":"topic","role":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Inject\/init(_:fallback:cached:tracking:)-qxq1","title":"init(_:fallback:cached:tracking:)","abstract":[{"type":"text","text":"타입 기반 의존성 주입을 위한 초기화"}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"fallback"},{"kind":"text","text":": (() -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"cached"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"tracking"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}]},"doc://DiContainer/documentation/DiContainer/DI":{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/DI","kind":"symbol","url":"\/documentation\/dicontainer\/di","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DI","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"DI","kind":"identifier"}],"abstract":[{"type":"text","text":"단순화된 DI API - 사용자 혼란을 줄이기 위해 핵심 패턴만 제공"}],"role":"symbol","title":"DI"},"doc://DiContainer/documentation/DiContainer/ContainerUsage":{"abstract":[{"type":"text","text":"DiContainer의 Container는 모듈을 수집한 뒤 한 번에 병렬 등록하여 Actor hop을 최소화합니다."}],"type":"topic","url":"\/documentation\/dicontainer\/containerusage","title":"Container Usage","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerUsage","kind":"article","role":"article"},"doc://DiContainer/documentation/DiContainer/Module":{"type":"topic","abstract":[{"code":"Module","type":"codeVoice"},{"type":"text","text":"은 DI(의존성 주입)를 위한 "},{"inlineContent":[{"type":"text","text":"단일 모듈"}],"type":"strong"},{"type":"text","text":"을 나타내는 구조체입니다."}],"url":"\/documentation\/dicontainer\/module","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Module"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Module"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Module","title":"Module","role":"symbol"},"doc://DiContainer/documentation/DiContainer/ContainerPerformance":{"abstract":[{"type":"text","text":"Container는 모듈 배열을 스냅샷한 뒤 TaskGroup으로 병렬 등록하여 불필요한 actor hop을 줄입니다."}],"role":"article","kind":"article","title":"Container Performance","type":"topic","url":"\/documentation\/dicontainer\/containerperformance","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerPerformance"},"doc://DiContainer/documentation/DiContainer/RequiredInject":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"RequiredInject"}],"abstract":[{"type":"text","text":"의존성을 필수적으로 해결하여 주입하는 프로퍼티 래퍼입니다."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RequiredInject"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/RequiredInject","url":"\/documentation\/dicontainer\/requiredinject","title":"RequiredInject","role":"symbol","kind":"symbol"},"doc://DiContainer/documentation/DiContainer/DependencyContainer":{"kind":"symbol","type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DependencyContainer","kind":"identifier"}],"title":"DependencyContainer","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/DependencyContainer","abstract":[],"url":"\/documentation\/dicontainer\/dependencycontainer","navigatorTitle":[{"text":"DependencyContainer","kind":"identifier"}]},"doc://DiContainer/documentation/DiContainer/UnifiedDI":{"url":"\/documentation\/dicontainer\/unifieddi","type":"topic","kind":"article","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/UnifiedDI","role":"article","title":"통합 DI 시스템 - UnifiedDI vs DI","abstract":[{"text":"DiContainer 2.0은 두 가지 주요 API 진입점을 제공합니다: ","type":"text"},{"code":"UnifiedDI","type":"codeVoice"},{"text":"와 ","type":"text"},{"code":"DI","type":"codeVoice"},{"text":". 각각의 역할과 사용 시나리오를 이해하여 프로젝트에 최적한 선택을 하세요.","type":"text"}]}}}