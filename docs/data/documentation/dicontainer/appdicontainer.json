{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AppDIContainer","kind":"identifier"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"level":2,"text":"개요","anchor":"%EA%B0%9C%EC%9A%94","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"AppDIContainer"},{"type":"text","text":"는 애플리케이션 전체의 의존성 주입을 체계적으로 관리하는"},{"type":"text","text":" "},{"type":"text","text":"최상위 컨테이너 클래스입니다. Clean Architecture의 각 계층(Repository, UseCase, Service)을"},{"text":" ","type":"text"},{"type":"text","text":"자동화된 Factory 패턴을 통해 효율적으로 구성하고 관리합니다."}]},{"text":"핵심 철학","anchor":"%ED%95%B5%EC%8B%AC-%EC%B2%A0%ED%95%99","type":"heading","level":2},{"type":"heading","anchor":"%F0%9F%8F%97%EF%B8%8F-%EA%B3%84%EC%B8%B5%ED%99%94%EB%90%9C-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EC%A7%80%EC%9B%90","level":3,"text":"🏗️ 계층화된 아키텍처 지원"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Repository 계층","type":"text"}]},{"type":"text","text":": 데이터 접근 및 외부 시스템과의 연동"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"UseCase 계층","type":"text"}]},{"type":"text","text":": 비즈니스 로직과 도메인 규칙 캡슐화"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Service 계층","type":"text"}]},{"type":"text","text":": 애플리케이션 서비스와 UI 지원"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"자동 의존성 해결"}]},{"type":"text","text":": 계층 간 의존성이 자동으로 주입됨"}]}]}]},{"text":"🏭 Factory 기반 모듈화","anchor":"%F0%9F%8F%AD-Factory-%EA%B8%B0%EB%B0%98-%EB%AA%A8%EB%93%88%ED%99%94","type":"heading","level":3},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"RepositoryModuleFactory"}]},{"type":"text","text":": Repository 의존성 일괄 관리"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"UseCaseModuleFactory"}],"type":"strong"},{"text":": UseCase 의존성과 Repository 자동 연동","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"확장 가능성"}],"type":"strong"},{"text":": 새로운 Factory를 쉽게 추가 가능","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"타입 안전성"}]},{"type":"text","text":": 컴파일 타임에 의존성 타입 검증"}]}]}]},{"text":"🔄 생명주기 관리","anchor":"%F0%9F%94%84-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0-%EA%B4%80%EB%A6%AC","type":"heading","level":3},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"지연 초기화","type":"text"}]},{"type":"text","text":": 실제 필요 시점에 모듈들이 생성됨"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"메모리 효율성","type":"text"}]},{"type":"text","text":": 사용하지 않는 의존성은 생성되지 않음"}]}]}]},{"type":"heading","level":2,"anchor":"%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8","text":"아키텍처 다이어그램"},{"type":"codeListing","code":["┌─────────────────────────────────────┐","│           AppDIContainer            │","│                                     │","└─────────────────┬───────────────────┘","                  │","      ┌───────────┼───────────┐","      │           │           │","┌─────▼─────┐ ┌───▼────┐ ┌───▼────────┐","│Repository │ │UseCase │ │   Other    │","│ Factory   │ │Factory │ │ Factories  │","└───────────┘ └────────┘ └────────────┘","      │           │           │","      └───────────┼───────────┘","                  │","┌─────────────────▼───────────────────┐","│        DependencyContainer.live     │","│          (Global Registry)          │","└─────────────────────────────────────┘"],"syntax":null},{"type":"heading","level":2,"anchor":"%EB%8F%99%EC%9E%91-%EB%B0%A9%EC%8B%9D","text":"동작 방식"},{"type":"heading","level":3,"anchor":"1%EB%8B%A8%EA%B3%84-Factory-%EC%A4%80%EB%B9%84","text":"1단계: Factory 준비"},{"type":"codeListing","code":["\/\/ @Factory 프로퍼티 래퍼를 통한 자동 주입","@Factory(\\.repositoryFactory) ","var repositoryFactory: RepositoryModuleFactory","","@Factory(\\.useCaseFactory)","var useCaseFactory: UseCaseModuleFactory"],"syntax":"swift"},{"type":"heading","level":3,"anchor":"2%EB%8B%A8%EA%B3%84-%EB%AA%A8%EB%93%88-%EB%93%B1%EB%A1%9D","text":"2단계: 모듈 등록"},{"type":"codeListing","code":["await AppDIContainer.shared.registerDefaultDependencies()","\/\/ 내부적으로:","\/\/ 1. Repository Factory에서 모든 Repository 모듈 생성","\/\/ 2. UseCase Factory에서 Repository와 연동된 UseCase 모듈 생성  ","\/\/ 3. 모든 모듈을 병렬로 DependencyContainer.live에 등록"],"syntax":"swift"},{"type":"heading","level":3,"anchor":"3%EB%8B%A8%EA%B3%84-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%82%AC%EC%9A%A9","text":"3단계: 의존성 사용"},{"type":"codeListing","code":["\/\/ 어디서든 등록된 의존성 사용 가능","let userService = DependencyContainer.live.resolve(UserServiceProtocol.self)"],"syntax":"swift"},{"type":"heading","level":2,"anchor":"%EC%A7%80%EC%9B%90-%ED%99%98%EA%B2%BD-%EB%B0%8F-%ED%98%B8%ED%99%98%EC%84%B1","text":"지원 환경 및 호환성"},{"type":"heading","anchor":"Swift-%EB%B2%84%EC%A0%84-%ED%98%B8%ED%99%98%EC%84%B1","level":3,"text":"Swift 버전 호환성"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Swift 5.9+ & iOS 17.0+","type":"text"}]},{"text":": Actor 기반 최적화된 구현","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Swift 5.8 & iOS 16.0+","type":"text"}]},{"type":"text","text":": 호환성 모드로 동일한 기능 제공"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"이전 버전","type":"text"}]},{"type":"text","text":": Fallback 구현으로 핵심 기능 유지"}]}]}]},{"type":"heading","anchor":"%EB%8F%99%EC%8B%9C%EC%84%B1-%EC%A7%80%EC%9B%90","level":3,"text":"동시성 지원"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Swift Concurrency","type":"text"}]},{"type":"text","text":": async\/await 패턴 완전 지원"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"GCD 호환"}]},{"text":": 기존 DispatchQueue 코드와 호환","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Thread Safe"}]},{"text":": 모든 작업이 스레드 안전하게 처리","type":"text"}]}]}]},{"type":"heading","anchor":"Example","level":2,"text":"Example"},{"type":"heading","anchor":"%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9","level":3,"text":"기본 사용"},{"type":"codeListing","code":["@main","struct MyApp {","    static func main() async {","        await AppDIContainer.shared.registerDependencies { container in","            \/\/ Repository 모듈 등록","            container.register(UserRepositoryModule())","","            \/\/ UseCase 모듈 등록","            container.register(UserUseCaseModule())","        }","","        \/\/ 등록된 UseCase 사용","        let useCase: UserUseCaseProtocol = DependencyContainer.live.resolveOrDefault(","            UserUseCaseProtocol.self,","            default: UserUseCase(userRepo: UserRepository())","        )","        #logDebug(\"Loaded user profile: \\(await useCase.loadUserProfile().displayName)\")","    }","}"],"syntax":"swift"},{"type":"heading","anchor":"RepositoryModuleFactory--UseCaseModuleFactory-%ED%99%95%EC%9E%A5","level":3,"text":"RepositoryModuleFactory & UseCaseModuleFactory 확장"},{"type":"codeListing","code":["extension RepositoryModuleFactory {","    public mutating func registerDefaultDefinitions() {","        let registerModuleCopy = registerModule","        repositoryDefinitions = [","            registerModuleCopy.makeDependency(AuthRepositoryProtocol.self) {","                DefaultAuthRepository()","            }","        ]","    }","}","","extension UseCaseModuleFactory {","    public var useCaseDefinitions: [() -> Module] {","        [","            registerModule.makeUseCaseWithRepository(","                AuthUseCaseProtocol.self,","                repositoryProtocol: AuthRepositoryProtocol.self,","                repositoryFallback: DefaultAuthRepository()","            ) { repo in","                AuthUseCase(repository: repo)","            }","        ]","    }","}"],"syntax":"swift"},{"type":"heading","anchor":"ContainerResgister-%EC%82%AC%EC%9A%A9","level":3,"text":"ContainerResgister 사용"},{"type":"codeListing","code":["extension DependencyContainer {","    var authUseCase: AuthUseCaseProtocol? {","        ContainerResgister(\\.authUseCase).wrappedValue","    }","}","","\/\/ 사용 예시","let authUC: AuthUseCaseProtocol = ContainerResgister(\\.authUseCase).wrappedValue"],"syntax":"swift"},{"type":"heading","anchor":"SwiftUI-%EA%B8%B0%EB%B0%98-%EC%95%B1%EC%97%90%EC%84%9C-DI-%EC%A0%81%EC%9A%A9","level":3,"text":"SwiftUI 기반 앱에서 DI 적용"},{"type":"codeListing","code":["@main","struct TestApp: App {","    @UIApplicationDelegateAdaptor(AppDelegate.self) var appDelegate","","    init() {","        registerDependencies()","    }","","    var body: some Scene {","        WindowGroup {","            let store = Store(initialState: AppReducer.State()) {","                AppReducer()._printChanges()","            }","            AppView(store: store)","        }","    }","","    private func registerDependencies() {","        Task {","            await AppDIContainer.shared.registerDependencies { container in","                var repoFactory = AppDIContainer.shared.repositoryFactory","                repoFactory.registerDefaultDefinitions()","                await repoFactory.makeAllModules().asyncForEach { module in","                    await container.register(module)","                }","","                let useCaseFactory = AppDIContainer.shared.useCaseFactory","                await useCaseFactory.makeAllModules().asyncForEach { module in","                    await container.register(module)","                }","            }","        }","    }","}"],"syntax":"swift"},{"type":"heading","anchor":"Discussion","level":2,"text":"Discussion"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"AppDIContainer"},{"text":"는 단일 진입점(single entry point) 역할을 합니다.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"앱 초기화 시점에 모듈을 한꺼번에 등록해두면, 런타임에서 빠르고 안정적으로","type":"text"},{"text":" ","type":"text"},{"text":"의존성 객체를 생성·조회할 수 있습니다.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"내부 ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Container"},{"text":"가 등록된 모든 모듈을 ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"병렬로 실행"}]},{"text":"하여 성능을 최적화합니다.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Factory 패턴을 통해 Repository, UseCase, Scope 계층을 체계적으로 관리합니다.","type":"text"}]}]}]}]}],"variants":[{"paths":["\/documentation\/dicontainer\/appdicontainer"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/Container","doc:\/\/DiContainer\/documentation\/DiContainer\/Module","doc:\/\/DiContainer\/documentation\/DiContainer\/Factory","doc:\/\/DiContainer\/documentation\/DiContainer\/RepositoryModuleFactory","doc:\/\/DiContainer\/documentation\/DiContainer\/UseCaseModuleFactory"],"anchor":"Related-Documentation","title":"Related Documentation"},{"anchor":"핵심-컴포넌트","generated":true,"identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/UnifiedDI","doc:\/\/DiContainer\/documentation\/DiContainer\/DI","doc:\/\/DiContainer\/documentation\/DiContainer\/DependencyContainer","doc:\/\/DiContainer\/documentation\/DiContainer\/GlobalUnifiedRegistry","doc:\/\/DiContainer\/documentation\/DiContainer\/Inject","doc:\/\/DiContainer\/documentation\/DiContainer\/RequiredInject","doc:\/\/DiContainer\/documentation\/DiContainer\/Factory","doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerUsage","doc:\/\/DiContainer\/documentation\/DiContainer\/Container","doc:\/\/DiContainer\/documentation\/DiContainer\/Module"],"title":"핵심 컴포넌트"}],"metadata":{"title":"AppDIContainer","roleHeading":"Class","modules":[{"name":"DiContainer"}],"externalID":"s:11DiContainer14AppDIContainerC","role":"symbol","fragments":[{"text":"actor","kind":"keyword"},{"kind":"text","text":" "},{"text":"AppDIContainer","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"AppDIContainer"}],"symbolKind":"class"},"relationshipsSections":[{"type":"conformsTo","kind":"relationships","identifiers":["doc:\/\/DiContainer\/s8SendableP","doc:\/\/DiContainer\/s16SendableMetatypeP","doc:\/\/DiContainer\/ScA"],"title":"Conforms To"}],"topicSections":[{"anchor":"Instance-Properties","title":"Instance Properties","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/repositoryFactory","doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/scopeFactory","doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/useCaseFactory"],"generated":true},{"anchor":"Instance-Methods","title":"Instance Methods","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/registerDependencies(registerModules:)"],"generated":true},{"anchor":"Type-Properties","title":"Type Properties","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/shared"],"generated":true},{"anchor":"Default-Implementations","title":"Default Implementations","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/Actor-Implementations"],"generated":true}],"kind":"symbol","schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer"},"references":{"doc://DiContainer/documentation/DiContainer/AppDIContainer/useCaseFactory":{"title":"useCaseFactory","role":"symbol","url":"\/documentation\/dicontainer\/appdicontainer\/usecasefactory","kind":"symbol","abstract":[{"type":"text","text":"UseCase 계층에서 사용할 모듈(팩토리) 인스턴스를"},{"type":"text","text":" "},{"type":"text","text":"KeyPath를 통해 자동으로 주입받습니다."}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/useCaseFactory","type":"topic","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"useCaseFactory"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11DiContainer20UseCaseModuleFactoryV","text":"UseCaseModuleFactory"}]},"doc://DiContainer/ScA":{"type":"unresolvable","title":"_Concurrency.Actor","identifier":"doc:\/\/DiContainer\/ScA"},"doc://DiContainer/documentation/DiContainer/AppDIContainer/shared":{"type":"topic","title":"shared","abstract":[{"text":"앱 전역에서 사용할 수 있는 싱글턴 인스턴스입니다.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"shared"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AppDIContainer","preciseIdentifier":"s:11DiContainer14AppDIContainerC"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/shared","kind":"symbol","url":"\/documentation\/dicontainer\/appdicontainer\/shared"},"doc://DiContainer/documentation/DiContainer/RequiredInject":{"type":"topic","title":"RequiredInject","abstract":[],"role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequiredInject","kind":"identifier"}],"navigatorTitle":[{"text":"RequiredInject","kind":"identifier"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/RequiredInject","kind":"symbol","url":"\/documentation\/dicontainer\/requiredinject"},"doc://DiContainer/documentation/DiContainer/Inject":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Inject"}],"role":"symbol","title":"Inject","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Inject"}],"url":"\/documentation\/dicontainer\/inject","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Inject","kind":"symbol","abstract":[]},"doc://DiContainer/documentation/DiContainer/Factory":{"title":"Factory","abstract":[],"url":"\/documentation\/dicontainer\/factory","navigatorTitle":[{"kind":"identifier","text":"Factory"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Factory","kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Factory"}]},"doc://DiContainer/documentation/DiContainer/AppDIContainer/Actor-Implementations":{"type":"topic","title":"Actor Implementations","abstract":[],"role":"collectionGroup","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/Actor-Implementations","kind":"article","url":"\/documentation\/dicontainer\/appdicontainer\/actor-implementations"},"doc://DiContainer/documentation/DiContainer/UseCaseModuleFactory":{"title":"UseCaseModuleFactory","abstract":[{"text":"UseCase 계층 모듈 팩토리","type":"text"}],"url":"\/documentation\/dicontainer\/usecasemodulefactory","navigatorTitle":[{"text":"UseCaseModuleFactory","kind":"identifier"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/UseCaseModuleFactory","kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UseCaseModuleFactory","kind":"identifier"}]},"doc://DiContainer/documentation/DiContainer/Module":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Module","kind":"identifier"}],"role":"symbol","title":"Module","type":"topic","navigatorTitle":[{"text":"Module","kind":"identifier"}],"url":"\/documentation\/dicontainer\/module","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Module","kind":"symbol","abstract":[{"code":"Module","type":"codeVoice"},{"type":"text","text":"은 DI(의존성 주입)를 위한 "},{"inlineContent":[{"type":"text","text":"단일 모듈"}],"type":"strong"},{"text":"을 나타내는 구조체입니다.","type":"text"}]},"doc://DiContainer/documentation/DiContainer":{"type":"topic","abstract":[{"type":"text","text":"현대적인 Swift Concurrency와 Actor 모델을 위해 설계된 고성능 의존성 주입 프레임워크"}],"title":"DiContainer","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","url":"\/documentation\/dicontainer","role":"collection","kind":"symbol"},"doc://DiContainer/documentation/DiContainer/AppDIContainer/registerDependencies(registerModules:)":{"type":"topic","title":"registerDependencies(registerModules:)","abstract":[{"text":"의존성 모듈들을 등록하고, 등록된 모듈을 병렬 실행하여 빌드합니다.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"registerDependencies"},{"kind":"text","text":"("},{"kind":"externalParam","text":"registerModules"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Container","preciseIdentifier":"s:11DiContainer0B0a"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/registerDependencies(registerModules:)","kind":"symbol","url":"\/documentation\/dicontainer\/appdicontainer\/registerdependencies(registermodules:)"},"doc://DiContainer/s16SendableMetatypeP":{"type":"unresolvable","title":"Swift.SendableMetatype","identifier":"doc:\/\/DiContainer\/s16SendableMetatypeP"},"doc://DiContainer/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/DiContainer\/s8SendableP"},"doc://DiContainer/documentation/DiContainer/UnifiedDI":{"role":"article","title":"통합 DI 시스템 - UnifiedDI vs DI","type":"topic","url":"\/documentation\/dicontainer\/unifieddi","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/UnifiedDI","kind":"article","abstract":[{"text":"DiContainer 2.0은 두 가지 주요 API 진입점을 제공합니다: ","type":"text"},{"type":"codeVoice","code":"UnifiedDI"},{"text":"와 ","type":"text"},{"type":"codeVoice","code":"DI"},{"text":". 각각의 역할과 사용 시나리오를 이해하여 프로젝트에 최적한 선택을 하세요.","type":"text"}]},"doc://DiContainer/documentation/DiContainer/RepositoryModuleFactory":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"RepositoryModuleFactory"}],"abstract":[{"type":"text","text":"Repository 계층 모듈 팩토리"}],"title":"RepositoryModuleFactory","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/RepositoryModuleFactory","url":"\/documentation\/dicontainer\/repositorymodulefactory","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RepositoryModuleFactory"}],"kind":"symbol"},"doc://DiContainer/documentation/DiContainer/DI":{"type":"topic","title":"DI","abstract":[{"type":"text","text":"기존 DI API와의 호환성을 위한 별칭"}],"role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DI"}],"navigatorTitle":[{"kind":"identifier","text":"DI"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/DI","kind":"symbol","url":"\/documentation\/dicontainer\/di"},"doc://DiContainer/documentation/DiContainer/ContainerUsage":{"title":"Container Usage","type":"topic","abstract":[{"type":"text","text":"DiContainer의 Container는 모듈을 수집한 뒤 한 번에 병렬 등록하여 Actor hop을 최소화합니다."}],"role":"article","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerUsage","kind":"article","url":"\/documentation\/dicontainer\/containerusage"},"doc://DiContainer/documentation/DiContainer/GlobalUnifiedRegistry":{"fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"GlobalUnifiedRegistry"},{"kind":"text","text":": "},{"text":"UnifiedRegistry","kind":"typeIdentifier","preciseIdentifier":"s:11DiContainer15UnifiedRegistryC"}],"role":"symbol","title":"GlobalUnifiedRegistry","type":"topic","url":"\/documentation\/dicontainer\/globalunifiedregistry","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/GlobalUnifiedRegistry","kind":"symbol","abstract":[{"text":"글로벌 통합 Registry 인스턴스","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"DependencyContainer.live에서 내부적으로 사용"}]},"doc://DiContainer/documentation/DiContainer/AppDIContainer/scopeFactory":{"title":"scopeFactory","role":"symbol","abstract":[{"text":"DependencyScope 기반 모듈(팩토리) 인스턴스를","type":"text"},{"text":" ","type":"text"},{"text":"KeyPath를 통해 자동으로 주입받습니다.","type":"text"}],"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"scopeFactory"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11DiContainer18ScopeModuleFactoryV","text":"ScopeModuleFactory"}],"kind":"symbol","url":"\/documentation\/dicontainer\/appdicontainer\/scopefactory","type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/scopeFactory"},"doc://DiContainer/documentation/DiContainer/DependencyContainer":{"role":"symbol","kind":"symbol","url":"\/documentation\/dicontainer\/dependencycontainer","abstract":[{"type":"text","text":"기존 DependencyContainer와의 호환성을 위한 별칭"}],"type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DependencyContainer"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/DependencyContainer","navigatorTitle":[{"kind":"identifier","text":"DependencyContainer"}],"title":"DependencyContainer"},"doc://DiContainer/documentation/DiContainer/AppDIContainer/repositoryFactory":{"title":"repositoryFactory","abstract":[{"type":"text","text":"Repository 계층에서 사용할 모듈(팩토리) 인스턴스를"},{"text":" ","type":"text"},{"text":"KeyPath를 통해 자동으로 주입받습니다.","type":"text"}],"url":"\/documentation\/dicontainer\/appdicontainer\/repositoryfactory","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/repositoryFactory","kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"repositoryFactory"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RepositoryModuleFactory","preciseIdentifier":"s:11DiContainer23RepositoryModuleFactoryV"}]},"doc://DiContainer/documentation/DiContainer/AppDIContainer":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"AppDIContainer"}],"abstract":[],"title":"AppDIContainer","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer","url":"\/documentation\/dicontainer\/appdicontainer","role":"symbol","fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"AppDIContainer"}],"kind":"symbol"},"doc://DiContainer/documentation/DiContainer/Container":{"title":"Container","type":"topic","abstract":[{"text":"기존 Container와의 호환성을 위한 별칭","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Container"}],"navigatorTitle":[{"kind":"identifier","text":"Container"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Container","kind":"symbol","url":"\/documentation\/dicontainer\/container"}}}