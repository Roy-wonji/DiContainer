{"metadata":{"role":"symbol","externalID":"s:11DiContainer14AppDIContainerC","roleHeading":"Class","navigatorTitle":[{"kind":"identifier","text":"AppDIContainer"}],"fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"AppDIContainer"}],"title":"AppDIContainer","symbolKind":"class","modules":[{"name":"DiContainer"}]},"identifier":{"url":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"topicSections":[{"anchor":"Instance-Properties","title":"Instance Properties","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/repositoryFactory","doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/scopeFactory","doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/useCaseFactory"],"generated":true},{"anchor":"Instance-Methods","title":"Instance Methods","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/registerDependencies(registerModules:)"],"generated":true},{"anchor":"Type-Properties","title":"Type Properties","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/shared"],"generated":true},{"anchor":"Default-Implementations","title":"Default Implementations","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/Actor-Implementations"],"generated":true}],"seeAlsoSections":[{"anchor":"Related-Documentation","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/Container","doc:\/\/DiContainer\/documentation\/DiContainer\/Module","doc:\/\/DiContainer\/documentation\/DiContainer\/Factory","doc:\/\/DiContainer\/documentation\/DiContainer\/RepositoryModuleFactory","doc:\/\/DiContainer\/documentation\/DiContainer\/UseCaseModuleFactory"],"title":"Related Documentation"},{"generated":true,"anchor":"핵심-컴포넌트","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/UnifiedDI","doc:\/\/DiContainer\/documentation\/DiContainer\/DI","doc:\/\/DiContainer\/documentation\/DiContainer\/DependencyContainer","doc:\/\/DiContainer\/documentation\/DiContainer\/GlobalUnifiedRegistry","doc:\/\/DiContainer\/documentation\/DiContainer\/Inject","doc:\/\/DiContainer\/documentation\/DiContainer\/RequiredInject","doc:\/\/DiContainer\/documentation\/DiContainer\/Factory","doc:\/\/DiContainer\/documentation\/DiContainer\/FactoryValues","doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerUsage","doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerPerformance","doc:\/\/DiContainer\/documentation\/DiContainer\/Container","doc:\/\/DiContainer\/documentation\/DiContainer\/Module"],"title":"핵심 컴포넌트"}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AppDIContainer","kind":"identifier"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","level":2,"text":"개요","anchor":"%EA%B0%9C%EC%9A%94"},{"type":"paragraph","inlineContent":[{"code":"AppDIContainer","type":"codeVoice"},{"text":"는 애플리케이션 전체의 의존성 주입을 체계적으로 관리하는","type":"text"},{"text":" ","type":"text"},{"text":"최상위 컨테이너 클래스입니다. Clean Architecture의 각 계층(Repository, UseCase, Service)을","type":"text"},{"text":" ","type":"text"},{"text":"자동화된 Factory 패턴을 통해 효율적으로 구성하고 관리합니다.","type":"text"}]},{"type":"heading","level":2,"text":"핵심 철학","anchor":"%ED%95%B5%EC%8B%AC-%EC%B2%A0%ED%95%99"},{"type":"heading","level":3,"text":"🏗️ 계층화된 아키텍처 지원","anchor":"%F0%9F%8F%97%EF%B8%8F-%EA%B3%84%EC%B8%B5%ED%99%94%EB%90%9C-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EC%A7%80%EC%9B%90"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Repository 계층"}],"type":"strong"},{"text":": 데이터 접근 및 외부 시스템과의 연동","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"UseCase 계층","type":"text"}],"type":"strong"},{"type":"text","text":": 비즈니스 로직과 도메인 규칙 캡슐화"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Service 계층"}]},{"type":"text","text":": 애플리케이션 서비스와 UI 지원"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"자동 의존성 해결"}]},{"text":": 계층 간 의존성이 자동으로 주입됨","type":"text"}]}]}]},{"type":"heading","level":3,"text":"🏭 Factory 기반 모듈화","anchor":"%F0%9F%8F%AD-Factory-%EA%B8%B0%EB%B0%98-%EB%AA%A8%EB%93%88%ED%99%94"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"RepositoryModuleFactory"}]},{"text":": Repository 의존성 일괄 관리","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"UseCaseModuleFactory","type":"text"}],"type":"strong"},{"text":": UseCase 의존성과 Repository 자동 연동","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"확장 가능성"}]},{"type":"text","text":": 새로운 Factory를 쉽게 추가 가능"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"타입 안전성","type":"text"}],"type":"strong"},{"type":"text","text":": 컴파일 타임에 의존성 타입 검증"}]}]}]},{"type":"heading","level":3,"text":"🔄 생명주기 관리","anchor":"%F0%9F%94%84-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0-%EA%B4%80%EB%A6%AC"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"싱글턴 패턴"}]},{"type":"text","text":": 앱 전역에서 단일 인스턴스 사용"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"지연 초기화","type":"text"}]},{"type":"text","text":": 실제 필요 시점에 모듈들이 생성됨"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"메모리 효율성","type":"text"}]},{"type":"text","text":": 사용하지 않는 의존성은 생성되지 않음"}]}]}]},{"type":"heading","level":2,"text":"아키텍처 다이어그램","anchor":"%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8"},{"type":"codeListing","syntax":null,"code":["┌─────────────────────────────────────┐","│           AppDIContainer            │","│              (Singleton)            │","└─────────────────┬───────────────────┘","                  │","      ┌───────────┼───────────┐","      │           │           │","┌─────▼─────┐ ┌───▼────┐ ┌───▼────────┐","│Repository │ │UseCase │ │   Other    │","│ Factory   │ │Factory │ │ Factories  │","└───────────┘ └────────┘ └────────────┘","      │           │           │","      └───────────┼───────────┘","                  │","┌─────────────────▼───────────────────┐","│        DependencyContainer.live     │","│          (Global Registry)          │","└─────────────────────────────────────┘"]},{"type":"heading","level":2,"text":"동작 방식","anchor":"%EB%8F%99%EC%9E%91-%EB%B0%A9%EC%8B%9D"},{"type":"heading","level":3,"text":"1단계: Factory 준비","anchor":"1%EB%8B%A8%EA%B3%84-Factory-%EC%A4%80%EB%B9%84"},{"type":"codeListing","syntax":"swift","code":["\/\/ @Factory 프로퍼티 래퍼를 통한 자동 주입","@Factory(\\.repositoryFactory) ","var repositoryFactory: RepositoryModuleFactory","","@Factory(\\.useCaseFactory)","var useCaseFactory: UseCaseModuleFactory"]},{"type":"heading","level":3,"text":"2단계: 모듈 등록","anchor":"2%EB%8B%A8%EA%B3%84-%EB%AA%A8%EB%93%88-%EB%93%B1%EB%A1%9D"},{"type":"codeListing","syntax":"swift","code":["await AppDIContainer.shared.registerDefaultDependencies()","\/\/ 내부적으로:","\/\/ 1. Repository Factory에서 모든 Repository 모듈 생성","\/\/ 2. UseCase Factory에서 Repository와 연동된 UseCase 모듈 생성  ","\/\/ 3. 모든 모듈을 병렬로 DependencyContainer.live에 등록"]},{"type":"heading","level":3,"text":"3단계: 의존성 사용","anchor":"3%EB%8B%A8%EA%B3%84-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%82%AC%EC%9A%A9"},{"type":"codeListing","syntax":"swift","code":["\/\/ 어디서든 등록된 의존성 사용 가능","let userService = DependencyContainer.live.resolve(UserServiceProtocol.self)"]},{"type":"heading","level":2,"text":"지원 환경 및 호환성","anchor":"%EC%A7%80%EC%9B%90-%ED%99%98%EA%B2%BD-%EB%B0%8F-%ED%98%B8%ED%99%98%EC%84%B1"},{"type":"heading","level":3,"text":"Swift 버전 호환성","anchor":"Swift-%EB%B2%84%EC%A0%84-%ED%98%B8%ED%99%98%EC%84%B1"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Swift 5.9+ & iOS 17.0+","type":"text"}]},{"type":"text","text":": Actor 기반 최적화된 구현"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Swift 5.8 & iOS 16.0+","type":"text"}],"type":"strong"},{"text":": 호환성 모드로 동일한 기능 제공","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"이전 버전","type":"text"}],"type":"strong"},{"text":": Fallback 구현으로 핵심 기능 유지","type":"text"}]}]}]},{"type":"heading","level":3,"text":"동시성 지원","anchor":"%EB%8F%99%EC%8B%9C%EC%84%B1-%EC%A7%80%EC%9B%90"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Swift Concurrency"}]},{"type":"text","text":": async\/await 패턴 완전 지원"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"GCD 호환","type":"text"}],"type":"strong"},{"text":": 기존 DispatchQueue 코드와 호환","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Thread Safe","type":"text"}],"type":"strong"},{"text":": 모든 작업이 스레드 안전하게 처리","type":"text"}]}]}]},{"type":"heading","level":2,"text":"Example","anchor":"Example"},{"type":"heading","level":3,"text":"기본 사용","anchor":"%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9"},{"type":"codeListing","syntax":"swift","code":["@main","struct MyApp {","    static func main() async {","        await AppDIContainer.shared.registerDependencies { container in","            \/\/ Repository 모듈 등록","            container.register(UserRepositoryModule())","","            \/\/ UseCase 모듈 등록","            container.register(UserUseCaseModule())","        }","","        \/\/ 등록된 UseCase 사용","        let useCase: UserUseCaseProtocol = DependencyContainer.live.resolveOrDefault(","            UserUseCaseProtocol.self,","            default: UserUseCase(userRepo: UserRepository())","        )","        print(\"Loaded user profile: \\(await useCase.loadUserProfile().displayName)\")","    }","}"]},{"type":"heading","level":3,"text":"RepositoryModuleFactory & UseCaseModuleFactory 확장","anchor":"RepositoryModuleFactory--UseCaseModuleFactory-%ED%99%95%EC%9E%A5"},{"type":"codeListing","syntax":"swift","code":["extension RepositoryModuleFactory {","    public mutating func registerDefaultDefinitions() {","        let registerModuleCopy = registerModule","        repositoryDefinitions = [","            registerModuleCopy.makeDependency(AuthRepositoryProtocol.self) {","                DefaultAuthRepository()","            }","        ]","    }","}","","extension UseCaseModuleFactory {","    public var useCaseDefinitions: [() -> Module] {","        [","            registerModule.makeUseCaseWithRepository(","                AuthUseCaseProtocol.self,","                repositoryProtocol: AuthRepositoryProtocol.self,","                repositoryFallback: DefaultAuthRepository()","            ) { repo in","                AuthUseCase(repository: repo)","            }","        ]","    }","}"]},{"type":"heading","level":3,"text":"ContainerResgister 사용","anchor":"ContainerResgister-%EC%82%AC%EC%9A%A9"},{"type":"codeListing","syntax":"swift","code":["extension DependencyContainer {","    var authUseCase: AuthUseCaseProtocol? {","        ContainerResgister(\\.authUseCase).wrappedValue","    }","}","","\/\/ 사용 예시","let authUC: AuthUseCaseProtocol = ContainerResgister(\\.authUseCase).wrappedValue"]},{"type":"heading","level":3,"text":"SwiftUI 기반 앱에서 DI 적용","anchor":"SwiftUI-%EA%B8%B0%EB%B0%98-%EC%95%B1%EC%97%90%EC%84%9C-DI-%EC%A0%81%EC%9A%A9"},{"type":"codeListing","syntax":"swift","code":["@main","struct TestApp: App {","    @UIApplicationDelegateAdaptor(AppDelegate.self) var appDelegate","","    init() {","        registerDependencies()","    }","","    var body: some Scene {","        WindowGroup {","            let store = Store(initialState: AppReducer.State()) {","                AppReducer()._printChanges()","            }","            AppView(store: store)","        }","    }","","    private func registerDependencies() {","        Task {","            await AppDIContainer.shared.registerDependencies { container in","                var repoFactory = AppDIContainer.shared.repositoryFactory","                repoFactory.registerDefaultDefinitions()","                await repoFactory.makeAllModules().asyncForEach { module in","                    await container.register(module)","                }","","                let useCaseFactory = AppDIContainer.shared.useCaseFactory","                await useCaseFactory.makeAllModules().asyncForEach { module in","                    await container.register(module)","                }","            }","        }","    }","}"]},{"type":"heading","level":2,"text":"Discussion","anchor":"Discussion"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"AppDIContainer"},{"type":"text","text":"는 단일 진입점(single entry point) 역할을 합니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"앱 초기화 시점에 모듈을 한꺼번에 등록해두면, 런타임에서 빠르고 안정적으로","type":"text"},{"text":" ","type":"text"},{"text":"의존성 객체를 생성·조회할 수 있습니다.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"내부 "},{"isActive":true,"type":"reference","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Container"},{"type":"text","text":"가 등록된 모든 모듈을 "},{"type":"strong","inlineContent":[{"text":"병렬로 실행","type":"text"}]},{"type":"text","text":"하여 성능을 최적화합니다."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Factory 패턴을 통해 Repository, UseCase, Scope 계층을 체계적으로 관리합니다."}],"type":"paragraph"}]}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/dicontainer\/appdicontainer"]}],"relationshipsSections":[{"kind":"relationships","type":"conformsTo","identifiers":["doc:\/\/DiContainer\/s8SendableP","doc:\/\/DiContainer\/ScA"],"title":"Conforms To"}],"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"kind":"symbol","references":{"doc://DiContainer/documentation/DiContainer/RequiredInject":{"abstract":[{"text":"의존성을 필수적으로 해결하여 주입하는 프로퍼티 래퍼입니다.","type":"text"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequiredInject","kind":"identifier"}],"navigatorTitle":[{"text":"RequiredInject","kind":"identifier"}],"url":"\/documentation\/dicontainer\/requiredinject","role":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/RequiredInject","title":"RequiredInject","type":"topic"},"doc://DiContainer/documentation/DiContainer/AppDIContainer/repositoryFactory":{"abstract":[{"type":"text","text":"Repository 계층에서 사용할 모듈(팩토리) 인스턴스를"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/FactoryValues"},{"type":"text","text":" 내 정의된 경로에서 자동으로 주입받습니다."}],"type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/repositoryFactory","title":"repositoryFactory","role":"symbol","url":"\/documentation\/dicontainer\/appdicontainer\/repositoryfactory","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"repositoryFactory","kind":"identifier"},{"text":": ","kind":"text"},{"text":"RepositoryModuleFactory","preciseIdentifier":"s:11DiContainer23RepositoryModuleFactoryV","kind":"typeIdentifier"}],"kind":"symbol"},"doc://DiContainer/documentation/DiContainer/Factory":{"title":"Factory","kind":"symbol","type":"topic","url":"\/documentation\/dicontainer\/factory","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Factory","abstract":[{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/FactoryValues","isActive":true,"type":"reference"},{"type":"text","text":" 로부터 특정 팩토리 인스턴스를 주입받는 프로퍼티 래퍼입니다."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Factory","kind":"identifier"}],"navigatorTitle":[{"text":"Factory","kind":"identifier"}],"role":"symbol"},"doc://DiContainer/documentation/DiContainer/ContainerUsage":{"kind":"article","abstract":[{"type":"text","text":"DiContainer의 Container는 모듈을 수집한 뒤 한 번에 병렬 등록하여 Actor hop을 최소화합니다."}],"title":"Container Usage","type":"topic","url":"\/documentation\/dicontainer\/containerusage","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerUsage","role":"article"},"doc://DiContainer/documentation/DiContainer/ContainerPerformance":{"title":"Container Performance","url":"\/documentation\/dicontainer\/containerperformance","abstract":[{"type":"text","text":"Container는 모듈 배열을 스냅샷한 뒤 TaskGroup으로 병렬 등록하여 불필요한 actor hop을 줄입니다."}],"kind":"article","type":"topic","role":"article","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/ContainerPerformance"},"doc://DiContainer/documentation/DiContainer/AppDIContainer":{"url":"\/documentation\/dicontainer\/appdicontainer","kind":"symbol","title":"AppDIContainer","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AppDIContainer"}],"fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"AppDIContainer"}],"type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer","abstract":[]},"doc://DiContainer/documentation/DiContainer":{"type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","kind":"symbol","title":"DiContainer","url":"\/documentation\/dicontainer","role":"collection","abstract":[{"type":"text","text":"현대적인 Swift Concurrency와 Actor 모델을 위해 설계된 고성능 의존성 주입 프레임워크"}]},"doc://DiContainer/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/DiContainer\/s8SendableP","type":"unresolvable"},"doc://DiContainer/documentation/DiContainer/UnifiedDI":{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/UnifiedDI","kind":"article","abstract":[{"text":"DiContainer 2.0은 두 가지 주요 API 진입점을 제공합니다: ","type":"text"},{"code":"UnifiedDI","type":"codeVoice"},{"text":"와 ","type":"text"},{"code":"DI","type":"codeVoice"},{"text":". 각각의 역할과 사용 시나리오를 이해하여 프로젝트에 최적한 선택을 하세요.","type":"text"}],"title":"통합 DI 시스템 - UnifiedDI vs DI","role":"article","type":"topic","url":"\/documentation\/dicontainer\/unifieddi"},"doc://DiContainer/documentation/DiContainer/AppDIContainer/Actor-Implementations":{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/Actor-Implementations","role":"collectionGroup","url":"\/documentation\/dicontainer\/appdicontainer\/actor-implementations","kind":"article","title":"Actor Implementations","abstract":[],"type":"topic"},"doc://DiContainer/documentation/DiContainer/DI":{"navigatorTitle":[{"kind":"identifier","text":"DI"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"DI"}],"role":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/DI","abstract":[{"text":"단순화된 DI API - 사용자 혼란을 줄이기 위해 핵심 패턴만 제공","type":"text"}],"url":"\/documentation\/dicontainer\/di","kind":"symbol","type":"topic","title":"DI"},"doc://DiContainer/documentation/DiContainer/Module":{"abstract":[{"type":"codeVoice","code":"Module"},{"text":"은 DI(의존성 주입)를 위한 ","type":"text"},{"type":"strong","inlineContent":[{"text":"단일 모듈","type":"text"}]},{"text":"을 나타내는 구조체입니다.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Module"}],"navigatorTitle":[{"kind":"identifier","text":"Module"}],"role":"symbol","kind":"symbol","url":"\/documentation\/dicontainer\/module","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Module","type":"topic","title":"Module"},"doc://DiContainer/documentation/DiContainer/Container":{"role":"symbol","abstract":[],"kind":"symbol","url":"\/documentation\/dicontainer\/container","fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"Container"}],"navigatorTitle":[{"kind":"identifier","text":"Container"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Container","title":"Container","type":"topic"},"doc://DiContainer/documentation/DiContainer/AppDIContainer/shared":{"role":"symbol","title":"shared","url":"\/documentation\/dicontainer\/appdicontainer\/shared","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"shared","kind":"identifier"},{"text":": ","kind":"text"},{"text":"AppDIContainer","kind":"typeIdentifier","preciseIdentifier":"s:11DiContainer14AppDIContainerC"}],"abstract":[{"type":"text","text":"앱 전역에서 사용할 수 있는 싱글턴 인스턴스입니다."}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/shared","kind":"symbol"},"doc://DiContainer/documentation/DiContainer/FactoryValues":{"title":"FactoryValues","kind":"symbol","url":"\/documentation\/dicontainer\/factoryvalues","type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/FactoryValues","abstract":[{"type":"text","text":"A global container of factories used across the application."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryValues","kind":"identifier"}],"navigatorTitle":[{"text":"FactoryValues","kind":"identifier"}],"role":"symbol"},"doc://DiContainer/documentation/DiContainer/AppDIContainer/useCaseFactory":{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/useCaseFactory","url":"\/documentation\/dicontainer\/appdicontainer\/usecasefactory","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"useCaseFactory","kind":"identifier"},{"text":": ","kind":"text"},{"text":"UseCaseModuleFactory","preciseIdentifier":"s:11DiContainer20UseCaseModuleFactoryV","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"UseCase 계층에서 사용할 모듈(팩토리) 인스턴스를"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/FactoryValues"},{"type":"text","text":" 내 정의된 경로에서 자동으로 주입받습니다."}],"title":"useCaseFactory","type":"topic","role":"symbol","kind":"symbol"},"doc://DiContainer/documentation/DiContainer/Inject":{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Inject","kind":"symbol","abstract":[{"text":"의존성을 자동으로 해결하여 주입하는 프로퍼티 래퍼입니다.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"Inject","kind":"identifier"}],"url":"\/documentation\/dicontainer\/inject","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Inject","kind":"identifier"}],"title":"Inject","type":"topic"},"doc://DiContainer/documentation/DiContainer/AppDIContainer/scopeFactory":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"scopeFactory","kind":"identifier"},{"text":": ","kind":"text"},{"text":"ScopeModuleFactory","kind":"typeIdentifier","preciseIdentifier":"s:11DiContainer18ScopeModuleFactoryV"}],"url":"\/documentation\/dicontainer\/appdicontainer\/scopefactory","type":"topic","kind":"symbol","title":"scopeFactory","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/scopeFactory","role":"symbol","abstract":[{"type":"text","text":"DependencyScope 기반 모듈(팩토리) 인스턴스를"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/FactoryValues","type":"reference"},{"type":"text","text":" 내 정의된 경로에서 자동으로 주입받습니다."}]},"doc://DiContainer/documentation/DiContainer/DependencyContainer":{"abstract":[],"url":"\/documentation\/dicontainer\/dependencycontainer","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/DependencyContainer","role":"symbol","title":"DependencyContainer","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DependencyContainer"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"DependencyContainer"}],"kind":"symbol"},"doc://DiContainer/documentation/DiContainer/GlobalUnifiedRegistry":{"url":"\/documentation\/dicontainer\/globalunifiedregistry","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/GlobalUnifiedRegistry","title":"GlobalUnifiedRegistry","abstract":[{"text":"글로벌 통합 Registry 인스턴스","type":"text"},{"text":" ","type":"text"},{"text":"DependencyContainer.live에서 내부적으로 사용","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"GlobalUnifiedRegistry"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnifiedRegistry","preciseIdentifier":"s:11DiContainer15UnifiedRegistryC"}],"type":"topic","kind":"symbol"},"doc://DiContainer/documentation/DiContainer/UseCaseModuleFactory":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"UseCaseModuleFactory"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"UseCaseModuleFactory"}],"title":"UseCaseModuleFactory","abstract":[{"text":"UseCase 계층 모듈 팩토리","type":"text"}],"url":"\/documentation\/dicontainer\/usecasemodulefactory","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/UseCaseModuleFactory","role":"symbol","kind":"symbol"},"doc://DiContainer/documentation/DiContainer/RepositoryModuleFactory":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RepositoryModuleFactory"}],"navigatorTitle":[{"kind":"identifier","text":"RepositoryModuleFactory"}],"kind":"symbol","abstract":[{"type":"text","text":"Repository 계층 모듈 팩토리"}],"type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/RepositoryModuleFactory","url":"\/documentation\/dicontainer\/repositorymodulefactory","title":"RepositoryModuleFactory","role":"symbol"},"doc://DiContainer/documentation/DiContainer/AppDIContainer/registerDependencies(registerModules:)":{"type":"topic","abstract":[{"type":"text","text":"의존성 모듈들을 등록하고, 등록된 모듈을 병렬 실행하여 빌드합니다."}],"title":"registerDependencies(registerModules:)","kind":"symbol","url":"\/documentation\/dicontainer\/appdicontainer\/registerdependencies(registermodules:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"registerDependencies","kind":"identifier"},{"text":"(","kind":"text"},{"text":"registerModules","kind":"externalParam"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:11DiContainer0B0C","text":"Container","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/registerDependencies(registerModules:)"},"doc://DiContainer/ScA":{"title":"_Concurrency.Actor","identifier":"doc:\/\/DiContainer\/ScA","type":"unresolvable"}}}