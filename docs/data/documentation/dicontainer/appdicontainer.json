{"variants":[{"paths":["\/documentation\/dicontainer\/appdicontainer"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/DiContainer\/documentation\/DiContainer"]]},"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/DiContainer\/s8SendableP","doc:\/\/DiContainer\/s16SendableMetatypeP","doc:\/\/DiContainer\/ScA"],"type":"conformsTo","title":"Conforms To"}],"seeAlsoSections":[{"identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/Container","doc:\/\/DiContainer\/documentation\/DiContainer\/Module","doc:\/\/DiContainer\/documentation\/DiContainer\/Factory","doc:\/\/DiContainer\/documentation\/DiContainer\/RepositoryModuleFactory","doc:\/\/DiContainer\/documentation\/DiContainer\/UseCaseModuleFactory"],"anchor":"Related-Documentation","title":"Related Documentation"},{"generated":true,"identifiers":["doc:\/\/DiContainer\/tutorials\/DiContainer\/Tutorial-YourFirstDI","doc:\/\/DiContainer\/tutorials\/DiContainer\/Tutorial-MeetDiContainer","doc:\/\/DiContainer\/documentation\/DiContainer\/UnifiedDI","doc:\/\/DiContainer\/documentation\/DiContainer\/DI","doc:\/\/DiContainer\/documentation\/DiContainer\/DependencyContainer","doc:\/\/DiContainer\/documentation\/DiContainer\/AutoDIOptimizer","doc:\/\/DiContainer\/documentation\/DiContainer\/Container","doc:\/\/DiContainer\/documentation\/DiContainer\/Module"],"anchor":"시작하기","title":"시작하기"}],"sections":[],"metadata":{"modules":[{"name":"DiContainer"}],"fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"AppDIContainer"}],"symbolKind":"class","externalID":"s:11DiContainer14AppDIContainerC","roleHeading":"Class","navigatorTitle":[{"text":"AppDIContainer","kind":"identifier"}],"title":"AppDIContainer","role":"symbol"},"identifier":{"url":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer","interfaceLanguage":"swift"},"kind":"symbol","schemaVersion":{"patch":0,"minor":3,"major":0},"topicSections":[{"anchor":"Instance-Properties","generated":true,"title":"Instance Properties","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/repositoryFactory","doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/scopeFactory","doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/useCaseFactory"]},{"anchor":"Instance-Methods","generated":true,"title":"Instance Methods","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/registerDependencies(registerModules:)"]},{"anchor":"Type-Properties","generated":true,"title":"Type Properties","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/shared"]},{"anchor":"Default-Implementations","generated":true,"title":"Default Implementations","identifiers":["doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/Actor-Implementations"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AppDIContainer","kind":"identifier"}],"platforms":["macOS"]}]},{"kind":"content","content":[{"level":2,"text":"개요","anchor":"%EA%B0%9C%EC%9A%94","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"AppDIContainer"},{"type":"text","text":"는 애플리케이션 전체의 의존성 주입을 체계적으로 관리하는"},{"type":"text","text":" "},{"type":"text","text":"최상위 컨테이너 클래스입니다. Clean Architecture의 각 계층(Repository, UseCase, Service)을"},{"type":"text","text":" "},{"type":"text","text":"자동화된 Factory 패턴을 통해 효율적으로 구성하고 관리합니다."}]},{"level":2,"text":"핵심 철학","anchor":"%ED%95%B5%EC%8B%AC-%EC%B2%A0%ED%95%99","type":"heading"},{"level":3,"text":"🏗️ 계층화된 아키텍처 지원","anchor":"%F0%9F%8F%97%EF%B8%8F-%EA%B3%84%EC%B8%B5%ED%99%94%EB%90%9C-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EC%A7%80%EC%9B%90","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Repository 계층","type":"text"}],"type":"strong"},{"text":": 데이터 접근 및 외부 시스템과의 연동","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"UseCase 계층"}]},{"type":"text","text":": 비즈니스 로직과 도메인 규칙 캡슐화"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Service 계층"}]},{"type":"text","text":": 애플리케이션 서비스와 UI 지원"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"자동 의존성 해결","type":"text"}]},{"text":": 계층 간 의존성이 자동으로 주입됨","type":"text"}]}]}],"type":"unorderedList"},{"level":3,"anchor":"%F0%9F%8F%AD-Factory-%EA%B8%B0%EB%B0%98-%EB%AA%A8%EB%93%88%ED%99%94","text":"🏭 Factory 기반 모듈화","type":"heading"},{"items":[{"content":[{"inlineContent":[{"inlineContent":[{"text":"RepositoryModuleFactory","type":"text"}],"type":"strong"},{"type":"text","text":": Repository 의존성 일괄 관리"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"UseCaseModuleFactory"}],"type":"strong"},{"type":"text","text":": UseCase 의존성과 Repository 자동 연동"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"확장 가능성","type":"text"}],"type":"strong"},{"type":"text","text":": 새로운 Factory를 쉽게 추가 가능"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"타입 안전성","type":"text"}]},{"type":"text","text":": 컴파일 타임에 의존성 타입 검증"}]}]}],"type":"unorderedList"},{"level":3,"type":"heading","text":"🔄 생명주기 관리","anchor":"%F0%9F%94%84-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0-%EA%B4%80%EB%A6%AC"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"지연 초기화"}]},{"type":"text","text":": 실제 필요 시점에 모듈들이 생성됨"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"메모리 효율성"}]},{"type":"text","text":": 사용하지 않는 의존성은 생성되지 않음"}]}]}],"type":"unorderedList"},{"text":"아키텍처 다이어그램","type":"heading","level":2,"anchor":"%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8"},{"type":"codeListing","syntax":null,"code":["┌─────────────────────────────────────┐","│           AppDIContainer            │","│                                     │","└─────────────────┬───────────────────┘","                  │","      ┌───────────┼───────────┐","      │           │           │","┌─────▼─────┐ ┌───▼────┐ ┌───▼────────┐","│Repository │ │UseCase │ │   Other    │","│ Factory   │ │Factory │ │ Factories  │","└───────────┘ └────────┘ └────────────┘","      │           │           │","      └───────────┼───────────┘","                  │","┌─────────────────▼───────────────────┐","│        DependencyContainer.live     │","│          (Global Registry)          │","└─────────────────────────────────────┘"]},{"text":"동작 방식","type":"heading","level":2,"anchor":"%EB%8F%99%EC%9E%91-%EB%B0%A9%EC%8B%9D"},{"text":"1단계: Factory 준비","type":"heading","level":3,"anchor":"1%EB%8B%A8%EA%B3%84-Factory-%EC%A4%80%EB%B9%84"},{"code":["\/\/ @Factory 프로퍼티 래퍼를 통한 자동 주입","@Factory(\\.repositoryFactory) ","var repositoryFactory: RepositoryModuleFactory","","@Factory(\\.useCaseFactory)","var useCaseFactory: UseCaseModuleFactory"],"type":"codeListing","syntax":"swift"},{"level":3,"anchor":"2%EB%8B%A8%EA%B3%84-%EB%AA%A8%EB%93%88-%EB%93%B1%EB%A1%9D","text":"2단계: 모듈 등록","type":"heading"},{"code":["await AppDIContainer.shared.registerDefaultDependencies()","\/\/ 내부적으로:","\/\/ 1. Repository Factory에서 모든 Repository 모듈 생성","\/\/ 2. UseCase Factory에서 Repository와 연동된 UseCase 모듈 생성  ","\/\/ 3. 모든 모듈을 병렬로 DependencyContainer.live에 등록"],"syntax":"swift","type":"codeListing"},{"level":3,"anchor":"3%EB%8B%A8%EA%B3%84-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%82%AC%EC%9A%A9","text":"3단계: 의존성 사용","type":"heading"},{"type":"codeListing","syntax":"swift","code":["\/\/ 어디서든 등록된 의존성 사용 가능","let userService = DependencyContainer.live.resolve(UserServiceProtocol.self)"]},{"anchor":"%EC%A7%80%EC%9B%90-%ED%99%98%EA%B2%BD-%EB%B0%8F-%ED%98%B8%ED%99%98%EC%84%B1","level":2,"text":"지원 환경 및 호환성","type":"heading"},{"level":3,"type":"heading","anchor":"Swift-%EB%B2%84%EC%A0%84-%ED%98%B8%ED%99%98%EC%84%B1","text":"Swift 버전 호환성"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Swift 5.9+ & iOS 17.0+"}],"type":"strong"},{"text":": Actor 기반 최적화된 구현","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Swift 5.8 & iOS 16.0+","type":"text"}],"type":"strong"},{"text":": 호환성 모드로 동일한 기능 제공","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"이전 버전"}]},{"type":"text","text":": Fallback 구현으로 핵심 기능 유지"}]}]}]},{"level":3,"anchor":"%EB%8F%99%EC%8B%9C%EC%84%B1-%EC%A7%80%EC%9B%90","text":"동시성 지원","type":"heading"},{"items":[{"content":[{"inlineContent":[{"inlineContent":[{"text":"Swift Concurrency","type":"text"}],"type":"strong"},{"text":": async\/await 패턴 완전 지원","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"GCD 호환","type":"text"}]},{"type":"text","text":": 기존 DispatchQueue 코드와 호환"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Thread Safe"}]},{"type":"text","text":": 모든 작업이 스레드 안전하게 처리"}]}]}],"type":"unorderedList"},{"type":"heading","level":2,"anchor":"Example","text":"Example"},{"level":3,"text":"기본 사용","anchor":"%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9","type":"heading"},{"type":"codeListing","syntax":"swift","code":["@main","struct MyApp {","    static func main() async {","        await AppDIContainer.shared.registerDependencies { container in","            \/\/ Repository 모듈 등록","            container.register(UserRepositoryModule())","","            \/\/ UseCase 모듈 등록","            container.register(UserUseCaseModule())","        }","","        \/\/ 등록된 UseCase 사용","        let useCase: UserUseCaseProtocol = DependencyContainer.live.resolveOrDefault(","            UserUseCaseProtocol.self,","            default: UserUseCase(userRepo: UserRepository())","        )","        #logDebug(\"Loaded user profile: \\(await useCase.loadUserProfile().displayName)\")","    }","}"]},{"level":3,"type":"heading","text":"RepositoryModuleFactory & UseCaseModuleFactory 확장","anchor":"RepositoryModuleFactory--UseCaseModuleFactory-%ED%99%95%EC%9E%A5"},{"code":["extension RepositoryModuleFactory {","    public mutating func registerDefaultDefinitions() {","        let registerModuleCopy = registerModule","        repositoryDefinitions = [","            registerModuleCopy.makeDependency(AuthRepositoryProtocol.self) {","                DefaultAuthRepository()","            }","        ]","    }","}","","extension UseCaseModuleFactory {","    public var useCaseDefinitions: [() -> Module] {","        [","            registerModule.makeUseCaseWithRepository(","                AuthUseCaseProtocol.self,","                repositoryProtocol: AuthRepositoryProtocol.self,","                repositoryFallback: DefaultAuthRepository()","            ) { repo in","                AuthUseCase(repository: repo)","            }","        ]","    }","}"],"type":"codeListing","syntax":"swift"},{"anchor":"ContainerResgister-%EC%82%AC%EC%9A%A9","level":3,"type":"heading","text":"ContainerResgister 사용"},{"code":["extension DependencyContainer {","    var authUseCase: AuthUseCaseProtocol? {","        ContainerResgister(\\.authUseCase).wrappedValue","    }","}","","\/\/ 사용 예시","let authUC: AuthUseCaseProtocol = ContainerResgister(\\.authUseCase).wrappedValue"],"syntax":"swift","type":"codeListing"},{"text":"SwiftUI 기반 앱에서 DI 적용","anchor":"SwiftUI-%EA%B8%B0%EB%B0%98-%EC%95%B1%EC%97%90%EC%84%9C-DI-%EC%A0%81%EC%9A%A9","level":3,"type":"heading"},{"code":["@main","struct TestApp: App {","    @UIApplicationDelegateAdaptor(AppDelegate.self) var appDelegate","","    init() {","        registerDependencies()","    }","","    var body: some Scene {","        WindowGroup {","            let store = Store(initialState: AppReducer.State()) {","                AppReducer()._printChanges()","            }","            AppView(store: store)","        }","    }","","    private func registerDependencies() {","        Task {","            await AppDIContainer.shared.registerDependencies { container in","                var repoFactory = AppDIContainer.shared.repositoryFactory","                repoFactory.registerDefaultDefinitions()","                await repoFactory.makeAllModules().asyncForEach { module in","                    await container.register(module)","                }","","                let useCaseFactory = AppDIContainer.shared.useCaseFactory","                await useCaseFactory.makeAllModules().asyncForEach { module in","                    await container.register(module)","                }","            }","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"anchor":"Discussion","text":"Discussion","type":"heading"},{"items":[{"content":[{"inlineContent":[{"code":"AppDIContainer","type":"codeVoice"},{"text":"는 단일 진입점(single entry point) 역할을 합니다.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"앱 초기화 시점에 모듈을 한꺼번에 등록해두면, 런타임에서 빠르고 안정적으로","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"의존성 객체를 생성·조회할 수 있습니다."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"내부 ","type":"text"},{"isActive":true,"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Container","type":"reference"},{"text":"가 등록된 모든 모듈을 ","type":"text"},{"inlineContent":[{"type":"text","text":"병렬로 실행"}],"type":"strong"},{"text":"하여 성능을 최적화합니다.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory 패턴을 통해 Repository, UseCase, Scope 계층을 체계적으로 관리합니다."}]}]}],"type":"unorderedList"}]}],"references":{"doc://DiContainer/documentation/DiContainer/DependencyContainer":{"navigatorTitle":[{"kind":"identifier","text":"DependencyContainer"}],"type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"DependencyContainer"}],"title":"DependencyContainer","role":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/DependencyContainer","abstract":[{"type":"text","text":"기존 DependencyContainer와의 호환성을 위한 별칭"}],"kind":"symbol","url":"\/documentation\/dicontainer\/dependencycontainer"},"doc://DiContainer/ScA":{"title":"_Concurrency.Actor","identifier":"doc:\/\/DiContainer\/ScA","type":"unresolvable"},"doc://DiContainer/documentation/DiContainer/DI":{"role":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/DI","kind":"symbol","url":"\/documentation\/dicontainer\/di","abstract":[{"type":"text","text":"기존 DI API와의 호환성을 위한 별칭"}],"title":"DI","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DI","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"DI","kind":"identifier"}]},"doc://DiContainer/documentation/DiContainer/AppDIContainer/repositoryFactory":{"role":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/repositoryFactory","kind":"symbol","url":"\/documentation\/dicontainer\/appdicontainer\/repositoryfactory","abstract":[{"text":"Repository 계층에서 사용할 모듈(팩토리) 인스턴스를","type":"text"},{"text":" ","type":"text"},{"text":"KeyPath를 통해 자동으로 주입받습니다.","type":"text"}],"title":"repositoryFactory","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"repositoryFactory"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RepositoryModuleFactory","preciseIdentifier":"s:11DiContainer23RepositoryModuleFactoryV"}],"type":"topic"},"doc://DiContainer/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/DiContainer\/s8SendableP","title":"Swift.Sendable"},"doc://DiContainer/s16SendableMetatypeP":{"identifier":"doc:\/\/DiContainer\/s16SendableMetatypeP","title":"Swift.SendableMetatype","type":"unresolvable"},"doc://DiContainer/documentation/DiContainer/Container":{"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Container","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"기존 Container와의 호환성을 위한 별칭"}],"role":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Container","title":"Container","navigatorTitle":[{"text":"Container","kind":"identifier"}],"url":"\/documentation\/dicontainer\/container"},"doc://DiContainer/documentation/DiContainer/Module":{"type":"topic","abstract":[{"type":"codeVoice","code":"Module"},{"text":"은 DI(의존성 주입)를 위한 ","type":"text"},{"inlineContent":[{"text":"단일 모듈","type":"text"}],"type":"strong"},{"text":"을 나타내는 구조체입니다.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Module"}],"title":"Module","url":"\/documentation\/dicontainer\/module","kind":"symbol","navigatorTitle":[{"text":"Module","kind":"identifier"}],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Module"},"doc://DiContainer/documentation/DiContainer/Factory":{"abstract":[],"title":"Factory","role":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/Factory","url":"\/documentation\/dicontainer\/factory","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Factory"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Factory"}]},"doc://DiContainer/documentation/DiContainer/AppDIContainer":{"navigatorTitle":[{"kind":"identifier","text":"AppDIContainer"}],"type":"topic","fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"AppDIContainer"}],"title":"AppDIContainer","role":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer","abstract":[],"kind":"symbol","url":"\/documentation\/dicontainer\/appdicontainer"},"doc://DiContainer/documentation/DiContainer/UnifiedDI":{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/UnifiedDI","kind":"article","role":"article","url":"\/documentation\/dicontainer\/unifieddi","type":"topic","title":"통합 DI 시스템 - UnifiedDI vs DI","abstract":[{"type":"text","text":"DiContainer 2.0은 두 가지 주요 API 진입점을 제공합니다: "},{"type":"codeVoice","code":"UnifiedDI"},{"type":"text","text":"와 "},{"type":"codeVoice","code":"DI"},{"text":". 각각의 역할과 사용 시나리오를 이해하여 프로젝트에 최적한 선택을 하세요.","type":"text"}]},"doc://DiContainer/tutorials/DiContainer/Tutorial-YourFirstDI":{"type":"topic","identifier":"doc:\/\/DiContainer\/tutorials\/DiContainer\/Tutorial-YourFirstDI","estimatedTime":"15min","role":"project","abstract":[{"type":"text","text":"이 튜토리얼에서는 DiContainer를 사용하여 첫 번째 의존성 주입을 구현해보겠습니다."},{"type":"text","text":" "},{"text":"UserService와 NetworkService를 만들고, Property Wrapper를 통해 주입받는 방법을 배워보겠습니다.","type":"text"}],"title":"첫 번째 의존성 주입 만들기","url":"\/tutorials\/dicontainer\/tutorial-yourfirstdi","kind":"project"},"doc://DiContainer/documentation/DiContainer/RepositoryModuleFactory":{"url":"\/documentation\/dicontainer\/repositorymodulefactory","title":"RepositoryModuleFactory","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RepositoryModuleFactory","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/RepositoryModuleFactory","navigatorTitle":[{"text":"RepositoryModuleFactory","kind":"identifier"}],"type":"topic","abstract":[{"text":"Repository 계층 모듈 팩토리","type":"text"}],"role":"symbol"},"doc://DiContainer/documentation/DiContainer/AppDIContainer/Actor-Implementations":{"title":"Actor Implementations","kind":"article","role":"collectionGroup","url":"\/documentation\/dicontainer\/appdicontainer\/actor-implementations","type":"topic","abstract":[],"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/Actor-Implementations"},"doc://DiContainer/documentation/DiContainer/AppDIContainer/registerDependencies(registerModules:)":{"role":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/registerDependencies(registerModules:)","kind":"symbol","url":"\/documentation\/dicontainer\/appdicontainer\/registerdependencies(registermodules:)","abstract":[{"text":"의존성 모듈들을 등록하고, 등록된 모듈을 병렬 실행하여 빌드합니다.","type":"text"}],"title":"registerDependencies(registerModules:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"registerDependencies","kind":"identifier"},{"text":"(","kind":"text"},{"text":"registerModules","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"Container","preciseIdentifier":"s:11DiContainer0B0a","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"type":"topic"},"doc://DiContainer/documentation/DiContainer/AppDIContainer/useCaseFactory":{"role":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/useCaseFactory","kind":"symbol","url":"\/documentation\/dicontainer\/appdicontainer\/usecasefactory","abstract":[{"type":"text","text":"UseCase 계층에서 사용할 모듈(팩토리) 인스턴스를"},{"type":"text","text":" "},{"text":"KeyPath를 통해 자동으로 주입받습니다.","type":"text"}],"title":"useCaseFactory","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"useCaseFactory"},{"kind":"text","text":": "},{"text":"UseCaseModuleFactory","kind":"typeIdentifier","preciseIdentifier":"s:11DiContainer20UseCaseModuleFactoryV"}],"type":"topic"},"doc://DiContainer/tutorials/DiContainer/Tutorial-MeetDiContainer":{"abstract":[{"type":"text","text":"이 튜토리얼에서는 DiContainer의 모든 핵심 기능을 체계적으로 학습합니다."},{"type":"text","text":" "},{"type":"text","text":"Property Wrapper부터 AppDIContainer까지, 실무에서 바로 사용할 수 있는 완전한 앱을 만들어보겠습니다."}],"title":"DiContainer 완전정복","role":"project","identifier":"doc:\/\/DiContainer\/tutorials\/DiContainer\/Tutorial-MeetDiContainer","estimatedTime":"25min","kind":"project","type":"topic","url":"\/tutorials\/dicontainer\/tutorial-meetdicontainer"},"doc://DiContainer/documentation/DiContainer/UseCaseModuleFactory":{"type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/UseCaseModuleFactory","role":"symbol","abstract":[{"type":"text","text":"UseCase 계층 모듈 팩토리"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UseCaseModuleFactory","kind":"identifier"}],"title":"UseCaseModuleFactory","navigatorTitle":[{"text":"UseCaseModuleFactory","kind":"identifier"}],"url":"\/documentation\/dicontainer\/usecasemodulefactory","kind":"symbol"},"doc://DiContainer/documentation/DiContainer/AppDIContainer/shared":{"identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/shared","abstract":[{"type":"text","text":"앱 전역에서 사용할 수 있는 싱글턴 인스턴스입니다."}],"title":"shared","url":"\/documentation\/dicontainer\/appdicontainer\/shared","kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"shared"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11DiContainer14AppDIContainerC","text":"AppDIContainer"}]},"doc://DiContainer/documentation/DiContainer/AppDIContainer/scopeFactory":{"url":"\/documentation\/dicontainer\/appdicontainer\/scopefactory","title":"scopeFactory","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"scopeFactory"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"ScopeModuleFactory","preciseIdentifier":"s:11DiContainer18ScopeModuleFactoryV"}],"kind":"symbol","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AppDIContainer\/scopeFactory","type":"topic","abstract":[{"text":"DependencyScope 기반 모듈(팩토리) 인스턴스를","type":"text"},{"type":"text","text":" "},{"text":"KeyPath를 통해 자동으로 주입받습니다.","type":"text"}],"role":"symbol"},"doc://DiContainer/documentation/DiContainer/AutoDIOptimizer":{"abstract":[{"type":"text","text":"자동으로 의존성 그래프를 생성하고 성능을 최적화하는 시스템"}],"kind":"article","role":"article","url":"\/documentation\/dicontainer\/autodioptimizer","type":"topic","title":"자동 DI 최적화","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer\/AutoDIOptimizer"},"doc://DiContainer/documentation/DiContainer":{"url":"\/documentation\/dicontainer","role":"collection","type":"topic","identifier":"doc:\/\/DiContainer\/documentation\/DiContainer","abstract":[],"title":"DiContainer","kind":"symbol"}}}