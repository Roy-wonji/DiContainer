{"includedArchiveIdentifiers":["DiContainer"],"interfaceLanguages":{"swift":[{"children":[{"title":"시작하기","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/quickstart","title":"빠른 시작 가이드","type":"article"},{"path":"\/documentation\/dicontainer\/coreapis","title":"코어 API 가이드","type":"article"},{"path":"\/documentation\/dicontainer\/migration-2.0.0","title":"DiContainer 2.0.0 마이그레이션 가이드","type":"article"},{"path":"\/documentation\/dicontainer\/appdiintegration","title":"App DI Integration","type":"article"},{"path":"\/documentation\/dicontainer\/dependencycontainer","title":"DependencyContainer","type":"typealias"},{"title":"핵심 컴포넌트","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/unifieddi","title":"통합 DI 시스템 - UnifiedDI vs DI","type":"article"},{"path":"\/documentation\/dicontainer\/di","title":"DI","type":"typealias"},{"path":"\/documentation\/dicontainer\/dependencycontainer","title":"DependencyContainer","type":"typealias"},{"path":"\/documentation\/dicontainer\/globalunifiedregistry","title":"let GlobalUnifiedRegistry: UnifiedRegistry","type":"var"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/inject\/init()","title":"init()","type":"init"},{"path":"\/documentation\/dicontainer\/inject\/init(_:)-1r50l","title":"init(T.Type)","type":"init"},{"path":"\/documentation\/dicontainer\/inject\/init(_:)-3hsb3","title":"init(KeyPath<DependencyContainer, T?>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/inject\/wrappedvalue-3breu","title":"var wrappedValue: T?","type":"property"},{"path":"\/documentation\/dicontainer\/inject\/wrappedvalue-71szo","title":"var wrappedValue: T","type":"property"}],"path":"\/documentation\/dicontainer\/inject","title":"Inject","type":"struct"},{"path":"\/documentation\/dicontainer\/requiredinject","title":"RequiredInject","type":"typealias"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/factory\/init(_:)","title":"init(KeyPath<DependencyContainer, T?>)","type":"init"},{"path":"\/documentation\/dicontainer\/factory\/init(factory:)","title":"init(factory: () -> T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/factory\/wrappedvalue","title":"var wrappedValue: T","type":"property"}],"path":"\/documentation\/dicontainer\/factory","title":"Factory","type":"struct"},{"path":"\/documentation\/dicontainer\/containerusage","title":"Container Usage","type":"article"},{"path":"\/documentation\/dicontainer\/container","title":"Container","type":"typealias"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/module\/init(_:factory:file:function:line:)","title":"init<T>(T.Type, factory: () -> T, file: StaticString, function: StaticString, line: UInt)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/module\/asadvanced(identifier:dependencies:condition:)","title":"func asAdvanced(identifier: String, dependencies: [String], condition: () -> Bool) -> ConditionalModule","type":"method"},{"path":"\/documentation\/dicontainer\/module\/register()","title":"func register() async","type":"method"},{"path":"\/documentation\/dicontainer\/module\/registerthrowing()","title":"func registerThrowing() async throws","type":"method"}],"path":"\/documentation\/dicontainer\/module","title":"Module","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/appdicontainer\/repositoryfactory","title":"var repositoryFactory: RepositoryModuleFactory","type":"property"},{"path":"\/documentation\/dicontainer\/appdicontainer\/scopefactory","title":"var scopeFactory: ScopeModuleFactory","type":"property"},{"path":"\/documentation\/dicontainer\/appdicontainer\/usecasefactory","title":"var useCaseFactory: UseCaseModuleFactory","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/appdicontainer\/registerdependencies(registermodules:)","title":"func registerDependencies(registerModules: (Container) async -> Void) async","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/appdicontainer\/shared","title":"static let shared: AppDIContainer","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/appdicontainer\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/dicontainer\/appdicontainer\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/dicontainer\/appdicontainer\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/dicontainer\/appdicontainer\/actor-implementations","title":"Actor Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/appdicontainer","title":"AppDIContainer","type":"class"},{"title":"고급 기능","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/autodioptimizer","title":"자동 DI 최적화","type":"article"},{"path":"\/documentation\/dicontainer\/autodioptimizer","title":"자동 DI 최적화","type":"article"},{"path":"\/documentation\/dicontainer\/modulefactory","title":"Module Factory","type":"article"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/repositorymodulefactory\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/repositorymodulefactory\/definitions","title":"var definitions: [() -> Module]","type":"property"},{"path":"\/documentation\/dicontainer\/repositorymodulefactory\/registermodule","title":"let registerModule: RegisterModule","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/repositorymodulefactory\/addrepository(_:factory:)","title":"func addRepository<T>(T.Type, factory: () -> T)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/repositorymodulefactory\/makeallmodules()","title":"func makeAllModules() -> [Module]","type":"method"}],"path":"\/documentation\/dicontainer\/repositorymodulefactory\/modulefactory-implementations","title":"ModuleFactory Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/repositorymodulefactory","title":"RepositoryModuleFactory","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/usecasemodulefactory\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/usecasemodulefactory\/definitions","title":"var definitions: [() -> Module]","type":"property"},{"path":"\/documentation\/dicontainer\/usecasemodulefactory\/registermodule","title":"let registerModule: RegisterModule","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/usecasemodulefactory\/addusecase(_:repositorytype:repositoryfallback:factory:)","title":"func addUseCase<UseCase, Repo>(UseCase.Type, repositoryType: Repo.Type, repositoryFallback: () -> Repo, factory: (Repo) -> UseCase)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/usecasemodulefactory\/makeallmodules()","title":"func makeAllModules() -> [Module]","type":"method"}],"path":"\/documentation\/dicontainer\/usecasemodulefactory\/modulefactory-implementations","title":"ModuleFactory Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/usecasemodulefactory","title":"UseCaseModuleFactory","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/scopemodulefactory\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/scopemodulefactory\/definitions","title":"var definitions: [() -> Module]","type":"property"},{"path":"\/documentation\/dicontainer\/scopemodulefactory\/registermodule","title":"let registerModule: RegisterModule","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/scopemodulefactory\/addscoped(_:factory:)","title":"func addScoped<T>(T.Type, factory: () -> T)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/scopemodulefactory\/makeallmodules()","title":"func makeAllModules() -> [Module]","type":"method"}],"path":"\/documentation\/dicontainer\/scopemodulefactory\/modulefactory-implementations","title":"ModuleFactory Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/scopemodulefactory","title":"ScopeModuleFactory","type":"struct"},{"title":"성능 최적화","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/autodioptimizer","title":"자동 DI 최적화","type":"article"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/valuebox\/init(_:)","title":"init<T>(T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/valuebox\/typename","title":"let typeName: String","type":"property"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/valuebox\/value","title":"let value: any Sendable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/valuebox\/unwrap()","title":"func unwrap<T>() -> T?","type":"method"}],"path":"\/documentation\/dicontainer\/unifiedregistry\/valuebox","title":"UnifiedRegistry.ValueBox","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/getallregisteredtypenames()","title":"func getAllRegisteredTypeNames() -> [String]","type":"method"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/getregistrationstats()","title":"func getRegistrationStats() -> [String : RegistrationInfo]","type":"method"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/isregistered(_:)","title":"func isRegistered<T>(T.Type) -> Bool","type":"method"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/register(_:factory:)","title":"func register<T>(T.Type, factory: () -> T)","type":"method"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/register(keypath:factory:)","title":"func register<T>(keyPath: KeyPath<DependencyContainer, T?>, factory: () -> T)","type":"method"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/registerasync(_:factory:)","title":"func registerAsync<T>(T.Type, factory: () async -> T)","type":"method"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/registerasyncif(_:condition:factory:fallback:)","title":"func registerAsyncIf<T>(T.Type, condition: Bool, factory: () async -> T, fallback: () async -> T)","type":"method"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/registerasyncscoped(_:scope:factory:)","title":"func registerAsyncScoped<T>(T.Type, scope: ScopeKind, factory: () async -> T)","type":"method"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/registerasyncsingleton(_:factory:)","title":"func registerAsyncSingleton<T>(T.Type, factory: () async -> T)","type":"method"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/registerif(_:condition:factory:fallback:)","title":"func registerIf<T>(T.Type, condition: Bool, factory: () -> T, fallback: () -> T)","type":"method"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/registerscoped(_:scope:factory:)","title":"func registerScoped<T>(T.Type, scope: ScopeKind, factory: () -> T)","type":"method"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/release(_:)","title":"func release<T>(T.Type)","type":"method"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/releaseall()","title":"func releaseAll()","type":"method"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/releasescope(kind:id:)","title":"func releaseScope(kind: ScopeKind, id: String) -> Int","type":"method"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/releasescoped(_:kind:id:)","title":"func releaseScoped<T>(T.Type, kind: ScopeKind, id: String) -> Bool","type":"method"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/resolveanyasync(_:)","title":"func resolveAnyAsync(any Any.Type) async -> Any?","type":"method"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/resolveanyasyncbox(_:)","title":"func resolveAnyAsyncBox(any Any.Type) async -> UnifiedRegistry.ValueBox?","type":"method"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/resolveasync(_:)","title":"func resolveAsync<T>(T.Type) async -> T?","type":"method"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/resolveasync(keypath:)","title":"func resolveAsync<T>(keyPath: KeyPath<DependencyContainer, T?>) async -> T?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/asyncfactory","title":"UnifiedRegistry.AsyncFactory","type":"typealias"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/syncfactory","title":"UnifiedRegistry.SyncFactory","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/dicontainer\/unifiedregistry\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/dicontainer\/unifiedregistry\/actor-implementations","title":"Actor Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/unifiedregistry","title":"UnifiedRegistry","type":"class"},{"path":"\/documentation\/dicontainer\/scopes","title":"스코프 가이드 (Screen \/ Session \/ Request)","type":"article"},{"title":"프로퍼티 래퍼 확장","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/propertywrappers","title":"Property Wrapper 가이드","type":"article"},{"path":"\/documentation\/dicontainer\/dependencykeypatterns","title":"DependencyKey Patterns","type":"article"},{"title":"실무 가이드","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/bulkregistrationdsl","title":"Bulk Registration & DSL","type":"article"},{"path":"\/documentation\/dicontainer\/modulefactory","title":"Module Factory","type":"article"},{"path":"\/documentation\/dicontainer\/propertywrappers","title":"Property Wrapper 가이드","type":"article"},{"title":"API 참조","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/unifieddi","title":"통합 DI 시스템 - UnifiedDI vs DI","type":"article"},{"path":"\/documentation\/dicontainer\/unifieddi","title":"통합 DI 시스템 - UnifiedDI vs DI","type":"article"},{"path":"\/documentation\/dicontainer\/unifieddi","title":"통합 DI 시스템 - UnifiedDI vs DI","type":"article"},{"path":"\/documentation\/dicontainer\/unifieddi","title":"통합 DI 시스템 - UnifiedDI vs DI","type":"article"},{"path":"\/documentation\/dicontainer\/unifieddi","title":"통합 DI 시스템 - UnifiedDI vs DI","type":"article"},{"path":"\/documentation\/dicontainer\/unifieddi\/requireresolve(_:)","title":"static func requireResolve<T>(T.Type) -> T","type":"method"},{"path":"\/documentation\/dicontainer\/unifieddi","title":"통합 DI 시스템 - UnifiedDI vs DI","type":"article"},{"path":"\/documentation\/dicontainer\/unifieddi\/resolve(_:default:)","title":"static func resolve<T>(T.Type, default: @autoclosure () -> T) -> T","type":"method"},{"path":"\/documentation\/dicontainer\/unifieddi\/release(_:)","title":"static func release<T>(T.Type)","type":"method"},{"path":"\/documentation\/dicontainer\/unifieddi\/releaseall()","title":"static func releaseAll()","type":"method"},{"path":"\/documentation\/dicontainer\/unifieddi","title":"통합 DI 시스템 - UnifiedDI vs DI","type":"article"},{"path":"\/documentation\/dicontainer\/unifieddi","title":"통합 DI 시스템 - UnifiedDI vs DI","type":"article"},{"title":"Articles","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/bootstraprationale","title":"Bootstrap Rationale","type":"article"},{"path":"\/documentation\/dicontainer\/bootstrapsystem","title":"DiContainer Bootstrap 시스템 - 설계 근거 및 사용법","type":"article"},{"path":"\/documentation\/dicontainer\/documentationstandards","title":"Documentation Standards","type":"article"},{"path":"\/documentation\/dicontainer\/modulesystem","title":"모듈 시스템","type":"article"},{"path":"\/documentation\/dicontainer\/practicalguide","title":"실전 활용 가이드","type":"article"},{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/asynctyperegistry\/anysendablebox\/init(_:)","title":"init(Any)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/asynctyperegistry\/anysendablebox\/value","title":"let value: Any","type":"property"}],"path":"\/documentation\/dicontainer\/asynctyperegistry\/anysendablebox","title":"AsyncTypeRegistry.AnySendableBox","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/asynctyperegistry\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/asynctyperegistry\/clearall()","title":"func clearAll()","type":"method"},{"path":"\/documentation\/dicontainer\/asynctyperegistry\/register(_:factory:)","title":"func register<T>(T.Type, factory: () async -> T)","type":"method"},{"path":"\/documentation\/dicontainer\/asynctyperegistry\/release(_:)","title":"func release<T>(T.Type)","type":"method"},{"path":"\/documentation\/dicontainer\/asynctyperegistry\/resolvebox(_:)","title":"func resolveBox<T>(T.Type) async -> AsyncTypeRegistry.AnySendableBox?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/asynctyperegistry\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/dicontainer\/asynctyperegistry\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/dicontainer\/asynctyperegistry\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/dicontainer\/asynctyperegistry\/actor-implementations","title":"Actor Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/asynctyperegistry","title":"AsyncTypeRegistry","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/automonitor\/getdependencies()","title":"func getDependencies() -> [(from: String, to: String)]","type":"method"},{"path":"\/documentation\/dicontainer\/automonitor\/getmodulestates()","title":"func getModuleStates() -> [String : String]","type":"method"},{"path":"\/documentation\/dicontainer\/automonitor\/getmodules()","title":"func getModules() -> [String]","type":"method"},{"path":"\/documentation\/dicontainer\/automonitor\/getsummary()","title":"func getSummary() -> String","type":"method"},{"path":"\/documentation\/dicontainer\/automonitor\/ondependencyadded(from:to:)","title":"func onDependencyAdded<From, To>(from: From.Type, to: To.Type)","type":"method"},{"path":"\/documentation\/dicontainer\/automonitor\/onmoduleregistered(_:)","title":"func onModuleRegistered<T>(T.Type)","type":"method"},{"path":"\/documentation\/dicontainer\/automonitor\/reset()","title":"func reset()","type":"method"},{"path":"\/documentation\/dicontainer\/automonitor\/showall()","title":"func showAll()","type":"method"},{"path":"\/documentation\/dicontainer\/automonitor\/showdependenciesfor(module:)","title":"func showDependenciesFor(module: String) -> [String]","type":"method"},{"path":"\/documentation\/dicontainer\/automonitor\/updatemodulestate(_:state:)","title":"func updateModuleState(String, state: String)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/automonitor\/shared","title":"static let shared: AutoMonitor","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/automonitor\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/dicontainer\/automonitor\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/dicontainer\/automonitor\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/dicontainer\/automonitor\/actor-implementations","title":"Actor Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/automonitor","title":"AutoMonitor","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/autoregistrationregistry\/registeredcount","title":"var registeredCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/autoregistrationregistry\/createinstance(for:)","title":"func createInstance<T>(for: T.Type) -> T?","type":"method"},{"path":"\/documentation\/dicontainer\/autoregistrationregistry\/debugprintregisteredtypes()","title":"func debugPrintRegisteredTypes()","type":"method"},{"path":"\/documentation\/dicontainer\/autoregistrationregistry\/getallregisteredtypenames()","title":"func getAllRegisteredTypeNames() -> [String]","type":"method"},{"path":"\/documentation\/dicontainer\/autoregistrationregistry\/isregistered(_:)","title":"func isRegistered<T>(T.Type) -> Bool","type":"method"},{"path":"\/documentation\/dicontainer\/autoregistrationregistry\/register(_:factory:)","title":"func register<T>(T.Type, factory: () -> T)","type":"method"},{"path":"\/documentation\/dicontainer\/autoregistrationregistry\/resolve(_:)","title":"func resolve<T>(T.Type) -> T?","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/autoregistrationregistry\/shared","title":"static let shared: AutoRegistrationRegistry","type":"property"}],"path":"\/documentation\/dicontainer\/autoregistrationregistry","title":"AutoRegistrationRegistry","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/circulardependencydetector\/analyzedependencychain(_:)-6dvoe","title":"func analyzeDependencyChain<T>(T.Type) -> DependencyChainAnalysis","type":"method"},{"path":"\/documentation\/dicontainer\/circulardependencydetector\/analyzedependencychain(_:)-8y8tr","title":"func analyzeDependencyChain(String) -> DependencyChainAnalysis","type":"method"},{"path":"\/documentation\/dicontainer\/circulardependencydetector\/beginresolution(_:)-4lj9f","title":"func beginResolution(String) throws","type":"method"},{"path":"\/documentation\/dicontainer\/circulardependencydetector\/beginresolution(_:)-6gy3i","title":"func beginResolution<T>(T.Type) throws","type":"method"},{"path":"\/documentation\/dicontainer\/circulardependencydetector\/clearcache()","title":"func clearCache()","type":"method"},{"path":"\/documentation\/dicontainer\/circulardependencydetector\/detectallcirculardependencies()","title":"func detectAllCircularDependencies() -> [CircularDependencyPath]","type":"method"},{"path":"\/documentation\/dicontainer\/circulardependencydetector\/endresolution(_:)-2v1m9","title":"func endResolution(String)","type":"method"},{"path":"\/documentation\/dicontainer\/circulardependencydetector\/endresolution(_:)-ipgh","title":"func endResolution<T>(T.Type)","type":"method"},{"path":"\/documentation\/dicontainer\/circulardependencydetector\/getgraphstatistics()","title":"func getGraphStatistics() -> DependencyGraphStatistics","type":"method"},{"path":"\/documentation\/dicontainer\/circulardependencydetector\/recordautoedgeifenabled(for:)","title":"func recordAutoEdgeIfEnabled(for: any Any.Type)","type":"method"},{"path":"\/documentation\/dicontainer\/circulardependencydetector\/recorddependency(from:to:)-4tpt6","title":"func recordDependency(from: String, to: String)","type":"method"},{"path":"\/documentation\/dicontainer\/circulardependencydetector\/recorddependency(from:to:)-8qwvp","title":"func recordDependency<From, To>(from: From.Type, to: To.Type)","type":"method"},{"path":"\/documentation\/dicontainer\/circulardependencydetector\/removedependency(from:to:)","title":"func removeDependency(from: String, to: String)","type":"method"},{"path":"\/documentation\/dicontainer\/circulardependencydetector\/setautorecordingenabled(_:)","title":"func setAutoRecordingEnabled(Bool)","type":"method"},{"path":"\/documentation\/dicontainer\/circulardependencydetector\/setdetectionenabled(_:)","title":"func setDetectionEnabled(Bool)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/circulardependencydetector\/shared","title":"static let shared: CircularDependencyDetector","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/circulardependencydetector\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/dicontainer\/circulardependencydetector\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/dicontainer\/circulardependencydetector\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/dicontainer\/circulardependencydetector\/actor-implementations","title":"Actor Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/circulardependencydetector","title":"CircularDependencyDetector","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/diactor\/registeredcount","title":"var registeredCount: Int","type":"property"},{"path":"\/documentation\/dicontainer\/diactor\/registeredtypenames","title":"var registeredTypeNames: [String]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/diactor\/printregistrationstatus()","title":"func printRegistrationStatus()","type":"method"},{"path":"\/documentation\/dicontainer\/diactor\/register(_:factory:)","title":"func register<T>(T.Type, factory: () -> T) -> () async -> Void","type":"method"},{"path":"\/documentation\/dicontainer\/diactor\/register(_:instance:)","title":"func register<T>(T.Type, instance: T)","type":"method"},{"path":"\/documentation\/dicontainer\/diactor\/registersharedactor(_:factory:)","title":"func registerSharedActor<T>(T.Type, factory: () -> T) -> () async -> Void","type":"method"},{"path":"\/documentation\/dicontainer\/diactor\/release(_:)","title":"func release<T>(T.Type)","type":"method"},{"path":"\/documentation\/dicontainer\/diactor\/releaseall()","title":"func releaseAll()","type":"method"},{"path":"\/documentation\/dicontainer\/diactor\/resolve(_:)","title":"func resolve<T>(T.Type) async -> T?","type":"method"},{"path":"\/documentation\/dicontainer\/diactor\/resolveresult(_:)","title":"func resolveResult<T>(T.Type) async -> Result<T, DIError>","type":"method"},{"path":"\/documentation\/dicontainer\/diactor\/resolvethrows(_:)","title":"func resolveThrows<T>(T.Type) async throws -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/diactor\/shared","title":"static let shared: DIActor","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/diactor\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/dicontainer\/diactor\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/dicontainer\/diactor\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/dicontainer\/diactor\/actor-implementations","title":"Actor Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/diactor\/sharedunownedexecutor","title":"static var sharedUnownedExecutor: UnownedSerialExecutor","type":"property"}],"path":"\/documentation\/dicontainer\/diactor\/globalactor-implementations","title":"GlobalActor Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/diactor","title":"DIActor","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dicontainer\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dicontainer\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/dicontainer\/dicontainer\/modulecount","title":"var moduleCount: Int","type":"property"},{"path":"\/documentation\/dicontainer\/dicontainer\/modulefactorymanager","title":"var moduleFactoryManager: ModuleFactoryManager?","type":"property"},{"path":"\/documentation\/dicontainer\/dicontainer\/repositoryfactory","title":"var repositoryFactory: RepositoryModuleFactory?","type":"property"},{"path":"\/documentation\/dicontainer\/dicontainer\/scopefactory","title":"var scopeFactory: ScopeModuleFactory?","type":"property"},{"path":"\/documentation\/dicontainer\/dicontainer\/usecasefactory","title":"var useCaseFactory: UseCaseModuleFactory?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dicontainer\/addmodule(_:)","title":"func addModule(Module) -> Self","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/build()","title":"func build() async","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/buildmodules()","title":"func buildModules() async","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/buildmoduleswithmetrics()","title":"func buildModulesWithMetrics() async -> ModuleBuildMetrics","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/callasfunction(_:)","title":"func callAsFunction(() -> Void) -> Self","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/exportdependencygraph(to:format:)","title":"func exportDependencyGraph(to: URL, format: GraphExportFormat) throws","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/getautogeneratedgraph()","title":"func getAutoGeneratedGraph() -> String","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/getdetectedcirculardependencies()","title":"func getDetectedCircularDependencies() -> Set<String>","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/getoptimizedtypes()","title":"func getOptimizedTypes() -> Set<String>","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/getusagestatistics()","title":"func getUsageStatistics() -> [String : Int]","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/isautooptimized(_:)","title":"func isAutoOptimized<T>(T.Type) -> Bool","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/printdependencytree(_:maxdepth:)","title":"func printDependencyTree<T>(T.Type, maxDepth: Int)","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/register(_:)","title":"func register(Module) async","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/register(_:build:)","title":"func register<T>(T.Type, build: () -> T) -> () -> Void","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/register(_:factory:)","title":"func register<T>(T.Type, factory: () -> T) -> T","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/register(_:instance:)","title":"func register<T>(T.Type, instance: T)","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/release(_:)","title":"func release<T>(T.Type)","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/resetautostats()","title":"func resetAutoStats()","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/resolve(_:)","title":"func resolve<T>(T.Type) -> T?","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/resolveordefault(_:default:)","title":"func resolveOrDefault<T>(T.Type, default: @autoclosure () -> T) -> T","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/saferesolvewithcirculardetection(_:)","title":"func safeResolveWithCircularDetection<T>(T.Type) async throws -> T","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/setautooptimization(_:)","title":"func setAutoOptimization(Bool)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dicontainer\/subscript(_:)","title":"subscript<T>(KeyPath<DIContainer, T?>) -> T?","type":"subscript"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dicontainer\/isbootstrapped","title":"static var isBootstrapped: Bool","type":"property"},{"path":"\/documentation\/dicontainer\/dicontainer\/live","title":"static var live: DIContainer","type":"property"},{"path":"\/documentation\/dicontainer\/dicontainer\/shared","title":"static var shared: DIContainer","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dicontainer\/bootstrap(_:)","title":"static func bootstrap((DIContainer) -> Void) async","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/bootstrapasync(_:)","title":"static func bootstrapAsync((DIContainer) async throws -> Void) async -> Bool","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/bootstrapasyncifneeded(_:)","title":"static func bootstrapAsyncIfNeeded((DIContainer) async throws -> Void) async -> Bool","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/bootstrapifneeded(_:)","title":"static func bootstrapIfNeeded((DIContainer) -> Void) async -> Bool","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/bootstrapintask(_:)","title":"static func bootstrapInTask((DIContainer) async throws -> Void)","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/bootstrapmixed(sync:async:)","title":"static func bootstrapMixed(sync: (DIContainer) -> Void, async: (DIContainer) async -> Void) async","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/ensurebootstrapped(file:line:)","title":"static func ensureBootstrapped(file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/resetfortesting()","title":"static func resetForTesting()","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/update(_:)","title":"static func update((DIContainer) -> Void) async","type":"method"},{"path":"\/documentation\/dicontainer\/dicontainer\/updateasync(_:)","title":"static func updateAsync((DIContainer) async -> Void) async","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dicontainer\/objectwillchange","title":"var objectWillChange: ObservableObjectPublisher","type":"property"}],"path":"\/documentation\/dicontainer\/dicontainer\/observableobject-implementations","title":"ObservableObject Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/dicontainer","title":"DIContainer","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dependencygraph\/edge\/init(from:to:label:)","title":"init(from: String, to: String, label: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dependencygraph\/edge\/from","title":"let from: String","type":"property"},{"path":"\/documentation\/dicontainer\/dependencygraph\/edge\/label","title":"let label: String?","type":"property"},{"path":"\/documentation\/dicontainer\/dependencygraph\/edge\/to","title":"let to: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dependencygraph\/edge\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dicontainer\/dependencygraph\/edge\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/dependencygraph\/edge","title":"DependencyGraph.Edge","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dependencygraph\/addedge(from:to:label:)-2bhoz","title":"func addEdge(from: String, to: String, label: String?)","type":"method"},{"path":"\/documentation\/dicontainer\/dependencygraph\/addedge(from:to:label:)-2gh58","title":"func addEdge<From, To>(from: From.Type, to: To.Type, label: String?)","type":"method"},{"path":"\/documentation\/dicontainer\/dependencygraph\/addnode(_:alias:)","title":"func addNode<T>(T.Type, alias: String?)","type":"method"},{"path":"\/documentation\/dicontainer\/dependencygraph\/addnode(named:)","title":"func addNode(named: String)","type":"method"},{"path":"\/documentation\/dicontainer\/dependencygraph\/exportdot()","title":"func exportDOT() -> String","type":"method"},{"path":"\/documentation\/dicontainer\/dependencygraph\/exportmermaid()","title":"func exportMermaid() -> String","type":"method"},{"path":"\/documentation\/dicontainer\/dependencygraph\/snapshot()","title":"func snapshot() -> (nodes: [String], edges: [DependencyGraph.Edge])","type":"method"},{"path":"\/documentation\/dicontainer\/dependencygraph\/writedot(to:)","title":"func writeDOT(to: String) throws","type":"method"},{"path":"\/documentation\/dicontainer\/dependencygraph\/writemermaid(to:)","title":"func writeMermaid(to: String) throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dependencygraph\/shared","title":"static let shared: DependencyGraph","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dependencygraph\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/dicontainer\/dependencygraph\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/dicontainer\/dependencygraph\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/dicontainer\/dependencygraph\/actor-implementations","title":"Actor Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/dependencygraph","title":"DependencyGraph","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/moduleregistry\/registeredmodules","title":"var registeredModules: [String : any AdvancedModule]","type":"property"},{"path":"\/documentation\/dicontainer\/moduleregistry\/registrationstatus","title":"var registrationStatus: [String : ModuleRegistrationStatus]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/moduleregistry\/registermodules(_:)","title":"func registerModules([any AdvancedModule]) async throws","type":"method"},{"path":"\/documentation\/dicontainer\/moduleregistry\/registermodules(builder:)","title":"func registerModules(builder: () -> [any AdvancedModule]) async throws","type":"method"},{"path":"\/documentation\/dicontainer\/moduleregistry\/removeallmodules()","title":"func removeAllModules()","type":"method"},{"path":"\/documentation\/dicontainer\/moduleregistry\/status(for:)","title":"func status(for: String) -> ModuleRegistrationStatus?","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/moduleregistry\/shared","title":"static let shared: ModuleRegistry","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/moduleregistry\/objectwillchange","title":"var objectWillChange: ObservableObjectPublisher","type":"property"}],"path":"\/documentation\/dicontainer\/moduleregistry\/observableobject-implementations","title":"ObservableObject Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/moduleregistry","title":"ModuleRegistry","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/registrationtoken\/cancelledat","title":"var cancelledAt: Date?","type":"property"},{"path":"\/documentation\/dicontainer\/registrationtoken\/isvalid","title":"var isValid: Bool","type":"property"},{"path":"\/documentation\/dicontainer\/registrationtoken\/registeredat","title":"var registeredAt: Date","type":"property"},{"path":"\/documentation\/dicontainer\/registrationtoken\/registeredtypename","title":"var registeredTypeName: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/registrationtoken\/cancel()","title":"func cancel()","type":"method"}],"path":"\/documentation\/dicontainer\/registrationtoken","title":"RegistrationToken","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/scopecontext\/clear(_:)","title":"func clear(ScopeKind)","type":"method"},{"path":"\/documentation\/dicontainer\/scopecontext\/currentid(for:)","title":"func currentID(for: ScopeKind) -> String?","type":"method"},{"path":"\/documentation\/dicontainer\/scopecontext\/setcurrent(_:id:)","title":"func setCurrent(ScopeKind, id: String)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/scopecontext\/shared","title":"static let shared: ScopeContext","type":"property"}],"path":"\/documentation\/dicontainer\/scopecontext","title":"ScopeContext","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/modulestatus\/init(moduleid:state:starttime:errormessage:)","title":"init(moduleId: String, state: SimpleLifecycleManager.ModuleState, startTime: Date?, errorMessage: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/modulestatus\/errormessage","title":"let errorMessage: String?","type":"property"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/modulestatus\/moduleid","title":"let moduleId: String","type":"property"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/modulestatus\/starttime","title":"let startTime: Date?","type":"property"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/modulestatus\/state","title":"let state: SimpleLifecycleManager.ModuleState","type":"property"}],"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/modulestatus","title":"SimpleLifecycleManager.ModuleStatus","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/systemhealth\/init(status:totalmodules:runningmodules:errormodules:uptime:)","title":"init(status: SimpleLifecycleManager.SystemHealth.Status, totalModules: Int, runningModules: Int, errorModules: Int, uptime: TimeInterval)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/systemhealth\/errormodules","title":"let errorModules: Int","type":"property"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/systemhealth\/runningmodules","title":"let runningModules: Int","type":"property"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/systemhealth\/status-swift.property","title":"let status: SimpleLifecycleManager.SystemHealth.Status","type":"property"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/systemhealth\/totalmodules","title":"let totalModules: Int","type":"property"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/systemhealth\/uptime","title":"let uptime: TimeInterval","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/systemhealth\/status-swift.enum\/degraded","title":"case degraded","type":"case"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/systemhealth\/status-swift.enum\/healthy","title":"case healthy","type":"case"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/systemhealth\/status-swift.enum\/unhealthy","title":"case unhealthy","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/systemhealth\/status-swift.enum\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/systemhealth\/status-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/systemhealth\/status-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/systemhealth\/status-swift.enum\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/systemhealth\/status-swift.enum\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/systemhealth\/status-swift.enum\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/systemhealth\/status-swift.enum","title":"SimpleLifecycleManager.SystemHealth.Status","type":"enum"}],"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/systemhealth","title":"SimpleLifecycleManager.SystemHealth","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/getactivemodules()","title":"func getActiveModules() -> [String]","type":"method"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/getallmodulestates()","title":"func getAllModuleStates() -> [String : SimpleLifecycleManager.ModuleStatus]","type":"method"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/geterrormodules()","title":"func getErrorModules() -> [String : String]","type":"method"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/getsystemhealth()","title":"func getSystemHealth() -> SimpleLifecycleManager.SystemHealth","type":"method"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/restartmodule(_:)","title":"func restartModule(String) throws","type":"method"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/startmodule(_:)","title":"func startModule(String) throws","type":"method"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/stopmodule(_:)","title":"func stopModule(String) throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/shared","title":"static let shared: SimpleLifecycleManager","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/modulestate\/error","title":"case error","type":"case"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/modulestate\/running","title":"case running","type":"case"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/modulestate\/stopped","title":"case stopped","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/modulestate\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/modulestate\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/modulestate\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/modulestate\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/modulestate\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/modulestate\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/modulestate","title":"SimpleLifecycleManager.ModuleState","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/dicontainer\/simplelifecyclemanager\/actor-implementations","title":"Actor Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/simplelifecyclemanager","title":"SimpleLifecycleManager","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/advancedmodule\/dependencies","title":"var dependencies: [String]","type":"property"},{"path":"\/documentation\/dicontainer\/advancedmodule\/identifier","title":"var identifier: String","type":"property"},{"path":"\/documentation\/dicontainer\/advancedmodule\/shouldregister","title":"var shouldRegister: () -> Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/advancedmodule\/afterregister()","title":"func afterRegister() async throws","type":"method"},{"path":"\/documentation\/dicontainer\/advancedmodule\/beforeregister()","title":"func beforeRegister() async throws","type":"method"},{"path":"\/documentation\/dicontainer\/advancedmodule\/register()","title":"func register() async throws","type":"method"},{"path":"\/documentation\/dicontainer\/advancedmodule\/validate()","title":"func validate() async throws","type":"method"}],"path":"\/documentation\/dicontainer\/advancedmodule","title":"AdvancedModule","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dependencyscope\/dependencies","title":"Dependencies","type":"associatedtype"},{"path":"\/documentation\/dicontainer\/dependencyscope\/provides","title":"Provides","type":"associatedtype"},{"title":"Type Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/dicontainer\/dependencyscope\/validate()-51mb3","title":"static func validate() -> Bool","type":"method"}],"title":"DependencyScope Implementations","type":"groupMarker"}],"path":"\/documentation\/dicontainer\/dependencyscope\/validate()","title":"static func validate() -> Bool","type":"method"}],"path":"\/documentation\/dicontainer\/dependencyscope","title":"DependencyScope","type":"protocol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/safeinjectable\/safedependencyresolution()","title":"static func safeDependencyResolution() -> SafeResolutionResult<Self>","type":"method"}],"path":"\/documentation\/dicontainer\/safeinjectable","title":"SafeInjectable","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/actoroptimization\/init(suggestion:)","title":"init(suggestion: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/actoroptimization\/suggestion","title":"let suggestion: String","type":"property"}],"path":"\/documentation\/dicontainer\/actoroptimization","title":"ActorOptimization","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/anytypeidentifier\/==(_:_:)","title":"static func == (AnyTypeIdentifier, AnyTypeIdentifier) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/anytypeidentifier\/init(anytype:)","title":"init(anyType: any Any.Type)","type":"init"},{"path":"\/documentation\/dicontainer\/anytypeidentifier\/init(type:)","title":"init<T>(type: T.Type)","type":"init"},{"path":"\/documentation\/dicontainer\/anytypeidentifier\/init(typeidentifier:)","title":"init<T>(typeIdentifier: TypeIdentifier<T>)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/anytypeidentifier\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/anytypeidentifier\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dicontainer\/anytypeidentifier\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/anytypeidentifier","title":"AnyTypeIdentifier","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/batchregistration\/init(_:condition:factory:fallback:)","title":"init<T>(T.Type, condition: Bool, factory: () -> T, fallback: () -> T)","type":"init"},{"path":"\/documentation\/dicontainer\/batchregistration\/init(_:default:)","title":"init<T>(T.Type, default: T)","type":"init"},{"path":"\/documentation\/dicontainer\/batchregistration\/init(_:factory:)","title":"init<T>(T.Type, factory: () -> T)","type":"init"}],"path":"\/documentation\/dicontainer\/batchregistration","title":"BatchRegistration","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/batchregistrationbuilder\/buildarray(_:)","title":"static func buildArray([BatchRegistration]) -> [BatchRegistration]","type":"method"},{"path":"\/documentation\/dicontainer\/batchregistrationbuilder\/buildblock(_:)","title":"static func buildBlock(BatchRegistration...) -> [BatchRegistration]","type":"method"},{"path":"\/documentation\/dicontainer\/batchregistrationbuilder\/buildeither(first:)","title":"static func buildEither(first: BatchRegistration) -> [BatchRegistration]","type":"method"},{"path":"\/documentation\/dicontainer\/batchregistrationbuilder\/buildeither(second:)","title":"static func buildEither(second: BatchRegistration) -> [BatchRegistration]","type":"method"},{"path":"\/documentation\/dicontainer\/batchregistrationbuilder\/buildoptional(_:)","title":"static func buildOptional(BatchRegistration?) -> [BatchRegistration]","type":"method"}],"path":"\/documentation\/dicontainer\/batchregistrationbuilder","title":"BatchRegistrationBuilder","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/bulkregistrationbuilder\/buildblock(_:)","title":"static func buildBlock(BulkRegistrationEntry...) -> [BulkRegistrationEntry]","type":"method"}],"path":"\/documentation\/dicontainer\/bulkregistrationbuilder","title":"BulkRegistrationBuilder","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/bulkregistrationentry\/init(interfacetype:repository:usecase:fallback:)","title":"init<Interface>(interfaceType: Interface.Type, repository: () -> Interface, useCase: (Interface) -> Interface, fallback: () -> Interface)","type":"init"}],"path":"\/documentation\/dicontainer\/bulkregistrationentry","title":"BulkRegistrationEntry","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/circulardependencypath\/init(path:)","title":"init(path: [String])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/circulardependencypath\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/dicontainer\/circulardependencypath\/path","title":"let path: [String]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/circulardependencypath\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dicontainer\/circulardependencypath\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/circulardependencypath","title":"CircularDependencyPath","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/conditionalmodule\/init(identifier:dependencies:condition:module:beforeregister:afterregister:validator:)","title":"init(identifier: String, dependencies: [String], condition: () -> Bool, module: Module, beforeRegister: (() async throws -> Void)?, afterRegister: (() async throws -> Void)?, validator: (() async throws -> Void)?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/conditionalmodule\/dependencies","title":"let dependencies: [String]","type":"property"},{"path":"\/documentation\/dicontainer\/conditionalmodule\/identifier","title":"let identifier: String","type":"property"},{"path":"\/documentation\/dicontainer\/conditionalmodule\/shouldregister","title":"let shouldRegister: () -> Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/conditionalmodule\/afterregister()","title":"func afterRegister() async throws","type":"method"},{"path":"\/documentation\/dicontainer\/conditionalmodule\/beforeregister()","title":"func beforeRegister() async throws","type":"method"},{"path":"\/documentation\/dicontainer\/conditionalmodule\/register()","title":"func register() async throws","type":"method"},{"path":"\/documentation\/dicontainer\/conditionalmodule\/validate()","title":"func validate() async throws","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/conditionalmodule\/debugonly(identifier:dependencies:module:)","title":"static func debugOnly(identifier: String, dependencies: [String], module: Module) -> ConditionalModule","type":"method"},{"path":"\/documentation\/dicontainer\/conditionalmodule\/fromenvironment(identifier:dependencies:envkey:expectedvalue:module:)","title":"static func fromEnvironment(identifier: String, dependencies: [String], envKey: String, expectedValue: String, module: Module) -> ConditionalModule","type":"method"},{"path":"\/documentation\/dicontainer\/conditionalmodule\/fromuserdefault(identifier:dependencies:key:module:)","title":"static func fromUserDefault(identifier: String, dependencies: [String], key: String, module: Module) -> ConditionalModule","type":"method"}],"path":"\/documentation\/dicontainer\/conditionalmodule","title":"ConditionalModule","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/diasyncregistration\/init(_:factory:)-7lrk9","title":"init<T>(KeyPath<DependencyContainer, T?>, factory: () async -> T)","type":"init"},{"path":"\/documentation\/dicontainer\/diasyncregistration\/init(_:factory:)-z2v1","title":"init<T>(T.Type, factory: () async -> T)","type":"init"}],"path":"\/documentation\/dicontainer\/diasyncregistration","title":"DIAsyncRegistration","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/diasyncregistrationbuilder\/buildblock(_:)","title":"static func buildBlock(DIAsyncRegistration...) -> [DIAsyncRegistration]","type":"method"}],"path":"\/documentation\/dicontainer\/diasyncregistrationbuilder","title":"DIAsyncRegistrationBuilder","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dependencychainanalysis\/alldependencies","title":"let allDependencies: [String]","type":"property"},{"path":"\/documentation\/dicontainer\/dependencychainanalysis\/directdependencies","title":"let directDependencies: [String]","type":"property"},{"path":"\/documentation\/dicontainer\/dependencychainanalysis\/hascycles","title":"let hasCycles: Bool","type":"property"},{"path":"\/documentation\/dicontainer\/dependencychainanalysis\/maxdepth","title":"let maxDepth: Int","type":"property"},{"path":"\/documentation\/dicontainer\/dependencychainanalysis\/roottype","title":"let rootType: String","type":"property"},{"path":"\/documentation\/dicontainer\/dependencychainanalysis\/summary","title":"var summary: String","type":"property"}],"path":"\/documentation\/dicontainer\/dependencychainanalysis","title":"DependencyChainAnalysis","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dependencygraphstatistics\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dependencygraphstatistics\/averagecomplexity","title":"var averageComplexity: Double","type":"property"},{"path":"\/documentation\/dicontainer\/dependencygraphstatistics\/averagedependenciespertype","title":"let averageDependenciesPerType: Double","type":"property"},{"path":"\/documentation\/dicontainer\/dependencygraphstatistics\/circulardependencies","title":"var circularDependencies: Int","type":"property"},{"path":"\/documentation\/dicontainer\/dependencygraphstatistics\/detectedcycles","title":"let detectedCycles: Int","type":"property"},{"path":"\/documentation\/dicontainer\/dependencygraphstatistics\/healthscore","title":"var healthScore: Double","type":"property"},{"path":"\/documentation\/dicontainer\/dependencygraphstatistics\/maxdependenciespertype","title":"let maxDependenciesPerType: Int","type":"property"},{"path":"\/documentation\/dicontainer\/dependencygraphstatistics\/summary","title":"var summary: String","type":"property"},{"path":"\/documentation\/dicontainer\/dependencygraphstatistics\/totalconnections","title":"var totalConnections: Int","type":"property"},{"path":"\/documentation\/dicontainer\/dependencygraphstatistics\/totaldependencies","title":"let totalDependencies: Int","type":"property"},{"path":"\/documentation\/dicontainer\/dependencygraphstatistics\/totaltypes","title":"let totalTypes: Int","type":"property"},{"path":"\/documentation\/dicontainer\/dependencygraphstatistics\/typeswithoutdependencies","title":"let typesWithoutDependencies: Int","type":"property"}],"path":"\/documentation\/dicontainer\/dependencygraphstatistics","title":"DependencyGraphStatistics","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dependencyvalidation\/areregistered(_:)","title":"static func areRegistered([any Any.Type]) -> Bool","type":"method"},{"path":"\/documentation\/dicontainer\/dependencyvalidation\/hascirculardependency(_:)","title":"static func hasCircularDependency<T>(T.Type) -> Bool","type":"method"},{"path":"\/documentation\/dicontainer\/dependencyvalidation\/isregistered(_:)","title":"static func isRegistered<T>(T.Type) -> Bool","type":"method"}],"path":"\/documentation\/dicontainer\/dependencyvalidation","title":"DependencyValidation","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/easyscopebuilder\/buildarray(_:)","title":"static func buildArray([[RegisterEasyScopeEntry]]) -> [RegisterEasyScopeEntry]","type":"method"},{"path":"\/documentation\/dicontainer\/easyscopebuilder\/buildblock(_:)","title":"static func buildBlock(RegisterEasyScopeEntry...) -> [RegisterEasyScopeEntry]","type":"method"},{"path":"\/documentation\/dicontainer\/easyscopebuilder\/buildoptional(_:)","title":"static func buildOptional([RegisterEasyScopeEntry]?) -> [RegisterEasyScopeEntry]","type":"method"}],"path":"\/documentation\/dicontainer\/easyscopebuilder","title":"EasyScopeBuilder","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/emptydependencies\/init()","title":"init()","type":"init"}],"path":"\/documentation\/dicontainer\/emptydependencies","title":"EmptyDependencies","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/backgroundcolor","title":"var backgroundColor: String","type":"property"},{"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/direction","title":"var direction: GraphVisualizationOptions.GraphDirection","type":"property"},{"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/edgecolor","title":"var edgeColor: String","type":"property"},{"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/highlightcycles","title":"var highlightCycles: Bool","type":"property"},{"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/maxnodesperlevel","title":"var maxNodesPerLevel: Int","type":"property"},{"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/nodeshape-swift.property","title":"var nodeShape: GraphVisualizationOptions.NodeShape","type":"property"},{"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/showstatistics","title":"var showStatistics: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/default","title":"static let `default`: GraphVisualizationOptions","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/graphdirection\/bottomtotop","title":"case bottomToTop","type":"case"},{"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/graphdirection\/lefttoright","title":"case leftToRight","type":"case"},{"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/graphdirection\/righttoleft","title":"case rightToLeft","type":"case"},{"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/graphdirection\/toptobottom","title":"case topToBottom","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/graphdirection\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/graphdirection\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/graphdirection\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/graphdirection\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/graphdirection\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/graphdirection\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/graphdirection","title":"GraphVisualizationOptions.GraphDirection","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/nodeshape-swift.enum\/box","title":"case box","type":"case"},{"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/nodeshape-swift.enum\/circle","title":"case circle","type":"case"},{"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/nodeshape-swift.enum\/diamond","title":"case diamond","type":"case"},{"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/nodeshape-swift.enum\/ellipse","title":"case ellipse","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/nodeshape-swift.enum\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/nodeshape-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/nodeshape-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/nodeshape-swift.enum\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/nodeshape-swift.enum\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/nodeshape-swift.enum\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/graphvisualizationoptions\/nodeshape-swift.enum","title":"GraphVisualizationOptions.NodeShape","type":"enum"}],"path":"\/documentation\/dicontainer\/graphvisualizationoptions","title":"GraphVisualizationOptions","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/modulebuildmetrics\/duration","title":"let duration: TimeInterval","type":"property"},{"path":"\/documentation\/dicontainer\/modulebuildmetrics\/modulecount","title":"let moduleCount: Int","type":"property"},{"path":"\/documentation\/dicontainer\/modulebuildmetrics\/modulespersecond","title":"let modulesPerSecond: Double","type":"property"},{"path":"\/documentation\/dicontainer\/modulebuildmetrics\/summary","title":"var summary: String","type":"property"}],"path":"\/documentation\/dicontainer\/modulebuildmetrics","title":"ModuleBuildMetrics","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/modulebuilder\/buildarray(_:)","title":"static func buildArray([[any AdvancedModule]]) -> [any AdvancedModule]","type":"method"},{"path":"\/documentation\/dicontainer\/modulebuilder\/buildblock(_:)","title":"static func buildBlock(any AdvancedModule...) -> [any AdvancedModule]","type":"method"},{"path":"\/documentation\/dicontainer\/modulebuilder\/buildeither(first:)","title":"static func buildEither(first: [any AdvancedModule]) -> [any AdvancedModule]","type":"method"},{"path":"\/documentation\/dicontainer\/modulebuilder\/buildeither(second:)","title":"static func buildEither(second: [any AdvancedModule]) -> [any AdvancedModule]","type":"method"},{"path":"\/documentation\/dicontainer\/modulebuilder\/buildoptional(_:)","title":"static func buildOptional([any AdvancedModule]?) -> [any AdvancedModule]","type":"method"}],"path":"\/documentation\/dicontainer\/modulebuilder","title":"ModuleBuilder","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/moduledefinitionbuilder\/buildblock(_:)","title":"static func buildBlock((inout ModuleFactoryManager) -> Void...) -> (inout ModuleFactoryManager) -> Void","type":"method"}],"path":"\/documentation\/dicontainer\/moduledefinitionbuilder","title":"ModuleDefinitionBuilder","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/modulefactorymanager\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/modulefactorymanager\/repositoryfactory","title":"var repositoryFactory: RepositoryModuleFactory","type":"property"},{"path":"\/documentation\/dicontainer\/modulefactorymanager\/scopefactory","title":"var scopeFactory: ScopeModuleFactory","type":"property"},{"path":"\/documentation\/dicontainer\/modulefactorymanager\/usecasefactory","title":"var useCaseFactory: UseCaseModuleFactory","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/modulefactorymanager\/makeallmodules()","title":"func makeAllModules() -> [Module]","type":"method"},{"path":"\/documentation\/dicontainer\/modulefactorymanager\/registerall()","title":"func registerAll() async","type":"method"},{"path":"\/documentation\/dicontainer\/modulefactorymanager\/registerall(to:)","title":"func registerAll(to: Container) async","type":"method"},{"path":"\/documentation\/dicontainer\/modulefactorymanager\/setup(_:)","title":"func setup((inout ModuleFactoryManager) -> Void)","type":"method"}],"path":"\/documentation\/dicontainer\/modulefactorymanager","title":"ModuleFactoryManager","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/modulegroup\/init(identifier:dependencies:condition:modules:parallelregistration:)","title":"init(identifier: String, dependencies: [String], condition: () -> Bool, modules: [any AdvancedModule], parallelRegistration: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/modulegroup\/dependencies","title":"let dependencies: [String]","type":"property"},{"path":"\/documentation\/dicontainer\/modulegroup\/identifier","title":"let identifier: String","type":"property"},{"path":"\/documentation\/dicontainer\/modulegroup\/shouldregister","title":"let shouldRegister: () -> Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/modulegroup\/afterregister()","title":"func afterRegister() async throws","type":"method"},{"path":"\/documentation\/dicontainer\/modulegroup\/beforeregister()","title":"func beforeRegister() async throws","type":"method"},{"path":"\/documentation\/dicontainer\/modulegroup\/register()","title":"func register() async throws","type":"method"},{"path":"\/documentation\/dicontainer\/modulegroup\/validate()","title":"func validate() async throws","type":"method"}],"path":"\/documentation\/dicontainer\/modulegroup","title":"ModuleGroup","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/nodechangetype\/init(change:)","title":"init(change: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/nodechangetype\/change","title":"let change: String","type":"property"}],"path":"\/documentation\/dicontainer\/nodechangetype","title":"NodeChangeType","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/registereasyscopeentry\/init(type:factory:)","title":"init<T>(type: T.Type, factory: () -> T)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/registereasyscopeentry\/createmodule()","title":"func createModule() -> Module","type":"method"}],"path":"\/documentation\/dicontainer\/registereasyscopeentry","title":"RegisterEasyScopeEntry","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/registermodule\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/registermodule\/bulkinterfaces(_:)","title":"func bulkInterfaces(() -> [BulkRegistrationEntry]) -> [() -> Module]","type":"method"},{"path":"\/documentation\/dicontainer\/registermodule\/defaultinstance(for:fallback:)","title":"func defaultInstance<T>(for: T.Type, fallback: @autoclosure () -> T) -> T","type":"method"},{"path":"\/documentation\/dicontainer\/registermodule\/easyscopes(_:)","title":"func easyScopes(() -> [RegisterEasyScopeEntry]) -> [() -> Module]","type":"method"},{"path":"\/documentation\/dicontainer\/registermodule\/interface(_:repository:usecase:fallback:)","title":"func interface<Interface>(Interface.Type, repository: () -> Interface, useCase: (Interface) -> Interface, fallback: () -> Interface) -> [() -> Module]","type":"method"},{"path":"\/documentation\/dicontainer\/registermodule\/makedependency(_:factory:)","title":"func makeDependency<T>(T.Type, factory: () -> T) -> () -> Module","type":"method"},{"path":"\/documentation\/dicontainer\/registermodule\/makedependencyimproved(_:factory:)","title":"func makeDependencyImproved<T, U>(T.Type, factory: () -> U) -> () -> Module","type":"method"},{"path":"\/documentation\/dicontainer\/registermodule\/makemodule(_:factory:)","title":"func makeModule<T>(T.Type, factory: () -> T) -> Module","type":"method"},{"path":"\/documentation\/dicontainer\/registermodule\/maketypesafedependency(_:factory:)","title":"func makeTypeSafeDependency<T>(T.Type, factory: () -> T) -> () -> Module","type":"method"},{"path":"\/documentation\/dicontainer\/registermodule\/makeusecasewithrepository(_:repositoryprotocol:repositoryfallback:factory:)","title":"func makeUseCaseWithRepository<UseCase, Repo>(UseCase.Type, repositoryProtocol: Repo.Type, repositoryFallback: @autoclosure () -> Repo, factory: (Repo) -> UseCase) -> () -> Module","type":"method"},{"path":"\/documentation\/dicontainer\/registermodule\/registerinterfacepattern(_:repositoryfactory:usecasefactory:repositoryfallback:)","title":"func registerInterfacePattern<Interface>(Interface.Type, repositoryFactory: () -> Interface, useCaseFactory: (Interface) -> Interface, repositoryFallback: () -> Interface) -> [() -> Module]","type":"method"},{"path":"\/documentation\/dicontainer\/registermodule\/resolveordefault(for:fallback:)","title":"func resolveOrDefault<T>(for: T.Type, fallback: @autoclosure () -> T) -> T","type":"method"}],"path":"\/documentation\/dicontainer\/registermodule","title":"RegisterModule","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/registrationinfo\/lastregistrationdate","title":"let lastRegistrationDate: Date","type":"property"},{"path":"\/documentation\/dicontainer\/registrationinfo\/registrationcount","title":"let registrationCount: Int","type":"property"},{"path":"\/documentation\/dicontainer\/registrationinfo\/summary","title":"var summary: String","type":"property"},{"path":"\/documentation\/dicontainer\/registrationinfo\/type","title":"let type: RegistrationType","type":"property"}],"path":"\/documentation\/dicontainer\/registrationinfo","title":"RegistrationInfo","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/safeinject\/init()","title":"init()","type":"init"},{"path":"\/documentation\/dicontainer\/safeinject\/init(_:)-9310v","title":"init(KeyPath<DependencyContainer, T?>)","type":"init"},{"path":"\/documentation\/dicontainer\/safeinject\/init(_:)-95i3n","title":"init(T.Type)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/safeinject\/wrappedvalue","title":"var wrappedValue: SafeInjectResult<T>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/safeinject\/getvalue()","title":"func getValue() throws -> T","type":"method"}],"path":"\/documentation\/dicontainer\/safeinject","title":"SafeInject","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/scopeid\/init(kind:id:)","title":"init(kind: ScopeKind, id: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/scopeid\/id","title":"let id: String","type":"property"},{"path":"\/documentation\/dicontainer\/scopeid\/kind","title":"let kind: ScopeKind","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/scopeid\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dicontainer\/scopeid\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/scopeid","title":"ScopeID","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/scopedtypekey\/init(type:scope:)","title":"init(type: AnyTypeIdentifier, scope: ScopeID)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/scopedtypekey\/scope","title":"let scope: ScopeID","type":"property"},{"path":"\/documentation\/dicontainer\/scopedtypekey\/type","title":"let type: AnyTypeIdentifier","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/scopedtypekey\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dicontainer\/scopedtypekey\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/scopedtypekey","title":"ScopedTypeKey","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/typeidentifier\/==(_:_:)","title":"static func == (TypeIdentifier<T>, TypeIdentifier<T>) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/typeidentifier\/init(_:)","title":"init(T.Type)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/typeidentifier\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/typeidentifier\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dicontainer\/typeidentifier\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/typeidentifier","title":"TypeIdentifier","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/typeregistration\/init(_:factory:)","title":"init<T>(T.Type, factory: () -> T)","type":"init"}],"path":"\/documentation\/dicontainer\/typeregistration","title":"TypeRegistration","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/typeregistrationbuilder\/buildblock(_:)","title":"static func buildBlock(TypeRegistration...) -> [TypeRegistration]","type":"method"}],"path":"\/documentation\/dicontainer\/typeregistrationbuilder","title":"TypeRegistrationBuilder","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/typesafetyissue\/init(issue:)","title":"init(issue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/typesafetyissue\/issue","title":"let issue: String","type":"property"}],"path":"\/documentation\/dicontainer\/typesafetyissue","title":"TypeSafetyIssue","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/uncheckedsendablebox\/init(_:)","title":"init(T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/uncheckedsendablebox\/value","title":"let value: T","type":"property"}],"path":"\/documentation\/dicontainer\/uncheckedsendablebox","title":"UncheckedSendableBox","type":"struct"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/register(_:factory:)","title":"func register<T>(T.Type, factory: () -> T) -> RegisterEasyScopeEntry","type":"func"},{"path":"\/documentation\/dicontainer\/registerinterface(_:repository:usecase:fallback:)","title":"func registerInterface<Interface>(Interface.Type, repository: () -> Interface, useCase: (Interface) -> Interface, fallback: () -> Interface) -> [() -> Module]","type":"func"},{"path":"\/documentation\/dicontainer\/setupautoregistration()","title":"func setupAutoRegistration()","type":"func"},{"path":"\/documentation\/dicontainer\/unsafesendable(_:)","title":"func unsafeSendable<T>(T) -> UncheckedSendableBox<T>","type":"func"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/=_(_:_:)","title":"func => <Interface>(Interface.Type, (repository: () -> Interface, useCase: (Interface) -> Interface, fallback: () -> Interface)) -> BulkRegistrationEntry","type":"op"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/injectoptional","title":"InjectOptional","type":"typealias"},{"path":"\/documentation\/dicontainer\/injectrequired","title":"InjectRequired","type":"typealias"},{"path":"\/documentation\/dicontainer\/registermoduleresult","title":"RegisterModuleResult","type":"typealias"},{"path":"\/documentation\/dicontainer\/repositorymodulefactoryprotocol","title":"RepositoryModuleFactoryProtocol","type":"typealias"},{"path":"\/documentation\/dicontainer\/scopemodulefactoryprotocol","title":"ScopeModuleFactoryProtocol","type":"typealias"},{"path":"\/documentation\/dicontainer\/usecasemodulefactoryprotocol","title":"UseCaseModuleFactoryProtocol","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/diactorbridge\/migratetoactor()","title":"static func migrateToActor() async","type":"method"},{"path":"\/documentation\/dicontainer\/diactorbridge\/registersync(_:factory:)","title":"static func registerSync<T>(T.Type, factory: () -> T)","type":"method"},{"path":"\/documentation\/dicontainer\/diactorbridge\/resolvesync(_:)","title":"static func resolveSync<T>(T.Type) -> T?","type":"method"}],"path":"\/documentation\/dicontainer\/diactorbridge","title":"DIActorBridge","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/diactorglobalapi\/register(_:factory:)","title":"static func register<T>(T.Type, factory: () -> T) async -> () async -> Void","type":"method"},{"path":"\/documentation\/dicontainer\/diactorglobalapi\/release(_:)","title":"static func release<T>(T.Type) async","type":"method"},{"path":"\/documentation\/dicontainer\/diactorglobalapi\/releaseall()","title":"static func releaseAll() async","type":"method"},{"path":"\/documentation\/dicontainer\/diactorglobalapi\/resolve(_:)","title":"static func resolve<T>(T.Type) async -> T?","type":"method"},{"path":"\/documentation\/dicontainer\/diactorglobalapi\/resolveresult(_:)","title":"static func resolveResult<T>(T.Type) async -> Result<T, DIError>","type":"method"},{"path":"\/documentation\/dicontainer\/diactorglobalapi\/resolvethrows(_:)","title":"static func resolveThrows<T>(T.Type) async throws -> T","type":"method"}],"path":"\/documentation\/dicontainer\/diactorglobalapi","title":"DIActorGlobalAPI","type":"enum"},{"children":[{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/diadvanced\/autodetection\/disable()","title":"static func disable()","type":"method"},{"path":"\/documentation\/dicontainer\/diadvanced\/autodetection\/enable()","title":"static func enable()","type":"method"}],"path":"\/documentation\/dicontainer\/diadvanced\/autodetection","title":"DIAdvanced.AutoDetection","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/diadvanced\/batch\/registermany(_:)","title":"static func registerMany(() -> [BatchRegistration])","type":"method"}],"path":"\/documentation\/dicontainer\/diadvanced\/batch","title":"DIAdvanced.Batch","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/diadvanced\/performance\/enableoptimization()","title":"static func enableOptimization()","type":"method"},{"path":"\/documentation\/dicontainer\/diadvanced\/performance\/getstats()","title":"static func getStats() async -> [String : Int]","type":"method"},{"path":"\/documentation\/dicontainer\/diadvanced\/performance\/markasfrequentlyused(_:)","title":"static func markAsFrequentlyUsed<T>(T.Type)","type":"method"},{"path":"\/documentation\/dicontainer\/diadvanced\/performance\/resolvewithtracking(_:)","title":"static func resolveWithTracking<T>(T.Type) -> T?","type":"method"}],"path":"\/documentation\/dicontainer\/diadvanced\/performance","title":"DIAdvanced.Performance","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/diadvanced\/scope\/registerasyncscoped(_:scope:factory:)","title":"static func registerAsyncScoped<T>(T.Type, scope: ScopeKind, factory: () async -> T)","type":"method"},{"path":"\/documentation\/dicontainer\/diadvanced\/scope\/registerscoped(_:scope:factory:)","title":"static func registerScoped<T>(T.Type, scope: ScopeKind, factory: () -> T) -> () -> Void","type":"method"},{"path":"\/documentation\/dicontainer\/diadvanced\/scope\/releasescope(_:id:)","title":"static func releaseScope(ScopeKind, id: String) async -> Int","type":"method"},{"path":"\/documentation\/dicontainer\/diadvanced\/scope\/releasescoped(_:kind:id:)","title":"static func releaseScoped<T>(T.Type, kind: ScopeKind, id: String) async -> Bool","type":"method"}],"path":"\/documentation\/dicontainer\/diadvanced\/scope","title":"DIAdvanced.Scope","type":"enum"}],"path":"\/documentation\/dicontainer\/diadvanced","title":"DIAdvanced","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/diasync\/getorcreate(_:factory:)","title":"static func getOrCreate<T>(KeyPath<DependencyContainer, T?>, factory: () async -> T) async -> T","type":"method"},{"path":"\/documentation\/dicontainer\/diasync\/isregistered(_:)-20j2s","title":"static func isRegistered<T>(KeyPath<DependencyContainer, T?>) async -> Bool","type":"method"},{"path":"\/documentation\/dicontainer\/diasync\/isregistered(_:)-mp1c","title":"static func isRegistered<T>(T.Type) async -> Bool","type":"method"},{"path":"\/documentation\/dicontainer\/diasync\/register(_:factory:)-61r55","title":"static func register<T>(KeyPath<DependencyContainer, T?>, factory: () async -> T) async -> T","type":"method"},{"path":"\/documentation\/dicontainer\/diasync\/register(_:factory:)-6ljbz","title":"static func register<T>(T.Type, factory: () async -> T) async","type":"method"},{"path":"\/documentation\/dicontainer\/diasync\/registerif(_:condition:factory:fallback:)-1b3ct","title":"static func registerIf<T>(T.Type, condition: Bool, factory: () async -> T, fallback: () async -> T) async","type":"method"},{"path":"\/documentation\/dicontainer\/diasync\/registerif(_:condition:factory:fallback:)-1ij6c","title":"static func registerIf<T>(KeyPath<DependencyContainer, T?>, condition: Bool, factory: () async -> T, fallback: () async -> T) async -> T","type":"method"},{"path":"\/documentation\/dicontainer\/diasync\/registermany(_:)","title":"static func registerMany(() -> [DIAsyncRegistration]) async","type":"method"},{"path":"\/documentation\/dicontainer\/diasync\/releaseall()","title":"static func releaseAll() async","type":"method"},{"path":"\/documentation\/dicontainer\/diasync\/requireresolve(_:)","title":"static func requireResolve<T>(T.Type) async -> T","type":"method"},{"path":"\/documentation\/dicontainer\/diasync\/resolve(_:)","title":"static func resolve<T>(T.Type) async -> T?","type":"method"},{"path":"\/documentation\/dicontainer\/diasync\/resolve(_:default:)","title":"static func resolve<T>(T.Type, default: @autoclosure () -> T) async -> T","type":"method"}],"path":"\/documentation\/dicontainer\/diasync","title":"DIAsync","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dierror\/circulardependency(_:)","title":"case circularDependency(String)","type":"case"},{"path":"\/documentation\/dicontainer\/dierror\/configurationerror(_:)","title":"case configurationError(String)","type":"case"},{"path":"\/documentation\/dicontainer\/dierror\/containernotbootstrapped(_:)","title":"case containerNotBootstrapped(String)","type":"case"},{"path":"\/documentation\/dicontainer\/dierror\/creationfailed(_:underlying:)-swift.enum.case","title":"case creationFailed(String, underlying: (any Error)?)","type":"case"},{"path":"\/documentation\/dicontainer\/dierror\/dependencynotfound(_:)","title":"case dependencyNotFound(String)","type":"case"},{"path":"\/documentation\/dicontainer\/dierror\/internalerror(_:)","title":"case internalError(String)","type":"case"},{"path":"\/documentation\/dicontainer\/dierror\/registrationfailed(_:)","title":"case registrationFailed(String)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dierror\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/dicontainer\/dierror\/errordescription","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/dicontainer\/dierror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/dicontainer\/dierror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dierror\/circulardependency(_:chain:)","title":"static func circularDependency<T>(T.Type, chain: [String]) -> DIError","type":"method"},{"path":"\/documentation\/dicontainer\/dierror\/creationfailed(_:underlying:)-swift.type.method","title":"static func creationFailed<T>(T.Type, underlying: any Error) -> DIError","type":"method"},{"path":"\/documentation\/dicontainer\/dierror\/dependencynotfound(_:hint:)","title":"static func dependencyNotFound<T>(T.Type, hint: String?) -> DIError","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dierror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/dicontainer\/dierror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dierror\/helpanchor","title":"var helpAnchor: String?","type":"property"}],"path":"\/documentation\/dicontainer\/dierror\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/dierror","title":"DIError","type":"enum"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dependencygraphvisualizer\/generateinteractivehtmlgraph(title:)","title":"func generateInteractiveHTMLGraph(title: String) -> String","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dependencygraphvisualizer\/exportgraph(to:format:title:options:)","title":"static func exportGraph(to: URL, format: GraphExportFormat, title: String, options: GraphVisualizationOptions) throws","type":"method"},{"path":"\/documentation\/dicontainer\/dependencygraphvisualizer\/generateasciigraphasync(maxwidth:)","title":"static func generateASCIIGraphAsync(maxWidth: Int) async -> String","type":"method"},{"path":"\/documentation\/dicontainer\/dependencygraphvisualizer\/generatedotgraphasync(title:options:)","title":"static func generateDOTGraphAsync(title: String, options: GraphVisualizationOptions) async -> String","type":"method"},{"path":"\/documentation\/dicontainer\/dependencygraphvisualizer\/generatedotgraphdeprecated(title:options:)","title":"static func generateDOTGraphDeprecated(title: String, options: GraphVisualizationOptions) async -> String","type":"method"},{"path":"\/documentation\/dicontainer\/dependencygraphvisualizer\/generatedependencytree(_:maxdepth:)-49o23","title":"static func generateDependencyTree<T>(T.Type, maxDepth: Int) -> String","type":"method"},{"path":"\/documentation\/dicontainer\/dependencygraphvisualizer\/generatedependencytree(_:maxdepth:)-4pf9s","title":"static func generateDependencyTree(String, maxDepth: Int) -> String","type":"method"},{"path":"\/documentation\/dicontainer\/dependencygraphvisualizer\/generatejsongraphasync()","title":"static func generateJSONGraphAsync() async throws -> String","type":"method"},{"path":"\/documentation\/dicontainer\/dependencygraphvisualizer\/generatemermaidgraphasync(title:options:)","title":"static func generateMermaidGraphAsync(title: String, options: GraphVisualizationOptions) async -> String","type":"method"}],"path":"\/documentation\/dicontainer\/dependencygraphvisualizer","title":"DependencyGraphVisualizer","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dependencykeymigrationguide\/printmigrationsteps()","title":"static func printMigrationSteps()","type":"method"}],"path":"\/documentation\/dicontainer\/dependencykeymigrationguide","title":"DependencyKeyMigrationGuide","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dependencyvalidationerror\/circulardependency(_:)","title":"case circularDependency(String)","type":"case"},{"path":"\/documentation\/dicontainer\/dependencyvalidationerror\/missingdependency(_:)","title":"case missingDependency(String)","type":"case"},{"path":"\/documentation\/dicontainer\/dependencyvalidationerror\/typemismatch(expected:actual:)","title":"case typeMismatch(expected: String, actual: String)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dependencyvalidationerror\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/dependencyvalidationerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/dicontainer\/dependencyvalidationerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/dependencyvalidationerror","title":"DependencyValidationError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/graphexportformat\/dot","title":"case dot","type":"case"},{"path":"\/documentation\/dicontainer\/graphexportformat\/json","title":"case json","type":"case"},{"path":"\/documentation\/dicontainer\/graphexportformat\/mermaid","title":"case mermaid","type":"case"},{"path":"\/documentation\/dicontainer\/graphexportformat\/text","title":"case text","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/graphexportformat\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dicontainer\/graphexportformat\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/graphexportformat","title":"GraphExportFormat","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/lifecycleerror\/invalidstatetransition(_:)","title":"case invalidStateTransition(String)","type":"case"},{"path":"\/documentation\/dicontainer\/lifecycleerror\/modulenotregistered(_:)","title":"case moduleNotRegistered(String)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/lifecycleerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/dicontainer\/lifecycleerror","title":"LifecycleError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/loglevel\/all","title":"case all","type":"case"},{"path":"\/documentation\/dicontainer\/loglevel\/errors","title":"case errors","type":"case"},{"path":"\/documentation\/dicontainer\/loglevel\/off","title":"case off","type":"case"},{"path":"\/documentation\/dicontainer\/loglevel\/optimization","title":"case optimization","type":"case"},{"path":"\/documentation\/dicontainer\/loglevel\/registration","title":"case registration","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/loglevel\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/loglevel\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dicontainer\/loglevel\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/loglevel\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/loglevel\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/dicontainer\/loglevel\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/loglevel","title":"LogLevel","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/moduleregistrationstatus\/failed(_:)","title":"case failed(any Error)","type":"case"},{"path":"\/documentation\/dicontainer\/moduleregistrationstatus\/registered","title":"case registered","type":"case"},{"path":"\/documentation\/dicontainer\/moduleregistrationstatus\/registering","title":"case registering","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/moduleregistrationstatus\/error","title":"var error: (any Error)?","type":"property"},{"path":"\/documentation\/dicontainer\/moduleregistrationstatus\/isregistered","title":"var isRegistered: Bool","type":"property"}],"path":"\/documentation\/dicontainer\/moduleregistrationstatus","title":"ModuleRegistrationStatus","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/modulesystemerror\/circulardependency(_:)","title":"case circularDependency(String)","type":"case"},{"path":"\/documentation\/dicontainer\/modulesystemerror\/duplicatemodule(_:)","title":"case duplicateModule(String)","type":"case"},{"path":"\/documentation\/dicontainer\/modulesystemerror\/missingdependency(_:_:)","title":"case missingDependency(String, String)","type":"case"},{"path":"\/documentation\/dicontainer\/modulesystemerror\/modulenotfound(_:)","title":"case moduleNotFound(String)","type":"case"},{"path":"\/documentation\/dicontainer\/modulesystemerror\/validationfailed(_:_:)","title":"case validationFailed(String, any Error)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/modulesystemerror\/errordescription","title":"var errorDescription: String?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/modulesystemerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/dicontainer\/modulesystemerror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/modulesystemerror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/dicontainer\/modulesystemerror\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/dicontainer\/modulesystemerror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/dicontainer\/modulesystemerror\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/modulesystemerror","title":"ModuleSystemError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/recoverystrategy\/fallback(_:)","title":"case fallback(() throws -> T)","type":"case"},{"path":"\/documentation\/dicontainer\/recoverystrategy\/ignore","title":"case ignore","type":"case"},{"path":"\/documentation\/dicontainer\/recoverystrategy\/retry(maxattempts:)","title":"case retry(maxAttempts: Int)","type":"case"},{"path":"\/documentation\/dicontainer\/recoverystrategy\/usedefault(_:)","title":"case useDefault(T)","type":"case"}],"path":"\/documentation\/dicontainer\/recoverystrategy","title":"RecoveryStrategy","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/registerandreturn\/extractkeypathname(_:)","title":"static func extractKeyPathName<T>(KeyPath<DependencyContainer, T?>) -> String","type":"method"},{"path":"\/documentation\/dicontainer\/registerandreturn\/isregistered(_:)","title":"static func isRegistered<T>(KeyPath<DependencyContainer, T?>) -> Bool","type":"method"},{"path":"\/documentation\/dicontainer\/registerandreturn\/register(_:factory:file:function:line:)","title":"static func register<T>(KeyPath<DependencyContainer, T?>, factory: () -> T, file: String, function: String, line: Int) -> T","type":"method"},{"path":"\/documentation\/dicontainer\/registerandreturn\/registerasync(_:factory:file:function:line:)","title":"static func registerAsync<T>(KeyPath<DependencyContainer, T?>, factory: () async -> T, file: String, function: String, line: Int) async -> T","type":"method"}],"path":"\/documentation\/dicontainer\/registerandreturn","title":"RegisterAndReturn","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/registermoduleerror\/circulardependency(involved:)","title":"case circularDependency(involved: [String])","type":"case"},{"path":"\/documentation\/dicontainer\/registermoduleerror\/configurationerror(message:)","title":"case configurationError(message: String)","type":"case"},{"path":"\/documentation\/dicontainer\/registermoduleerror\/dependencyresolutionfailure(type:reason:)","title":"case dependencyResolutionFailure(type: String, reason: String?)","type":"case"},{"path":"\/documentation\/dicontainer\/registermoduleerror\/factoryexecutionerror(type:underlyingerror:)","title":"case factoryExecutionError(type: String, underlyingError: any Error)","type":"case"},{"path":"\/documentation\/dicontainer\/registermoduleerror\/typecastfailure(from:to:reason:)","title":"case typeCastFailure(from: String, to: String, reason: String?)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/registermoduleerror\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/dicontainer\/registermoduleerror\/errordescription","title":"var errorDescription: String?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/registermoduleerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/dicontainer\/registermoduleerror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/registermoduleerror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/dicontainer\/registermoduleerror\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/dicontainer\/registermoduleerror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/dicontainer\/registermoduleerror\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/registermoduleerror","title":"RegisterModuleError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/registrationtype\/asyncfactory","title":"case asyncFactory","type":"case"},{"path":"\/documentation\/dicontainer\/registrationtype\/asyncsingleton","title":"case asyncSingleton","type":"case"},{"path":"\/documentation\/dicontainer\/registrationtype\/scopedasyncfactory","title":"case scopedAsyncFactory","type":"case"},{"path":"\/documentation\/dicontainer\/registrationtype\/scopedfactory","title":"case scopedFactory","type":"case"},{"path":"\/documentation\/dicontainer\/registrationtype\/syncfactory","title":"case syncFactory","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/registrationtype\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/registrationtype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dicontainer\/registrationtype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/registrationtype","title":"RegistrationType","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/safedierror\/circulardependency(path:)","title":"case circularDependency(path: [String])","type":"case"},{"path":"\/documentation\/dicontainer\/safedierror\/containernotinitialized","title":"case containerNotInitialized","type":"case"},{"path":"\/documentation\/dicontainer\/safedierror\/dependencynotfound(type:keypath:)","title":"case dependencyNotFound(type: String, keyPath: String?)","type":"case"},{"path":"\/documentation\/dicontainer\/safedierror\/factorynotfound(keypath:)","title":"case factoryNotFound(keyPath: String)","type":"case"},{"path":"\/documentation\/dicontainer\/safedierror\/invalidconfiguration(reason:)","title":"case invalidConfiguration(reason: String)","type":"case"},{"path":"\/documentation\/dicontainer\/safedierror\/requireddependencymissing(type:context:)","title":"case requiredDependencyMissing(type: String, context: String?)","type":"case"},{"path":"\/documentation\/dicontainer\/safedierror\/resolutiontimeout(type:timeout:)","title":"case resolutionTimeout(type: String, timeout: TimeInterval)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/safedierror\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/dicontainer\/safedierror\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/dicontainer\/safedierror\/errordescription","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/dicontainer\/safedierror\/isrecoverable","title":"var isRecoverable: Bool","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/safedierror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/dicontainer\/safedierror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/safedierror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/dicontainer\/safedierror\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/dicontainer\/safedierror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/dicontainer\/safedierror\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/safedierror","title":"SafeDIError","type":"enum"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/safedependencykeypatterns\/asyncpattern","title":"static let asyncPattern: String","type":"property"},{"path":"\/documentation\/dicontainer\/safedependencykeypatterns\/factorypattern","title":"static let factoryPattern: String","type":"property"},{"path":"\/documentation\/dicontainer\/safedependencykeypatterns\/preregistrationpattern","title":"static let preRegistrationPattern: String","type":"property"}],"path":"\/documentation\/dicontainer\/safedependencykeypatterns","title":"SafeDependencyKeyPatterns","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/safedependencyregister\/resolvewithfallback(_:fallback:)","title":"static func resolveWithFallback<T>(KeyPath<DependencyContainer, T?>, fallback: @autoclosure () -> T) -> T","type":"method"},{"path":"\/documentation\/dicontainer\/safedependencyregister\/saferesolve(_:)","title":"static func safeResolve<T>(KeyPath<DependencyContainer, T?>) -> T?","type":"method"},{"path":"\/documentation\/dicontainer\/safedependencyregister\/setupfordependencykeys()","title":"static func setupForDependencyKeys()","type":"method"}],"path":"\/documentation\/dicontainer\/safedependencyregister","title":"SafeDependencyRegister","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/safedependencyresolver\/saferesolve(_:)","title":"static func safeResolve<T>(T.Type) -> SafeResolutionResult<T>","type":"method"},{"path":"\/documentation\/dicontainer\/safedependencyresolver\/saferesolve(_:strategy:)","title":"static func safeResolve<T>(T.Type, strategy: RecoveryStrategy<T>) -> T?","type":"method"}],"path":"\/documentation\/dicontainer\/safedependencyresolver","title":"SafeDependencyResolver","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/safeinjecterror\/dependencynotfound(type:)","title":"case dependencyNotFound(type: String)","type":"case"},{"path":"\/documentation\/dicontainer\/safeinjecterror\/unknown(_:)","title":"case unknown(any Error)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/safeinjecterror\/errordescription","title":"var errorDescription: String?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/safeinjecterror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/dicontainer\/safeinjecterror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/safeinjecterror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/dicontainer\/safeinjecterror\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/dicontainer\/safeinjecterror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/dicontainer\/safeinjecterror\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/safeinjecterror","title":"SafeInjectError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/safeinjectresult\/failure(_:)","title":"case failure(SafeInjectError)","type":"case"},{"path":"\/documentation\/dicontainer\/safeinjectresult\/success(_:)","title":"case success(T)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/safeinjectresult\/value","title":"var value: T?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/safeinjectresult\/get()","title":"func get() throws -> T","type":"method"},{"path":"\/documentation\/dicontainer\/safeinjectresult\/map(_:)","title":"func map<U>((T) throws -> U) rethrows -> SafeInjectResult<U>","type":"method"},{"path":"\/documentation\/dicontainer\/safeinjectresult\/onfailure(_:)","title":"func onFailure((SafeInjectError) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/dicontainer\/safeinjectresult\/onsuccess(_:)","title":"func onSuccess((T) throws -> Void) rethrows","type":"method"}],"path":"\/documentation\/dicontainer\/safeinjectresult","title":"SafeInjectResult","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/saferesolutionresult\/failure(_:)","title":"case failure(SafeDIError)","type":"case"},{"path":"\/documentation\/dicontainer\/saferesolutionresult\/success(_:)","title":"case success(T)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/saferesolutionresult\/error","title":"var error: SafeDIError?","type":"property"},{"path":"\/documentation\/dicontainer\/saferesolutionresult\/value","title":"var value: T?","type":"property"}],"path":"\/documentation\/dicontainer\/saferesolutionresult","title":"SafeResolutionResult","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/scopekind\/request","title":"case request","type":"case"},{"path":"\/documentation\/dicontainer\/scopekind\/screen","title":"case screen","type":"case"},{"path":"\/documentation\/dicontainer\/scopekind\/session","title":"case session","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/scopekind\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/scopekind\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dicontainer\/scopekind\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/scopekind\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/scopekind\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/dicontainer\/scopekind\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/dicontainer\/scopekind","title":"ScopeKind","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/simplekeypathregistry\/extractkeypathname(_:)","title":"static func extractKeyPathName<T>(KeyPath<DependencyContainer, T?>) -> String","type":"method"},{"path":"\/documentation\/dicontainer\/simplekeypathregistry\/isregistered(_:)","title":"static func isRegistered<T>(KeyPath<DependencyContainer, T?>) -> Bool","type":"method"},{"path":"\/documentation\/dicontainer\/simplekeypathregistry\/register(_:factory:file:function:line:)","title":"static func register<T>(KeyPath<DependencyContainer, T?>, factory: () -> T, file: String, function: String, line: Int)","type":"method"},{"path":"\/documentation\/dicontainer\/simplekeypathregistry\/registerif(_:condition:factory:file:function:line:)","title":"static func registerIf<T>(KeyPath<DependencyContainer, T?>, condition: Bool, factory: () -> T, file: String, function: String, line: Int)","type":"method"},{"path":"\/documentation\/dicontainer\/simplekeypathregistry\/registerifdebug(_:factory:file:function:line:)","title":"static func registerIfDebug<T>(KeyPath<DependencyContainer, T?>, factory: () -> T, file: String, function: String, line: Int)","type":"method"},{"path":"\/documentation\/dicontainer\/simplekeypathregistry\/registerifrelease(_:factory:file:function:line:)","title":"static func registerIfRelease<T>(KeyPath<DependencyContainer, T?>, factory: () -> T, file: String, function: String, line: Int)","type":"method"},{"path":"\/documentation\/dicontainer\/simplekeypathregistry\/registerinstance(_:instance:file:function:line:)","title":"static func registerInstance<T>(KeyPath<DependencyContainer, T?>, instance: T, file: String, function: String, line: Int)","type":"method"}],"path":"\/documentation\/dicontainer\/simplekeypathregistry","title":"SimpleKeyPathRegistry","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/simplesafedependencyregister\/resolvewithfallback(_:fallback:)","title":"static func resolveWithFallback<T>(KeyPath<DependencyContainer, T?>, fallback: @autoclosure () -> T) -> T","type":"method"},{"path":"\/documentation\/dicontainer\/simplesafedependencyregister\/saferesolve(_:)","title":"static func safeResolve<T>(KeyPath<DependencyContainer, T?>) -> T?","type":"method"}],"path":"\/documentation\/dicontainer\/simplesafedependencyregister","title":"SimpleSafeDependencyRegister","type":"enum"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/swift\/sequence\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"}],"path":"\/documentation\/dicontainer\/swift\/sequence","title":"Sequence","type":"extension"},{"title":"Extended Enumerations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/swift\/result\/resolved","title":"var resolved: Success?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dicontainer\/swift\/result\/resolvedwithlogging(file:function:line:)","title":"func resolvedWithLogging(file: String, function: String, line: Int) -> Success?","type":"method"}],"path":"\/documentation\/dicontainer\/swift\/result","title":"Result","type":"extension"}],"path":"\/documentation\/dicontainer\/swift","title":"Swift","type":"extension"}],"path":"\/documentation\/dicontainer","title":"DiContainer","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}