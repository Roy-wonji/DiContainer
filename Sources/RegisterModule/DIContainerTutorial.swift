//
//  DIContainerTutorial.swift
//  DiContainer
//
//  Created by Wonji Suh on 3/24/25.
//

import Foundation
import LogMacro

/// # DiContainer ÏÇ¨Ïö© ÌäúÌÜ†Î¶¨Ïñº
/// 
/// Ïù¥ ÌäúÌÜ†Î¶¨ÏñºÏùÄ DiContainer ÎùºÏù¥Î∏åÎü¨Î¶¨Ïùò ÌïµÏã¨ Í∏∞Îä•Îì§ÏùÑ Îã®Í≥ÑÎ≥ÑÎ°ú ÏÑ§Î™ÖÌï©ÎãàÎã§.
/// 
/// ## Î™©Ï∞®
/// 1. [Í∏∞Î≥∏ ÏÇ¨Ïö©Î≤ï](#basic-usage)
/// 2. [Repository/UseCase Ìå®ÌÑ¥](#repository-usecase-pattern)  
/// 3. [ÌïúÎ≤àÏóê Îì±Î°ùÌïòÍ∏∞](#bulk-registration)
/// 4. [ÏûêÎèô Îì±Î°ù ÏãúÏä§ÌÖú](#auto-registration)
/// 5. [Needle Ïä§ÌÉÄÏùº Component](#needle-style)
/// 6. [Í≥†Í∏â ÏÇ¨Ïö©Î≤ï](#advanced-usage)
public enum DIContainerTutorial {
    
    // MARK: - 1. Í∏∞Î≥∏ ÏÇ¨Ïö©Î≤ï
    
    /// ## 1. Í∏∞Î≥∏ ÏÇ¨Ïö©Î≤ï
    /// 
    /// Í∞ÄÏû• Í∏∞Î≥∏Ï†ÅÏù∏ ÏùòÏ°¥ÏÑ± Îì±Î°ùÍ≥º Ï£ºÏûÖ Î∞©Î≤ïÏûÖÎãàÎã§.
    /// 
    /// ### 1-1. Í∞ÑÎã®Ìïú ÏÑúÎπÑÏä§ Îì±Î°ù
    /// ```swift
    /// // ÌîÑÎ°úÌÜ†ÏΩú Ï†ïÏùò
    /// protocol NetworkServiceProtocol {
    ///     func request(_ url: String) async -> Data
    /// }
    /// 
    /// // Íµ¨ÌòÑÏ≤¥
    /// struct DefaultNetworkService: NetworkServiceProtocol {
    ///     func request(_ url: String) async -> Data {
    ///         // ÎÑ§Ìä∏ÏõåÌÅ¨ ÏöîÏ≤≠ Íµ¨ÌòÑ
    ///         return Data()
    ///     }
    /// }
    /// 
    /// // Îì±Î°ù
    /// let registerModule = RegisterModule()
    /// let networkModule = registerModule.makeModule(NetworkServiceProtocol.self) {
    ///     DefaultNetworkService()
    /// }
    /// 
    /// await container.register(networkModule)
    /// ```
    /// 
    /// ### 1-2. DependencyContainer ÏÇ¨Ïö©
    /// ```swift
    /// // ÏùòÏ°¥ÏÑ± ÌÇ§ Ï†ïÏùò
    /// extension DependencyContainer {
    ///     var networkService: NetworkServiceProtocol? {
    ///         resolve(NetworkServiceProtocol.self)
    ///     }
    /// }
    /// 
    /// // ÏÇ¨Ïö©
    /// @ContainerRegister(\.networkService, defaultFactory: { DefaultNetworkService() })
    /// private var networkService: NetworkServiceProtocol
    /// ```
    public static let basicUsage = """
    Í∏∞Î≥∏ ÏÇ¨Ïö©Î≤ï ÏòàÏ†úÎäî ÏúÑÏùò Ï£ºÏÑùÏùÑ Ï∞∏Ï°∞ÌïòÏÑ∏Ïöî.
    """
    
    // MARK: - 2. Repository/UseCase Ìå®ÌÑ¥
    
    /// ## 2. Repository/UseCase Ìå®ÌÑ¥
    /// 
    /// Clean ArchitectureÏùò RepositoryÏôÄ UseCase Ìå®ÌÑ¥ÏùÑ ÏâΩÍ≤å Íµ¨ÌòÑÌï† Ïàò ÏûàÏäµÎãàÎã§.
    /// 
    /// ### 2-1. Í∏∞Ï°¥ Î∞©Ïãù (Í∞úÎ≥Ñ Îì±Î°ù)
    /// ```swift
    /// // Repository Îì±Î°ù
    /// var authRepositoryModule: () -> Module {
    ///     registerModule.makeDependency(AuthInterface.self) {
    ///         AuthRepositoryImpl()
    ///     }
    /// }
    /// 
    /// // UseCase Îì±Î°ù (Repository ÏûêÎèô Ï£ºÏûÖ)
    /// var authUseCaseModule: () -> Module {
    ///     registerModule.makeUseCaseWithRepository(
    ///         AuthInterface.self,
    ///         repositoryProtocol: AuthInterface.self,
    ///         repositoryFallback: DefaultAuthRepositoryImpl(),
    ///         factory: { repo in AuthUseCaseImpl(repository: repo) }
    ///     )
    /// }
    /// ```
    /// 
    /// ### 2-2. ÏÉàÎ°úÏö¥ Î∞©Ïãù (ÌïúÎ≤àÏóê Îì±Î°ù)
    /// ```swift
    /// // ÌïúÎ≤àÏóê Repository + UseCase Îì±Î°ù
    /// let authModules = registerModule.authInterface(
    ///     AuthInterface.self,
    ///     repository: { AuthRepositoryImpl() },
    ///     useCase: { repo in AuthUseCaseImpl(repository: repo) },
    ///     fallback: { DefaultAuthRepositoryImpl() }
    /// )
    /// 
    /// // Îì±Î°ù
    /// for moduleFactory in authModules {
    ///     await container.register(moduleFactory())
    /// }
    /// ```
    public static let repositoryUseCasePattern = """
    Repository/UseCase Ìå®ÌÑ¥ ÏòàÏ†úÎäî ÏúÑÏùò Ï£ºÏÑùÏùÑ Ï∞∏Ï°∞ÌïòÏÑ∏Ïöî.
    """
    
    // MARK: - 3. ÌïúÎ≤àÏóê Îì±Î°ùÌïòÍ∏∞
    
    /// ## 3. ÌïúÎ≤àÏóê Îì±Î°ùÌïòÍ∏∞ (Bulk Registration)
    /// 
    /// Ïó¨Îü¨ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§Î•º ÌïúÎ≤àÏóê Îì±Î°ùÌï† Ïàò ÏûàÎäî Í∞ïÎ†•Ìïú DSLÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.
    /// 
    /// ### 3-1. Î≤åÌÅ¨ Îì±Î°ù DSL
    /// ```swift
    /// let allModules = registerModule.bulkAuthInterfaces {
    ///     AuthInterface.self => (
    ///         repository: { AuthRepositoryImpl() },
    ///         useCase: { repo in AuthUseCaseImpl(repository: repo) },
    ///         fallback: { DefaultAuthRepositoryImpl() }
    ///     )
    ///     
    ///     UserInterface.self => (
    ///         repository: { UserRepositoryImpl() },
    ///         useCase: { repo in UserUseCaseImpl(repository: repo) },
    ///         fallback: { DefaultUserRepositoryImpl() }
    ///     )
    ///     
    ///     PaymentInterface.self => (
    ///         repository: { PaymentRepositoryImpl() },
    ///         useCase: { repo in PaymentUseCaseImpl(repository: repo) },
    ///         fallback: { DefaultPaymentRepositoryImpl() }
    ///     )
    /// }
    /// 
    /// // Î™®Îì† Î™®Îìà Îì±Î°ù
    /// for moduleFactory in allModules {
    ///     await container.register(moduleFactory())
    /// }
    /// ```
    /// 
    /// ### 3-2. RegisterModule Extension ÌôúÏö©
    /// ```swift
    /// extension RegisterModule {
    ///     var allBusinessModules: [() -> Module] {
    ///         bulkAuthInterfaces {
    ///             AuthInterface.self => (
    ///                 repository: { AuthRepositoryImpl() },
    ///                 useCase: { repo in AuthUseCaseImpl(repository: repo) },
    ///                 fallback: { DefaultAuthRepositoryImpl() }
    ///             )
    ///             UserInterface.self => (
    ///                 repository: { UserRepositoryImpl() },
    ///                 useCase: { repo in UserUseCaseImpl(repository: repo) },
    ///                 fallback: { DefaultUserRepositoryImpl() }
    ///             )
    ///         }
    ///     }
    /// }
    /// 
    /// // ÏÇ¨Ïö©
    /// let businessModules = registerModule.allBusinessModules
    /// for moduleFactory in businessModules {
    ///     await container.register(moduleFactory())
    /// }
    /// ```
    public static let bulkRegistration = """
    Î≤åÌÅ¨ Îì±Î°ù ÏòàÏ†úÎäî ÏúÑÏùò Ï£ºÏÑùÏùÑ Ï∞∏Ï°∞ÌïòÏÑ∏Ïöî.
    """
    
    // MARK: - 4. ÏûêÎèô Îì±Î°ù ÏãúÏä§ÌÖú
    
    /// ## 4. ÏûêÎèô Îì±Î°ù ÏãúÏä§ÌÖú (Auto Registration)
    /// 
    /// ContainerRegisterÏóêÏÑú defaultFactoryÎ•º ÏÉùÎûµÌï† Ïàò ÏûàÎäî ÏûêÎèô Îì±Î°ù ÏãúÏä§ÌÖúÏûÖÎãàÎã§.
    /// 
    /// ### 4-1. ÌÉÄÏûÖ Îß§Ìïë Îì±Î°ù
    /// ```swift
    /// // Ïï± ÏãúÏûë Ïãú ÌïúÎ≤àÎßå ÏÑ§Ï†ï
    /// func setupAutoRegistration() {
    ///     AutoRegistrationRegistry.shared.registerTypes {
    ///         TypeRegistration(AuthInterface.self) {
    ///             AuthRepositoryImpl()
    ///         }
    ///         TypeRegistration(UserInterface.self) {
    ///             UserRepositoryImpl()
    ///         }
    ///         TypeRegistration(PaymentInterface.self) {
    ///             PaymentRepositoryImpl()
    ///         }
    ///     }
    /// }
    /// ```
    /// 
    /// ### 4-2. Í∞ÑÌé∏Ìïú ÏÇ¨Ïö©
    /// ```swift
    /// // ‚úÖ Í∏∞Ï°¥: Î≥µÏû°Ìïú Î∞©Ïãù
    /// // @ContainerRegister(\.authInterface, defaultFactory: { AuthRepositoryImpl() })
    /// // private var authService: AuthInterface
    /// 
    /// // üõ°Ô∏è ÏÉàÎ°úÏö¥: ÏïàÏ†ÑÌïú Î∞©Ïãù (ÌÅ¨ÎûòÏãú Î∞©ÏßÄ)
    /// @ContainerInject(\.authInterface)
    /// private var authService: AuthInterface?
    /// 
    /// @ContainerInject(\.userInterface)
    /// private var userService: UserInterface?
    /// 
    /// @ContainerInject(\.paymentInterface)
    /// private var paymentService: PaymentInterface?
    /// ```
    /// 
    /// ### 4-3. Ïã§Ï†ú ÏÇ¨Ïö© ÏòàÏãú
    /// ```swift
    /// class BookListViewController {
    ///     // ÏïàÏ†ÑÌïòÍ≤å AuthRepositoryImplÏù¥ Ï£ºÏûÖÎê®
    ///     @ContainerInject(\.authInterface)
    ///     private var authService: AuthInterface?
    ///     
    ///     func login() async {
    ///         guard let authService = authService else {
    ///             print("‚ö†Ô∏è AuthInterface not registered")
    ///             return
    ///         }
    ///         do {
    ///             await authService.login(email: "user@example.com", password: "password")
    ///             // Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ Ï≤òÎ¶¨
    ///         } catch {
    ///             // ÏóêÎü¨ Ï≤òÎ¶¨
    ///         }
    ///     }
    /// }
    /// ```
    public static let autoRegistration = """
    ÏûêÎèô Îì±Î°ù ÏãúÏä§ÌÖú ÏòàÏ†úÎäî ÏúÑÏùò Ï£ºÏÑùÏùÑ Ï∞∏Ï°∞ÌïòÏÑ∏Ïöî.
    """
    
    // MARK: - 5. Needle Ïä§ÌÉÄÏùº Component
    
    /// ## 5. Needle Ïä§ÌÉÄÏùº Component Ìå®ÌÑ¥
    /// 
    /// UberÏùò Needle DI ÌîÑÎ†àÏûÑÏõåÌÅ¨ÏóêÏÑú ÏòÅÍ∞êÏùÑ Î∞õÏùÄ Ïª¥ÌååÏùº ÌÉÄÏûÑ ÏïàÏ†ÑÌïú ÏùòÏ°¥ÏÑ± Í¥ÄÎ¶¨ÏûÖÎãàÎã§.
    /// 
    /// ### 5-1. ComponentÏôÄ Dependency Ï†ïÏùò
    /// ```swift
    /// // ÏùòÏ°¥ÏÑ± Ï†ïÏùò
    /// protocol NetworkDependency: Dependency {
    ///     // Ïù¥ Ïª¥Ìè¨ÎÑåÌä∏Îäî Ïô∏Î∂Ä ÏùòÏ°¥ÏÑ± ÏóÜÏùå
    /// }
    /// 
    /// protocol UserDependency: Dependency {
    ///     var networkService: NetworkServiceProtocol { get }
    ///     var logger: LoggerProtocol { get }
    /// }
    /// 
    /// // Root Ïª¥Ìè¨ÎÑåÌä∏
    /// class AppRootComponent: RootComponent {
    ///     var networkService: NetworkServiceProtocol {
    ///         DefaultNetworkService()
    ///     }
    ///     
    ///     var logger: LoggerProtocol {
    ///         ConsoleLogger()
    ///     }
    ///     
    ///     override func makeAllModules() -> [Module] {
    ///         return [
    ///             registerModule.makeModule(NetworkServiceProtocol.self) { 
    ///                 self.networkService 
    ///             },
    ///             registerModule.makeModule(LoggerProtocol.self) { 
    ///                 self.logger 
    ///             }
    ///         ]
    ///     }
    /// }
    /// 
    /// // Child Ïª¥Ìè¨ÎÑåÌä∏  
    /// class UserComponent: Component<UserDependency> {
    ///     var userService: UserServiceProtocol {
    ///         UserServiceImpl(
    ///             networkService: dependency.networkService,
    ///             logger: dependency.logger
    ///         )
    ///     }
    ///     
    ///     override func makeAllModules() -> [Module] {
    ///         return [
    ///             registerModule.makeModule(UserServiceProtocol.self) {
    ///                 self.userService
    ///             }
    ///         ]
    ///     }
    /// }
    /// ```
    /// 
    /// ### 5-2. Ïª¥Ìè¨ÎÑåÌä∏ Îì±Î°ù
    /// ```swift
    /// extension AppDIContainer {
    ///     func registerNeedleStyle() async {
    ///         await registerDependencies { container in
    ///             // Root Ïª¥Ìè¨ÎÑåÌä∏ Îì±Î°ù
    ///             let rootComponent = AppRootComponent()
    ///             await rootComponent.register(in: container)
    ///             
    ///             // User Ïª¥Ìè¨ÎÑåÌä∏ Îì±Î°ù (ÏùòÏ°¥ÏÑ± Ï£ºÏûÖ)
    ///             let userDependency = UserDependencyImpl(
    ///                 networkService: rootComponent.networkService,
    ///                 logger: rootComponent.logger
    ///             )
    ///             let userComponent = UserComponent(dependency: userDependency)
    ///             await userComponent.register(in: container)
    ///         }
    ///     }
    /// }
    /// ```
    public static let needleStyle = """
    Needle Ïä§ÌÉÄÏùº Component ÏòàÏ†úÎäî ÏúÑÏùò Ï£ºÏÑùÏùÑ Ï∞∏Ï°∞ÌïòÏÑ∏Ïöî.
    """
    
    // MARK: - 6. Í≥†Í∏â ÏÇ¨Ïö©Î≤ï
    
    /// ## 6. Í≥†Í∏â ÏÇ¨Ïö©Î≤ï
    /// 
    /// ### 6-1. Ïä§ÏΩîÌîÑ Í∏∞Î∞ò ÏùòÏ°¥ÏÑ± Í¥ÄÎ¶¨
    /// ```swift
    /// // Ïä§ÏΩîÌîÑ Ï†ïÏùò
    /// struct NetworkScope: DependencyScope {
    ///     typealias Dependencies = EmptyDependencies
    ///     typealias Provides = NetworkServiceProtocol
    ///     
    ///     static func validate() -> Bool {
    ///         return true
    ///     }
    /// }
    /// 
    /// struct UserScope: DependencyScope {
    ///     typealias Dependencies = NetworkServiceProtocol
    ///     typealias Provides = UserServiceProtocol
    ///     
    ///     static func validate() -> Bool {
    ///         return DependencyValidation.isRegistered(NetworkServiceProtocol.self)
    ///     }
    /// }
    /// 
    /// // Ïä§ÏΩîÌîÑ Îì±Î°ù
    /// let scopedModules = registerModule.makeScopedDependencies {
    ///     NetworkScope.provides { DefaultNetworkService() }
    ///     UserScope.provides { UserServiceImpl() }
    /// }
    /// ```
    /// 
    /// ### 6-2. Í∞ÑÌé∏Ìïú Ïä§ÏΩîÌîÑ DSL
    /// ```swift
    /// let modules = registerModule.easyScopes {
    ///     register(NetworkServiceProtocol.self) { DefaultNetworkService() }
    ///     register(UserServiceProtocol.self) { UserServiceImpl() }
    ///     register(LoggerProtocol.self) { ConsoleLogger() }
    /// }
    /// ```
    /// 
    /// ### 6-3. Ï°∞Í±¥Î∂Ä Îì±Î°ù
    /// ```swift
    /// let conditionalModule = registerModule.makeUseCaseWithRepositoryOrNil(
    ///     AuthUseCaseProtocol.self,
    ///     repositoryProtocol: AuthRepositoryProtocol.self,
    ///     missing: .skipRegistration { message in
    ///         #logDebug("Skipping AuthUseCase: \(message)")
    ///     }
    /// ) { repo in
    ///     AuthUseCaseImpl(repository: repo)
    /// }
    /// ```
    public static let advancedUsage = """
    Í≥†Í∏â ÏÇ¨Ïö©Î≤ï ÏòàÏ†úÎäî ÏúÑÏùò Ï£ºÏÑùÏùÑ Ï∞∏Ï°∞ÌïòÏÑ∏Ïöî.
    """
    
    // MARK: - 7. ÏôÑÏ†ÑÌïú Ïã§Ï†ú ÏòàÏãú
    
    /// ## 7. ÏôÑÏ†ÑÌïú Ïã§Ï†ú ÏÇ¨Ïö© ÏòàÏãú
    /// 
    /// Ïã§Ï†ú Ïï±ÏóêÏÑú ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎäî ÏôÑÏ†ÑÌïú ÏòàÏãúÏûÖÎãàÎã§.
    /// 
    /// ### 7-1. Ïï± Ï¥àÍ∏∞Ìôî
    /// ```swift
    /// @main
    /// struct MyApp: App {
    ///     init() {
    ///         setupDependencyInjection()
    ///     }
    ///     
    ///     var body: some Scene {
    ///         WindowGroup { ContentView() }
    ///     }
    ///     
    ///     private func setupDependencyInjection() {
    ///         Task {
    ///             // 1. ÏûêÎèô Îì±Î°ù ÏÑ§Ï†ï
    ///             setupAutoRegistration()
    ///             
    ///             // 2. Î≤åÌÅ¨ Îì±Î°ù
    ///             await AppDIContainer.shared.registerBulkModules()
    ///         }
    ///     }
    ///     
    ///     private func setupAutoRegistration() {
    ///         AutoRegistrationRegistry.shared.registerTypes {
    ///             TypeRegistration(AuthInterface.self) { AuthRepositoryImpl() }
    ///             TypeRegistration(UserInterface.self) { UserRepositoryImpl() }
    ///             TypeRegistration(PaymentInterface.self) { PaymentRepositoryImpl() }
    ///         }
    ///     }
    /// }
    /// 
    /// extension AppDIContainer {
    ///     func registerBulkModules() async {
    ///         let registerModule = RegisterModule()
    ///         
    ///         await registerDependencies { container in
    ///             let allModules = registerModule.bulkAuthInterfaces {
    ///                 AuthInterface.self => (
    ///                     repository: { AuthRepositoryImpl() },
    ///                     useCase: { repo in AuthUseCaseImpl(repository: repo) },
    ///                     fallback: { DefaultAuthRepositoryImpl() }
    ///                 )
    ///                 UserInterface.self => (
    ///                     repository: { UserRepositoryImpl() },
    ///                     useCase: { repo in UserUseCaseImpl(repository: repo) },
    ///                     fallback: { DefaultUserRepositoryImpl() }
    ///                 )
    ///             }
    ///             
    ///             for moduleFactory in allModules {
    ///                 await container.register(moduleFactory())
    ///             }
    ///         }
    ///     }
    /// }
    /// ```
    /// 
    /// ### 7-2. ViewControllerÏóêÏÑú ÏÇ¨Ïö©
    /// ```swift
    /// class AuthViewController: UIViewController {
    ///     // ÏïàÏ†ÑÌïú ÏûêÎèô Ï£ºÏûÖ
    ///     @ContainerInject(\.authInterface)
    ///     private var authService: AuthInterface?
    ///     
    ///     @ContainerInject(\.userInterface)
    ///     private var userService: UserInterface?
    ///     
    ///     override func viewDidLoad() {
    ///         super.viewDidLoad()
    ///         setupUI()
    ///     }
    ///     
    ///     @IBAction func loginButtonTapped() {
    ///         Task {
    ///             do {
    ///                 await authService.login(email: emailField.text ?? "", 
    ///                                       password: passwordField.text ?? "")
    ///                 let user = await userService.getCurrentUser()
    ///                 // UI ÏóÖÎç∞Ïù¥Ìä∏
    ///             } catch {
    ///                 // ÏóêÎü¨ Ï≤òÎ¶¨
    ///             }
    ///         }
    ///     }
    /// }
    /// ```
    public static let completeExample = """
    ÏôÑÏ†ÑÌïú Ïã§Ï†ú ÏòàÏãúÎäî ÏúÑÏùò Ï£ºÏÑùÏùÑ Ï∞∏Ï°∞ÌïòÏÑ∏Ïöî.
    """
}

// MARK: - ÌäúÌÜ†Î¶¨Ïñº Ìó¨Ìçº

/// ÌäúÌÜ†Î¶¨ÏñºÏóêÏÑú ÏÇ¨Ïö©Ìï† ÏòàÏãú ÌÉÄÏûÖÎì§
public enum TutorialExampleTypes {
    
    // MARK: - Í∏∞Î≥∏ ÌÉÄÏûÖÎì§
    
    public protocol NetworkServiceProtocol {
        func request(_ url: String) async -> Data
    }
    
    public struct DefaultNetworkService: NetworkServiceProtocol {
        public init() {}
        
        public func request(_ url: String) async -> Data {
            #logDebug("üåê Making request to: \(url)")
            return Data()
        }
    }
    
    public protocol LoggerProtocol {
        func info(_ message: String)
        func error(_ message: String)
    }
    
    public struct ConsoleLogger: LoggerProtocol {
        public init() {}
        
        public func info(_ message: String) {
            #logInfo("‚ÑπÔ∏è \(message)")
        }
        
        public func error(_ message: String) {
            #logError("‚ùå \(message)")
        }
    }
    
    // MARK: - Auth Í¥ÄÎ†® ÌÉÄÏûÖÎì§
    
    public protocol AuthInterface {
        func login(email: String, password: String) async throws
        func logout() async
        func getCurrentUser() async -> User?
    }
    
    public struct AuthRepositoryImpl: AuthInterface {
        public init() {}
        
        public func login(email: String, password: String) async throws {
            #logDebug("üîê AuthRepository: Login for \(email)")
        }
        
        public func logout() async {
            #logDebug("üîê AuthRepository: Logout")
        }
        
        public func getCurrentUser() async -> User? {
            return User(id: "1", name: "Tutorial User")
        }
    }
    
    public struct AuthUseCaseImpl: AuthInterface {
        private let repository: AuthInterface
        
        public init(repository: AuthInterface) {
            self.repository = repository
        }
        
        public func login(email: String, password: String) async throws {
            #logDebug("üéØ AuthUseCase: Processing login for \(email)")
            try await repository.login(email: email, password: password)
        }
        
        public func logout() async {
            #logDebug("üéØ AuthUseCase: Processing logout")
            await repository.logout()
        }
        
        public func getCurrentUser() async -> User? {
            return await repository.getCurrentUser()
        }
    }
    
    public struct DefaultAuthRepositoryImpl: AuthInterface {
        public init() {}
        
        public func login(email: String, password: String) async throws {
            #logDebug("üîí Default AuthRepository: Mock login")
        }
        
        public func logout() async {
            #logDebug("üîí Default AuthRepository: Mock logout")
        }
        
        public func getCurrentUser() async -> User? {
            return User(id: "default", name: "Default User")
        }
    }
    
    // MARK: - User Í¥ÄÎ†® ÌÉÄÏûÖÎì§
    
    public protocol UserInterface {
        func getCurrentUser() async -> User?
        func updateUser(_ user: User) async throws
    }
    
    public struct UserRepositoryImpl: UserInterface {
        public init() {}
        
        public func getCurrentUser() async -> User? {
            return User(id: "1", name: "Repository User")
        }
        
        public func updateUser(_ user: User) async throws {
            #logDebug("üë§ UserRepository: Updating user \(user.name)")
        }
    }
    
    public struct UserUseCaseImpl: UserInterface {
        private let repository: UserInterface
        
        public init(repository: UserInterface) {
            self.repository = repository
        }
        
        public func getCurrentUser() async -> User? {
            return await repository.getCurrentUser()
        }
        
        public func updateUser(_ user: User) async throws {
            try await repository.updateUser(user)
        }
    }
    
    public struct DefaultUserRepositoryImpl: UserInterface {
        public init() {}
        
        public func getCurrentUser() async -> User? {
            return User(id: "default", name: "Default User")
        }
        
        public func updateUser(_ user: User) async throws {
            #logDebug("üë§ Default UserRepository: Mock update")
        }
    }
    
    // MARK: - Í≥µÌÜµ Î™®Îç∏
    
    public struct User {
        public let id: String
        public let name: String
        
        public init(id: String, name: String) {
            self.id = id
            self.name = name
        }
    }
}

// MARK: - DependencyContainer ÌôïÏû• (ÌäúÌÜ†Î¶¨ÏñºÏö©)

public extension DependencyContainer {
    var tutorialAuthInterface: TutorialExampleTypes.AuthInterface? {
        resolve(TutorialExampleTypes.AuthInterface.self)
    }
    
    var tutorialUserInterface: TutorialExampleTypes.UserInterface? {
        resolve(TutorialExampleTypes.UserInterface.self)
    }
}