@Tutorial(time: 15) {
  @Intro(title: "첫 번째 의존성 주입 만들기") {
    이 튜토리얼에서는 WeaveDI를 사용하여 첫 번째 의존성 주입을 구현해보겠습니다.
    UserService와 NetworkService를 만들고, Property Wrapper를 통해 주입받는 방법을 배워보겠습니다.
  }

  @Section(title: "프로젝트 설정") {
    @ContentAndMedia {
      WeaveDI를 프로젝트에 추가하고 기본 설정을 완료합니다.
    }

    @Steps {
      @Step {
        새로운 iOS 프로젝트를 생성합니다.

        Xcode에서 새 프로젝트를 생성하고 "WeaveDIApp"이라고 이름을 지어주세요.
      }

      @Step {
        Package.swift에 WeaveDI 의존성을 추가합니다.

        @Code(name: "Package.swift", file: "Tutorial-YourFirstDI-01-01.swift")
      }

      @Step {
        App.swift 파일에서 WeaveDI를 임포트합니다.

        @Code(name: "App.swift", file: "Tutorial-YourFirstDI-01-02.swift")
      }
    }
  }

  @Section(title: "서비스 레이어 만들기") {
    @ContentAndMedia {
      비즈니스 로직을 담당할 서비스들을 만들어보겠습니다.
    }

    @Steps {
      @Step {
        NetworkService 프로토콜과 구현체를 만듭니다.

        네트워크 통신을 담당하는 서비스를 정의해보겠습니다.

        @Code(name: "NetworkService.swift", file: "Tutorial-YourFirstDI-02-01.swift")
      }

      @Step {
        UserService 프로토콜과 구현체를 만듭니다.

        사용자 데이터를 관리하는 서비스를 만들고, NetworkService에 의존하도록 합니다.

        @Code(name: "UserService.swift", file: "Tutorial-YourFirstDI-02-02.swift")
      }

      @Step {
        User 모델을 정의합니다.

        @Code(name: "User.swift", file: "Tutorial-YourFirstDI-02-03.swift")
      }
    }
  }

  @Section(title: "의존성 등록하기") {
    @ContentAndMedia {
      UnifiedDI를 사용하여 서비스들을 컨테이너에 등록합니다.
    }

    @Steps {
      @Step {
        App.swift에서 의존성들을 등록합니다.

        앱이 시작될 때 모든 서비스를 컨테이너에 등록해야 합니다.

        @Code(name: "App.swift", file: "Tutorial-YourFirstDI-03-01.swift")
      }

      @Step {
        의존성 등록을 별도 파일로 분리합니다.

        더 깔끔한 구조를 위해 DI 설정을 분리해보겠습니다.

        @Code(name: "DIContainer+Setup.swift", file: "Tutorial-YourFirstDI-03-02.swift")
      }
    }
  }

  @Section(title: "뷰에서 의존성 사용하기") {
    @ContentAndMedia {
      Property Wrapper를 사용하여 뷰에서 서비스를 주입받아 사용합니다.
    }

    @Steps {
      @Step {
        ContentView에서 UserService를 주입받습니다.

        Property Wrapper를 통해 의존성을 주입받는 방법을 알아보겠습니다.

        @Code(name: "ContentView.swift", file: "Tutorial-YourFirstDI-04-01.swift")
      }

      @Step {
        사용자 데이터를 로드하고 UI에 표시합니다.

        @Code(name: "ContentView.swift", file: "Tutorial-YourFirstDI-04-02.swift")
      }
    }
  }

  @Section(title: "테스트 작성하기") {
    @ContentAndMedia {
      Mock 객체를 사용하여 유닛 테스트를 작성해보겠습니다.
    }

    @Steps {
      @Step {
        Mock 서비스들을 만듭니다.

        테스트를 위한 Mock 객체들을 정의해보겠습니다.

        @Code(name: "MockServices.swift", file: "Tutorial-YourFirstDI-05-01.swift")
      }

      @Step {
        UserService에 대한 유닛 테스트를 작성합니다.

        @Code(name: "UserServiceTests.swift", file: "Tutorial-YourFirstDI-05-02.swift")
      }

      @Step {
        앱을 실행하여 결과를 확인합니다.

        시뮬레이터에서 앱을 실행하고 모든 것이 제대로 작동하는지 확인해보세요.
        사용자 목록이 화면에 표시되고, 네트워크 로딩 상태가 올바르게 표시되어야 합니다.
      }
    }
  }
}
