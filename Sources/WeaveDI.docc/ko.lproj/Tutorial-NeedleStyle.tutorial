@Tutorial(time: 15) {
    @Intro(title: "Needle 스타일 WeaveDI 사용법") {


        Uber Needle 프레임워크와 유사한 방식으로 WeaveDI를 사용하는 방법을 학습합니다.

        WeaveDI는 Needle의 모든 핵심 장점을 제공하면서도 더 나은 개발자 경험을 제공합니다.

    }

    @Section(title: "Needle vs WeaveDI 비교") {
        @ContentAndMedia {
            Needle과 WeaveDI의 주요 차이점과 WeaveDI의 장점을 알아봅시다.

        }

        @Steps {
            @Step {
                WeaveDI가 Needle보다 우수한 점들을 확인해보세요.

                @Code(name: "Comparison.swift", file: "Tutorial-NeedleStyle-01-01.swift")
            }

            @Step {
                Needle의 복잡한 코드 생성 과정 vs WeaveDI의 간단한 매크로를 비교해보세요.

                @Code(name: "Migration.swift", file: "Tutorial-NeedleStyle-01-02.swift")
            }
        }
    }

    @Section(title: "Needle 수준 성능 활성화") {
        @ContentAndMedia {
            WeaveDI에서 Needle과 동일한 제로 코스트 성능을 활성화하는 방법을 학습합니다.

        }

        @Steps {
            @Step {
                빌드 플래그를 설정하여 정적 팩토리 최적화를 활성화합니다.

                @Code(name: "BuildFlags.swift", file: "Tutorial-NeedleStyle-02-01.swift")
            }

            @Step {
                앱 초기화 시 정적 최적화를 활성화합니다.

                @Code(name: "AppDelegate.swift", file: "Tutorial-NeedleStyle-02-02.swift")
            }

            @Step {
                성능 비교를 확인하고 고성능 해결을 사용합니다.

                @Code(name: "Performance.swift", file: "Tutorial-NeedleStyle-02-03.swift")
            }
        }
    }

    @Section(title: "컴파일타임 의존성 검증") {
        @ContentAndMedia {
            Needle의 핵심 장점인 컴파일타임 안전성을 WeaveDI로 구현하는 방법을 학습합니다.

        }

        @Steps {
            @Step {
                @DependencyGraph 매크로를 사용하여 의존성 그래프를 정의합니다.

                @Code(name: "DependencyGraph.swift", file: "Tutorial-NeedleStyle-03-01.swift")
            }

            @Step {
                순환 의존성을 의도적으로 추가하여 컴파일 에러를 확인합니다.

                @Code(name: "CircularDependency.swift", file: "Tutorial-NeedleStyle-03-02.swift")
            }

            @Step {
                복잡한 의존성 그래프를 검증합니다.

                @Code(name: "ComplexGraph.swift", file: "Tutorial-NeedleStyle-03-03.swift")
            }
        }
    }

    @Section(title: "Needle에서 WeaveDI로 마이그레이션") {
        @ContentAndMedia {
            기존 Needle 코드를 WeaveDI로 점진적으로 마이그레이션하는 방법을 학습합니다.

            @Image(source: Logo.png, alt: "WeaveDI Logo")
        }

        @Steps {
            @Step {
                마이그레이션 가이드를 확인하고 이점을 분석합니다.

                @Code(name: "MigrationGuide.swift", file: "Tutorial-NeedleStyle-04-01.swift")
            }

            @Step {
                Needle Component를 WeaveDI 스타일로 변환합니다.

                @Code(name: "ComponentMigration.swift", file: "Tutorial-NeedleStyle-04-02.swift")
            }

            @Step {
                점진적 마이그레이션을 통해 기존 코드와 새 코드를 함께 사용합니다.

                @Code(name: "GradualMigration.swift", file: "Tutorial-NeedleStyle-04-03.swift")
            }
        }
    }

    @Section(title: "고급 Needle 스타일 패턴") {
        @ContentAndMedia {
            대규모 프로젝트를 위한 고급 Needle 스타일 패턴을 WeaveDI로 구현하는 방법을 학습합니다.

        }

        @Steps {
            @Step {
                계층적 Component 구조를 WeaveDI로 구현합니다.

                @Code(name: "HierarchicalComponents.swift", file: "Tutorial-NeedleStyle-05-01.swift")
            }

            @Step {
                모듈별 의존성 관리를 구현합니다.

                @Code(name: "ModularDI.swift", file: "Tutorial-NeedleStyle-05-02.swift")
            }

            @Step {
                Swift 6 Concurrency와 함께 사용하는 고급 패턴을 구현합니다.

                @Code(name: "ConcurrencyPatterns.swift", file: "Tutorial-NeedleStyle-05-03.swift")
            }
        }
    }

    @Assessments {
        @MultipleChoice {
            WeaveDI가 Needle 대비 가지는 주요 장점은 무엇인가요?

            @Choice(isCorrect: false) {
                더 빠른 런타임 성능

                @Justification(reaction: "아닙니다!") {
                    WeaveDI와 Needle은 동일한 제로 코스트 성능을 제공합니다.
                }
            }

            @Choice(isCorrect: false) {
                더 나은 컴파일타임 안전성

                @Justification(reaction: "아닙니다!") {
                    컴파일타임 안전성은 동등합니다.
                }
            }

            @Choice(isCorrect: true) {
                코드 생성 도구 불필요 + Swift 6 완벽 지원

                @Justification(reaction: "정답입니다!") {
                    WeaveDI는 별도 코드 생성 도구가 필요 없고 Swift 6를 완벽 지원합니다.
                }
            }

            @Choice(isCorrect: false) {
                더 적은 메모리 사용량

                @Justification(reaction: "아닙니다!") {
                    메모리 사용량은 비슷합니다.
                }
            }
        }

        @MultipleChoice {
            WeaveDI에서 Needle 수준 성능을 활성화하려면?

            @Choice(isCorrect: false) {
                특별한 설정이 필요 없다

                @Justification(reaction: "아닙니다!") {
                    USE_STATIC_FACTORY 플래그가 필요합니다.
                }
            }

            @Choice(isCorrect: true) {
                USE_STATIC_FACTORY 빌드 플래그 + enableStaticOptimization() 호출

                @Justification(reaction: "정답입니다!") {
                    빌드 플래그와 런타임 활성화가 모두 필요합니다.
                }
            }

            @Choice(isCorrect: false) {
                별도 라이브러리 설치

                @Justification(reaction: "아닙니다!") {
                    WeaveDI 자체에 포함된 기능입니다.
                }
            }
        }
    }
}
