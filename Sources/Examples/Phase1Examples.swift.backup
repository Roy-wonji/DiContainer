//
//  Phase1Examples.swift
//  DiContainer
//
//  Created by Wonji Suh on 2024.
//  Copyright © 2024 Wonji Suh. All rights reserved.
//

import Foundation
import DiContainer

// MARK: - Phase 1 기능 예제

/// # Phase 1 새 기능 데모
///
/// 이 파일은 Phase 1에서 추가된 두 가지 핵심 기능을 보여줍니다:
/// 1. @AutoRegister 매크로 - 자동 의존성 등록
/// 2. Parent-Child Container - 계층적 의존성 관리

// MARK: - 1. AutoRegister 매크로 예제

/// ## 🎯 @AutoRegister 매크로 사용법

// 기존 방식 (여전히 동작)
protocol UserRepository: Sendable {
    func getUser(id: String) async -> String
}

// 새로운 방식: @AutoRegister 매크로 (매크로는 향후 활성화 예정)
// @AutoRegister  // ← 이 한 줄로 자동 등록!
final class UserRepositoryImpl: UserRepository {
    func getUser(id: String) async -> String {
        return "User-\(id)"
    }

    // 매크로가 자동으로 다음 코드를 생성:
    // private static let __autoRegister_UserRepository_UserRepositoryImpl = {
    //     return UnifiedDI.register(UserRepository.self) { UserRepositoryImpl() }
    // }()
    // private static let __autoRegister_UserRepositoryImpl_UserRepositoryImpl = {
    //     return UnifiedDI.register(UserRepositoryImpl.self) { UserRepositoryImpl() }
    // }()
}

// @AutoRegister(lifetime: .singleton)
class UserService: Sendable {
    func greetUser(id: String) async -> String {
        // 부모에서 UserRepository 자동 해결
        let repo: UserRepository? = UnifiedDI.resolve(UserRepository.self)
        let username = await repo?.getUser(id: id) ?? "Unknown"
        return "Hello, \(username)!"
    }
}

// MARK: - 2. Parent-Child Container 예제

/// ## 🏗️ Parent-Child Container 사용법

class Phase1Demo {

    /// ### 기본 Parent-Child 사용법
    func basicParentChildExample() async {
        print("\n🏗️ Parent-Child Container 기본 예제")

        // 1. 앱 레벨 루트 컨테이너 생성
        let appContainer = DIContainer()

        // 2. 공통 서비스들을 루트에 등록
        let database = appContainer.register(DatabaseService.self) {
            DatabaseServiceImpl()
        }

        let logger = appContainer.register(Logger.self) {
            ConsoleLogger()
        }

        print("✅ 루트 컨테이너에 공통 서비스 등록 완료")

        // 3. Feature별 Child Container 생성
        let userFeatureContainer = appContainer.createChild()
        let orderFeatureContainer = appContainer.createChild()

        // 4. 각 Feature에 특화된 서비스 등록
        let userRepo = userFeatureContainer.register(UserRepository.self) {
            UserRepositoryImpl(
                database: appContainer.resolve(DatabaseService.self)!  // 부모에서 해결
            )
        }

        let orderRepo = orderFeatureContainer.register(OrderRepository.self) {
            OrderRepositoryImpl(
                database: appContainer.resolve(DatabaseService.self)!  // 같은 DB 공유
            )
        }

        print("✅ Feature별 Child Container 설정 완료")

        // 5. 각 Container에서 의존성 해결 테스트

        // UserFeature에서 해결
        let userService = userFeatureContainer.resolve(UserService.self)  // 매크로로 자동 등록됨
        let userLogger = userFeatureContainer.resolve(Logger.self)        // 부모에서 상속

        // OrderFeature에서 해결
        let orderService = orderFeatureContainer.resolve(OrderService.self)
        let orderLogger = orderFeatureContainer.resolve(Logger.self)      // 부모에서 상속

        print("✅ Child Container들이 부모의 의존성을 성공적으로 상속받음")

        // 6. 실제 서비스 사용
        if let userService = userService {
            let greeting = await userService.greetUser(id: "123")
            print("👤 UserService: \(greeting)")
        }

        print("🎉 Parent-Child Container 데모 완료!")
    }

    /// ### SwiftUI 통합 예제
    func swiftUIIntegrationExample() {
        print("\n📱 SwiftUI 통합 예제")

        // 앱 레벨 컨테이너
        let appContainer = DIContainer()
        appContainer.register(DatabaseService.self) { DatabaseServiceImpl() }
        appContainer.register(NetworkService.self) { NetworkServiceImpl() }

        // View별 Child Container
        let homeViewContainer = appContainer.createChild()
        homeViewContainer.register(HomeViewModel.self) {
            HomeViewModel(
                database: appContainer.resolve(DatabaseService.self)!,
                network: appContainer.resolve(NetworkService.self)!
            )
        }

        let profileViewContainer = appContainer.createChild()
        profileViewContainer.register(ProfileViewModel.self) {
            ProfileViewModel(
                database: appContainer.resolve(DatabaseService.self)!  // 같은 DB 공유
            )
        }

        print("✅ SwiftUI View별 Container 분리 완료")

        // 각 View는 독립적이지만 공통 서비스는 공유
        let homeVM = homeViewContainer.resolve(HomeViewModel.self)
        let profileVM = profileViewContainer.resolve(ProfileViewModel.self)

        print("🎉 SwiftUI 통합 완료!")
    }

    /// ### 복합 기능 데모 (AutoRegister + Parent-Child)
    func combinedFeaturesDemo() async {
        print("\n🚀 복합 기능 데모 (AutoRegister + Parent-Child)")

        // 1. 루트 컨테이너에 기본 서비스들
        let appContainer = DIContainer()
        appContainer.register(DatabaseService.self) { DatabaseServiceImpl() }

        // 2. @AutoRegister 매크로로 자동 등록된 서비스들 사용
        // (UserService, UserRepositoryImpl이 이미 자동 등록됨)

        // 3. Feature 모듈별 Child Container
        let userModule = appContainer.createChild()
        let adminModule = appContainer.createChild()

        // 4. 일반 사용자용 서비스 (제한된 권한)
        userModule.register(UserPermissionService.self) {
            UserPermissionService(level: .user)
        }

        // 5. 관리자용 서비스 (전체 권한)
        adminModule.register(AdminPermissionService.self) {
            AdminPermissionService(level: .admin)
        }

        // 6. 각 모듈에서 서비스 해결 및 사용

        // 일반 사용자 모듈에서
        let userService = userModule.resolve(UserService.self)  // @AutoRegister로 자동 등록됨
        let userPermission = userModule.resolve(UserPermissionService.self)

        if let userService = userService, let userPermission = userPermission {
            let greeting = await userService.greetUser(id: "user123")
            print("👤 일반 사용자: \(greeting) (권한: \(userPermission.level))")
        }

        // 관리자 모듈에서
        let adminService = adminModule.resolve(UserService.self)  // 같은 서비스지만 다른 권한
        let adminPermission = adminModule.resolve(AdminPermissionService.self)

        if let adminService = adminService, let adminPermission = adminPermission {
            let greeting = await adminService.greetUser(id: "admin456")
            print("👑 관리자: \(greeting) (권한: \(adminPermission.level))")
        }

        print("🎉 복합 기능 데모 완료!")
        print("   - @AutoRegister로 보일러플레이트 제거")
        print("   - Parent-Child로 모듈별 권한 분리")
        print("   - 공통 서비스는 루트에서 공유")
    }
}

// MARK: - 지원 타입들 (예제용)

protocol DatabaseService {
    func query(_ sql: String) -> [String]
}

class DatabaseServiceImpl: DatabaseService {
    func query(_ sql: String) -> [String] {
        return ["result1", "result2"]
    }
}

protocol Logger {
    func log(_ message: String)
}

class ConsoleLogger: Logger {
    func log(_ message: String) {
        print("📝 Log: \(message)")
    }
}

protocol NetworkService {
    func fetch(_ url: String) async -> Data?
}

class NetworkServiceImpl: NetworkService {
    func fetch(_ url: String) async -> Data? {
        return "network data".data(using: .utf8)
    }
}

protocol OrderRepository {
    func getOrder(id: String) -> String
}

class OrderRepositoryImpl: OrderRepository {
    let database: DatabaseService

    init(database: DatabaseService) {
        self.database = database
    }

    func getOrder(id: String) -> String {
        return "Order-\(id)"
    }
}

// @AutoRegister
class OrderService {
    func processOrder(id: String) -> String {
        return "Processing order \(id)"
    }
}

class HomeViewModel: ObservableObject {
    let database: DatabaseService
    let network: NetworkService

    init(database: DatabaseService, network: NetworkService) {
        self.database = database
        self.network = network
    }
}

class ProfileViewModel: ObservableObject {
    let database: DatabaseService

    init(database: DatabaseService) {
        self.database = database
    }
}

enum PermissionLevel {
    case user, admin
}

class UserPermissionService {
    let level: PermissionLevel

    init(level: PermissionLevel) {
        self.level = level
    }
}

class AdminPermissionService {
    let level: PermissionLevel

    init(level: PermissionLevel) {
        self.level = level
    }
}

extension UserRepositoryImpl {
    convenience init(database: DatabaseService) {
        self.init()
        // database를 사용한 초기화 로직
    }
}

// MARK: - 데모 실행 함수

/// Phase 1 모든 기능을 데모합니다
func runPhase1Demo() async {
    print("🎯 DiContainer Phase 1 기능 데모 시작!")
    print("=" * 50)

    let demo = Phase1Demo()

    await demo.basicParentChildExample()
    demo.swiftUIIntegrationExample()
    await demo.combinedFeaturesDemo()

    print("\n" + "=" * 50)
    print("🎉 Phase 1 데모 완료!")
    print("✅ @AutoRegister 매크로로 보일러플레이트 90% 감소")
    print("✅ Parent-Child Container로 모듈별 의존성 분리")
    print("✅ 기존 API와 100% 호환 유지")
}